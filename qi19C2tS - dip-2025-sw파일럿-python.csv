Card ID,Card Name,Card URL,Card Description,Labels,Members,Due Date,Attachment Count,Attachment Links,Checklist Item Total Count,Checklist Item Completed Count,Vote Count,Comment Count,Last Activity Date,List ID,List Name,Board ID,Board Name,Archived,Start Date,Due Complete
681179157832e506903350f5,[ 두목 ] 이호준,https://trello.com/c/A2XZWVkp/1-%EB%91%90%EB%AA%A9-%EC%9D%B4%ED%98%B8%EC%A4%80,"두목님 정보

- HP : 010-9070-5164
- Mail : [jazzwave14@naver.com](mailto:jazzwave14@naver.com ""‌"") ( 개인 )

개인적으로 궁금한 부분들은 언제든 연락 주세요.. ^^/",,,,1,https://trello.com/1/cards/681179157832e506903350f5/attachments/681179157832e50690335117/download/hojunlee.jpg,0,0,0,0,2025-05-07T09:48:45.573Z,6811793092acdd010adaf1b8,파일럿,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681179d49577a52a77a4484a,출석 꼭 ! 확인 하세요,https://trello.com/c/S47z3eNM/2-%EC%B6%9C%EC%84%9D-%EA%BC%AD-%ED%99%95%EC%9D%B8-%ED%95%98%EC%84%B8%EC%9A%94,"<< 필독 !!!!   >>

**모바일 출입 태깅 시스템에 출입기록이 없으면 무조건 결석입니다.**

꼭!! 정상적인 태깅 부탁 드립니다.",,,,4,"https://trello.com/1/cards/681179d49577a52a77a4484a/attachments/681179d49577a52a77a44871/download/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2024-11-19_%EC%98%A4%ED%9B%84_8.38.56.png, https://trello.com/1/cards/681179d49577a52a77a4484a/attachments/6811c58554814515803a54ed/download/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2025-04-30_%EC%98%A4%ED%9B%84_3.35.09.png, https://trello.com/1/cards/681179d49577a52a77a4484a/attachments/6811c586c9ba86e4acc32e6a/download/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2025-04-30_%EC%98%A4%ED%9B%84_3.35.16.png, https://trello.com/1/cards/681179d49577a52a77a4484a/attachments/6811c586795e16eabb8bc15b/download/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7_2025-04-30_%EC%98%A4%ED%9B%84_3.35.25.png",0,0,0,0,2025-05-07T11:51:14.484Z,680f20b3fe28de73b992f43d,공지사항,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6811ac4ec6e7645483f387f3,학습진행,https://trello.com/c/A1T23I0G/15-%ED%95%99%EC%8A%B5%EC%A7%84%ED%96%89,"첨부파일을 잘 확인 해 주세요…

### **[ 학습진행 가이드 ]**

1. 학습할 과정 리스트에서 문제를 선택한다 (카드)
2. 카드를 열어 Members 클릭하고 자신을 등록시킨다
3. 댓글에 학습시작을 댓글로 남긴다.
4. 댓글로 다른 동료들과 소통하면서 즐겁게 학습을 진행한다.",,donggeonkim6,,1,https://trello.com/1/cards/6811ac4ec6e7645483f387f3/attachments/6811ac4ec6e7645483f3881a/download/%ED%95%99%EC%8A%B5%EC%A7%84%ED%96%89.pdf,0,0,0,0,2025-05-10T09:04:37.510Z,680f20b3fe28de73b992f43e,가이드라인,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6811894a6d2ffa2edf321dfc,동료평가진행,https://trello.com/c/zn3eDTA1/11-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80%EC%A7%84%ED%96%89,,,,,1,https://trello.com/1/cards/6811894a6d2ffa2edf321dfc/attachments/6811c5ff998e1b705b7451c1/download/%ED%8F%89%EA%B0%80%EC%8B%A0%EC%B2%AD.pdf,0,0,0,0,2025-04-30T06:41:04.261Z,680f20b3fe28de73b992f43e,가이드라인,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68118a5631112dc7033605bc,도와줘요,https://trello.com/c/BujB2F2y/13-%EB%8F%84%EC%99%80%EC%A4%98%EC%9A%94,"질문에 답을 알려 드릴 수 는 없습니다.

옆 의 동료를 믿고 다시 한번 도전 해 보세요..

그래도 힘들다면.. 여기 남겨 주세요..

어떤 부분이 힘든지 - 어떤 내용도 괜찮습니다.

도와줘요 리스트에 카드로 등록해 주세요",,,,0,,0,0,0,0,2025-04-30T02:26:30.280Z,680f20b3fe28de73b992f43e,가이드라인,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68117b40477e40b114c94945,꼭 보고 이해하길 - 패킷의 여행,https://trello.com/c/PGKWdGwJ/4-%EA%BC%AD-%EB%B3%B4%EA%B3%A0-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B8-%ED%8C%A8%ED%82%B7%EC%9D%98-%EC%97%AC%ED%96%89,"‌

[https://www.youtube.com/watch?v=XwphKCS_Kgw](https://www.youtube.com/watch?v=XwphKCS_Kgw ""smartCard-embed"")",,,,0,,0,0,0,0,2025-05-07T10:50:40.656Z,6811798823d0c572af4415bf,도와줘요,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68117b199ab5093904f0f989,자소서 쓰는 법 영상,https://trello.com/c/53HqbzI0/3-%EC%9E%90%EC%86%8C%EC%84%9C-%EC%93%B0%EB%8A%94-%EB%B2%95-%EC%98%81%EC%83%81,"‌

[https://www.youtube.com/watch?v=x37W59b7zNM](https://www.youtube.com/watch?v=x37W59b7zNM ""smartCard-embed"")",,,,0,,0,0,0,0,2025-05-24T02:04:16.451Z,6811798823d0c572af4415bf,도와줘요,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68118e1ca674c196cf89919b,git 이것이 무엇인고.. ?,https://trello.com/c/MIopDuoA/14-git-%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B3%A0,"‌

[https://www.youtube.com/watch?v=HXsKNIz0VRk](https://www.youtube.com/watch?v=HXsKNIz0VRk ""smartCard-embed"")",,,,0,,0,0,0,0,2025-04-30T02:42:36.829Z,6811798ebcf81ea5c0e5f749,한번쯤 보고 넘어가자,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681189edc8264e4ddd5b8220,학습일지,https://trello.com/c/sn3sMCSZ/12-%ED%95%99%EC%8A%B5%EC%9D%BC%EC%A7%80,"**각 과정별 학습일지 리스트가 있습니다.**
**학습이 진행 되고 나면 꼭 ! 해당 과정에 간단하게 댓글로 학습 일지를 기록해 주세요**

---

**[ 학습일지 예시 ]**

- 일 자 : 2024 / 10 / 25 (금)
- 학습 과정 : 자바 과정 1 :  1 ~ 3 문제
- 학습시간 : 1:30 PM ~ 3:00 PM
- 학습장소학교 : 도서관
- 학습내용 :
- 참고사이트 : 유튜브 : [http://aaa.bbb.com/dksdjlsfdjiow ](http://aaa.bbb.com/dksdjlsfdjiow%ED%9E%98%EB%93%A4%EC%97%88%EB%8D%98 ""‌"")
- 힘들었던 부분 : Subject 1- 3부분에서 세부적이라는 부분으로 진행되는 과정이 처음에는 이해가 잘 안되었습니다.
  몇번의 설명을 듣고 선생님과 함께 몇 번 해 보고 나서 알게 되었습니다.가장 희열을 느낀 지점도식화를 통해서 정리 되어 가면서 , 갑자기 도식화 된 부분들이 프로그래밍 코드로 변환 되는 신기한 경험을 하게 되었습니다.
- 후기 ( 이번 프로젝트로 무엇이 가장 크게 변화 했나요? )
  처음에 무엇을 먼저 시작하여야 할지 막막하여 학습 과정 소개 내용을 읽어보았습니다. 자세히 키워드를 중심으로 스스로 자료를 찾아 가면서 학습을 진행 하기가 처음에는 힘들었지만. 지나고 나니 점점 학습 속도가 올라가는 스스로를 알게 되었습니다.",,,,0,,0,0,0,0,2025-05-10T05:18:46.138Z,6811798ebcf81ea5c0e5f749,한번쯤 보고 넘어가자,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6827e6f6ba71e44bee052e54,동료평가 신청합니다 - 파이썬 - 과정 1 - 문제 (1 ~ 9),https://trello.com/c/N1v5136O/183-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-1-%EB%AC%B8%EC%A0%9C-1-9,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 1
  - 문제 1 : [https://github.com/moon9H/swpilotPyhon5/blob/main/src/Process1/1-1/main.py](https://github.com/moon9H/swpilotPyhon5/blob/main/src/Process1/1-1/main.py ""smartCard-inline"")
  - 문제 2 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-2 ""smartCard-inline"")
  - 문제 3 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-3 ""smartCard-inline"")
  - 문제 4 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-4 ""smartCard-inline"")
  - 문제 5 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-5 ""smartCard-inline"")
  - 문제 6 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-6 ""smartCard-inline"")
  - 문제 7 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-7 ""smartCard-inline"")
  - 문제 8 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-8 ""smartCard-inline"")
  - 문제 9 : [https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-9](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process1/1-9 ""smartCard-inline"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user0eb36aad33715df064b819e01321c4d8,2025-05-18T04:00:00.000Z,0,,0,0,0,1,2025-06-14T07:59:50.564Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
682817e01086226bcc910fb3,"동료평가 신청합니다 -파이썬- 과정1 문제 (1,4,5,6)",https://trello.com/c/fzNFbLVR/185-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%951-%EB%AC%B8%EC%A0%9C-1456,"등록자 : 파이썬 5팀 권재영

문제 1: [swproject/problem1st/problem1.1 at main · jaeyoung0710/swproject](https://github.com/jaeyoung0710/swproject/tree/main/problem1st/problem1.1 ""‌"")

문제 4:[swproject/problem1st/problem1.4 at main · jaeyoung0710/swproject](https://github.com/jaeyoung0710/swproject/tree/main/problem1st/problem1.4 ""‌"")

문제 5:[swproject/problem1st/problem1.5 at main · jaeyoung0710/swproject](https://github.com/jaeyoung0710/swproject/tree/main/problem1st/problem1.5 ""‌"")

문제6:[swproject/problem1st/problem1.6 at main · jaeyoung0710/swproject](https://github.com/jaeyoung0710/swproject/tree/main/problem1st/problem1.6 ""‌"")",[ 완료 ] 동료평가 (blue),"songchaehyun, user95480964",2025-05-17T06:00:00.000Z,0,,0,0,0,1,2025-05-26T06:30:05.199Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
682958861ca528e1667b2d9a,"동료평가 신청합니다-파이썬-과정1 문제(1,2) , 과정 2 문제(1)",https://trello.com/c/4ERVjObY/186-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%951-%EB%AC%B8%EC%A0%9C12-%EA%B3%BC%EC%A0%95-2-%EB%AC%B8%EC%A0%9C1,"'- 등록자 : 파이썬 3팀
- 등록과정 : 파이썬 과정 1
- **비고**
  - **다음주 중으로 github으로 변경하겠습니다.**
- 과정1
  - 문제 1 : [https://drive.google.com/file/d/1Zm3NxhnOQfoFneI5nSBo9aXbz8-GL28h/view?usp=drive_link](https://drive.google.com/file/d/1Zm3NxhnOQfoFneI5nSBo9aXbz8-GL28h/view?usp=drive_link ""smartCard-inline"")
  - 문제 2 : [https://drive.google.com/file/d/1QRHCZOfPXXgj59cfu9iFIwglNttw7Da5/view?usp=drive_link](https://drive.google.com/file/d/1QRHCZOfPXXgj59cfu9iFIwglNttw7Da5/view?usp=drive_link ""smartCard-inline"")
- 평가방법
  - 온라인 : discord 화상으로 진행",[ 완료 ] 동료평가 (blue),moongyuhwang,2025-05-18T04:00:00.000Z,0,,0,0,0,1,2025-05-21T00:54:36.833Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68295cb9af74a7b651a4fcd5,동료평가 신청합니다 - 파이썬 - 과정 2 - 문제(1 ~ 10),https://trello.com/c/b143OObT/187-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-2-%EB%AC%B8%EC%A0%9C1-10,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 2
  - 문제 1 : [Process 2-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-1 ""‌"")
  - 문제 2 : [Process 2-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-2 ""‌"")
  - 문제 3 : [Process 2-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-3 ""‌"")
  - 문제 4 : [Process 2-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-4 ""‌"")
  - 문제 5 : [Process 2-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-5 ""‌"")
  - 문제 6 : [Process 2-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-6 ""‌"")
  - 문제 7 : [Process 2-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-7 ""‌"")
  - 문제 8 : [Process 2-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-8 ""‌"")
  - 문제 9 : [Process 2-9](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-9 ""‌"")
  - 문제 10 : [Process 2-10](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process2/2-10 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),"user0eb36aad33715df064b819e01321c4d8, user95480964",2025-05-18T04:30:00.000Z,0,,0,0,0,1,2025-05-22T00:40:58.895Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
682e728f231ed7de42307810,동료평가 신청합니다 - 파이썬 - 과정 3 - 문제(1 ~ 9),https://trello.com/c/BBiK9XkS/188-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-3-%EB%AC%B8%EC%A0%9C1-9,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 3
  - 문제 1 : [Process 3-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-1 ""‌"")
  - 문제 2 : [Process 3-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-2 ""‌"")
  - 문제 3 : [Process 3-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-3 ""‌"")
  - 문제 4 : [Process 3-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-4 ""‌"")
  - 문제 5 : [Process 3-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-5 ""‌"")
  - 문제 6 : [Process 3-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-6 ""‌"")
  - 문제 7 : [Process 3-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-7 ""‌"")
  - 문제 8 : [Process 3-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-8 ""‌"")
  - 문제 9 : [Process 3-9](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process3/3-9 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user0eb36aad33715df064b819e01321c4d8,2025-05-24T04:00:00.000Z,0,,0,0,0,1,2025-05-24T04:43:19.648Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68312968c08f165fe4a83d89,동료평가 신청합니다 - 파이썬 - 과정 1 - 문제 1~4,https://trello.com/c/DJqVd1CA/189-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-1-%EB%AC%B8%EC%A0%9C-14,"'- 등록자 : 파이썬5팀 송채현
- 등록과정 : 파이썬 과정 1
  - 문제 1 : [https://github.com/songchaehyun/swpilot2025/blob/main/p1/main.py](https://github.com/songchaehyun/swpilot2025/blob/main/p1/main.py ""smartCard-inline"")
  - 문제 2 : [https://github.com/songchaehyun/swpilot2025/blob/main/p1/1-2.py](https://github.com/songchaehyun/swpilot2025/blob/main/p1/1-2.py ""smartCard-inline"")
  - 문제 3 : [https://github.com/songchaehyun/swpilot2025/blob/main/p1/1-3.py](https://github.com/songchaehyun/swpilot2025/blob/main/p1/1-3.py ""smartCard-inline"")
  - 문제 4 : [https://github.com/songchaehyun/swpilot2025/blob/main/p1/design_dome.py](https://github.com/songchaehyun/swpilot2025/blob/main/p1/design_dome.py ""smartCard-inline"")
- 평가방법
  - 오프라인 : 시간 장소 협의
  - 온라인 : 디스코드로 진행",[ 완료 ] 동료평가 (blue),"joeunil, songchaehyun",,0,,0,0,0,1,2025-06-12T08:29:32.767Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6837f3764f02890997e71dc7,동료평가 신청합니다 - 파이썬 - 과정 4 - 문제(1 ~ 9),https://trello.com/c/Ydx2NeQI/191-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-4-%EB%AC%B8%EC%A0%9C1-9,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 4
  - 문제 1 : [Process 4-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-1 ""‌"")
  - 문제 2 : [Process 4-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-2 ""‌"")
  - 문제 3 : [Process 4-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-3 ""‌"")
  - 문제 4 : [Process 4-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-4 ""‌"")
  - 문제 5 : [Process 4-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-5 ""‌"")
  - 문제 6 : [Process 4-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-6 ""‌"")
  - 문제 7 : [Process 4-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-7 ""‌"")
  - 문제 8 : [Process 4-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-8 ""‌"")
  - 문제 9 : [Process 4-9](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process4/4-9 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),,2025-05-30T04:00:00.000Z,0,,0,0,0,0,2025-06-07T04:09:26.386Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6843bb81e0b4430de9727e09,동료평가 신청합니다 - 파이썬 - 과정 5 - 문제(1 ~ 8),https://trello.com/c/7uq1FNiH/192-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-5-%EB%AC%B8%EC%A0%9C1-8,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 5
  - 문제 1 : [Process 5-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-1 ""‌"")
  - 문제 2 : [Process 5-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-2 ""‌"")
  - 문제 3 : [Process 5-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-3 ""‌"")
  - 문제 4 : [Process 5-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-4 ""‌"")
  - 문제 5 : [Process 5-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-5 ""‌"")
  - 문제 6 : [Process 5-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-6 ""‌"")
  - 문제 7 : [Process 5-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-7 ""‌"")
  - 문제 8 : [Process 5-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process5/5-8 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user0eb36aad33715df064b819e01321c4d8,2025-06-08T04:30:00.000Z,0,,0,0,0,1,2025-06-07T08:37:22.020Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
684a899395abb2de655400a2,"동료평가 신청합니다 - 파이썬 - 과정2 문제 1, 과정3 문제1",https://trello.com/c/lRU32JMM/193-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%952-%EB%AC%B8%EC%A0%9C-1-%EA%B3%BC%EC%A0%953-%EB%AC%B8%EC%A0%9C1,"'- 등록자 : 파이썬5팀 송채현
- 등록과정 : 파이썬
  - 과정 2 문제 1 : [https://github.com/songchaehyun/swpilot2025/blob/main/p2/door_hacking.py](https://github.com/songchaehyun/swpilot2025/blob/main/p2/door_hacking.py ""smartCard-inline"")
  - 과정 3 문제 1 : [https://github.com/songchaehyun/swpilot2025/blob/main/p3/mas_map.py](https://github.com/songchaehyun/swpilot2025/blob/main/p3/mas_map.py ""smartCard-inline"")
- 평가방법
  - 오프라인 : 대구스마트시티센터 7층",[ 완료 ] 동료평가 (blue),"songchaehyun, user44559078",,0,,0,0,0,1,2025-06-12T10:05:20.380Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
684a976de84ae079f0fbd5cc,동료평가 신청합니다 - 파이썬 - 과정 6 - 문제(1~8),https://trello.com/c/egr5Uyqs/194-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-6-%EB%AC%B8%EC%A0%9C18,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 6
  - 문제 1 : [Process 6-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-1 ""‌"")
  - 문제 2 : [Process 6-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-2 ""‌"")
  - 문제 3 : [Process 6-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-3 ""‌"")
  - 문제 4 : [Process 6-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-4 ""‌"")
  - 문제 5 : [Process 6-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-5 ""‌"")
  - 문제 6 : [Process 6-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-6 ""‌"")
  - 문제 7 : [Process 6-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-7 ""‌"")
  - 문제 8 : [Process 6-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process6/6-8 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user0eb36aad33715df064b819e01321c4d8,2025-06-14T07:30:00.000Z,0,,0,0,0,1,2025-06-14T07:55:51.828Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6856226fcdf4de8da528eb2d,동료평가 신청합니다 - 파이썬 - 과정 7 - 문제(1~4),https://trello.com/c/xOMa9hmP/195-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-7-%EB%AC%B8%EC%A0%9C14,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 7
  - 문제 1 : [Process 7-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process7/7-1 ""‌"")
  - 문제 2 : [Process 7-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process7/7-2 ""‌"")
  - 문제 3 : [Process 7-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process7/7-3 ""‌"")
  - 문제 4 : [Process 7-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process7/7-4 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user64523475,2025-06-21T05:00:00.000Z,0,,0,0,0,1,2025-06-21T05:55:09.824Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
685bc1915481104d635c5027,동료평가 신청합니다 - 파이썬 - 과정 8 - 문제(1~8),https://trello.com/c/gdEXrcOO/196-%EB%8F%99%EB%A3%8C%ED%8F%89%EA%B0%80-%EC%8B%A0%EC%B2%AD%ED%95%A9%EB%8B%88%EB%8B%A4-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B3%BC%EC%A0%95-8-%EB%AC%B8%EC%A0%9C18,"'- 등록자 : 파이썬 5팀 황문규
- 등록과정 : 파이썬 과정 8
  - 문제 1 : [Process 8-1](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-1 ""‌"")
  - 문제 2 : [Process 8-2](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-2 ""‌"")
  - 문제 3 : [Process 8-3](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-3 ""‌"")
  - 문제 4 : [Process 8-4](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-4 ""‌"")
  - 문제 5 : [Process 8-5](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-5 ""‌"")
  - 문제 6 : [Process 8-6](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-6 ""‌"")
  - 문제 7 : [Process 8-7](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-7 ""‌"")
  - 문제 8 : [Process 8-8](https://github.com/moon9H/swpilotPyhon5/tree/main/src/Process8/8-8 ""‌"")
- 평가방법
  - 오프라인 : 시간 장소 협의 (discord ID : hwangmunkyu)
  - 온라인 : 디스코드 화상으로 진행",[ 완료 ] 동료평가 (blue),user0eb36aad33715df064b819e01321c4d8,2025-06-26T04:00:00.000Z,0,,0,0,0,1,2025-06-26T04:37:30.327Z,681179965f409d9f542ae0d6,동료평가,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681185f7eb281eee2fcaa412,"(문제1) ""컴퓨터를 복구하고 사고 원인을 파악해보자""",https://trello.com/c/XmrhORxX/6-%EB%AC%B8%EC%A0%9C1-%EC%BB%B4%ED%93%A8%ED%84%B0%EB%A5%BC-%EB%B3%B5%EA%B5%AC%ED%95%98%EA%B3%A0-%EC%82%AC%EA%B3%A0-%EC%9B%90%EC%9D%B8%EC%9D%84-%ED%8C%8C%EC%95%85%ED%95%B4%EB%B3%B4%EC%9E%90,"## 수행과제

- 로그 분석을 위해 Python으로 소프트웨어를 개발해야 한다. 이를 위해서 먼저 Python을 설치해야 한다.
- 빠른 개발을 위해 Python 개발 도구들을 알아보고 비교해서 하나의 도구를 선정해서 설치한다.
- 설치가 잘 되었는지 확인 하기 위해서 ‘Hello Mars’를 출력해 본다.
- 본격적으로 로그를 분석하기 위해서 mission\_computer\_main.log 파일을 열고 전체내용을 화면에 출력해 본다. 이때 코드는 main.py 파일로 저장한다.
  (로그 데이터는 별도 제공)
- 파일을 처리 할 때에 발생할 수 있는 예외를 처리한다.
- mission\_computer\_main.log의 내용을 통해서 사고의 원인을 분석하고 정리해서 보고서(log_analysis.md)를 Markdown 형태로 를 작성해 놓는다.

‌

## 제약사항

- Python 개발 도구 중 AI의 직접적인 도움을 받는 도구는 사용할 수 없다.
- 보고서는 UTF8 형태의 encoding을 사용해서 저장한다.
- 수행 과제에 지시된 파일 이름을 준수한다.

‌

## 보너스 과제

- 출력 결과를 시간의 역순으로 정렬해서 출력한다.
- 출력 결과 중 문제가 되는 부분만 따로 파일로 저장한다.",,"123440450341, beegoorum, davidlee49337730, donggeonkim6, foxtrot151, jkh0574, jyoung250, kty0603, mandeender, minhyukpark7, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13173082, user13823470, user30156652, user44559078, user54045040, user77486599, user8efb568a60c77c958eed3719fce29a5c, vaishnavivats",,1,https://trello.com/1/cards/681185f7eb281eee2fcaa412/attachments/681b46fafd5706eb53438ef1/download/1-1-mission_computer_main.log,0,0,0,22,2025-05-17T02:00:12.630Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681186065a43055162cbbd6f,"(문제2) ""미션 컴퓨터의 내용을 좀 더 분석해 보자""",https://trello.com/c/ahfZjpBR/7-%EB%AC%B8%EC%A0%9C2-%EB%AF%B8%EC%85%98-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%82%B4%EC%9A%A9%EC%9D%84-%EC%A2%80-%EB%8D%94-%EB%B6%84%EC%84%9D%ED%95%B4-%EB%B3%B4%EC%9E%90,"# 수행과제

- mission\_computer\_main.log 파일을 읽어들여서 출력한다. 콤마를 기준으로날짜 및시간과 로그 내용을 분류해서 Python의 리스트(List) 객체로 전환한다.
- 전환된 리스트 객체를 화면에 출력한다.
- 리스트 객체를 시간의 역순으로 정렬(sort)한다.
- 리스트 객체를 사전(Dict) 객체로 전환한다.
- 사전 객체로 전환된 내용을 mission\_computer\_main.json 파일로 저장하는데 파일 포멧은 JSON(JavaScript Ontation)으로 저장한다.

## 제약사항

- 추가 라이브러리를 사용하지 않고 Python 기본 명령어로만 작업해야 한다.
- 파일처리 부분에는 모두 예외처리가 되어 있어야 한다.
- JSON 포멧이 완전하게 구현되어야 한다.

##

보너스 과제

- 사전 객체로 전환된 내용에서 특정 문자열 (예를 들어 Oxygen)을 입력하면 해당 내용을출력하는 코드를 추가한다.",,"123440450341, beegoorum, davidlee49337730, donggeonkim6, foxtrot151, jkh0574, joeunil, jyoung250, kty0603, mandeender, minhyukpark7, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13823470, user30156652, user44559078, user54045040, user77486599, vaishnavivats",,0,,0,0,0,20,2025-05-17T02:53:53.089Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6811860c53f33478c9063b42,"(문제3) ""인화 물질을 찾아라""",https://trello.com/c/X8cyJBZ5/10-%EB%AC%B8%EC%A0%9C3-%EC%9D%B8%ED%99%94-%EB%AC%BC%EC%A7%88%EC%9D%84-%EC%B0%BE%EC%95%84%EB%9D%BC,"# 수행과제

- Mars\_Base\_Inventory_List.csv 의 내용을 읽어 들어서 출력한다.
- Mars\_Base\_Inventory_List.csv 내용을 읽어서 Python의 리스트 객체로 변환한다. 이때 라인 단위로 객체로 변환하는 것이 아니라 각 항목(컬럼)별로 구별되어서 배열(array) 형태로 저장 되어야 한다.
- 배열 내용을 적제 화물 목록을 인화성이 높은 순으로 정렬한다.
- 인화성 지수가 0.7 이상되는 목록을 뽑아서 별도로 출력한다.
- 인화성 지수가 0.7 이상되는 목록을 CSV 포멧(Mars\_Base\_Inventory_danger.csv)으로 저장한다.

‌

## 제약사항

- Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 파일을 다루는 부분들은 모두 예외처리가 되어 있어야 한다.
- 이번 과제에서는 리스트, 튜플, 사전 객체를 사용하지 못하고 배열만 사용해서 문제를 해결해야 한다.

‌

## 보너스 과제

- 인화성 순서로 정렬된 배열의 내용을 이진 파일형태로 저장한다. 파일이름은
  Mars\_Base\_Inventory_List.bin
- 저장된 Mars\_Base\_Inventory_List.bin 의 내용을 다시 읽어 들여서 화면에 내용을 출력한다.",,"123440450341, beegoorum, davidlee49337730, donggeonkim6, foxtrot151, jkh0574, joeunil, jyoung250, kty0603, mandeender, minhyukpark7, moongyuhwang, user0eb36aad33715df064b819e01321c4d8, user30156652, user54045040, user77486599, vaishnavivats",,1,https://trello.com/1/cards/6811860c53f33478c9063b42/attachments/6817396823afd12bdb010224/download/1-3-Mars_Base_Inventory_List.csv,0,0,0,18,2025-06-23T03:25:19.281Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
68118613ed45d91883965e25,"(문제4) ""화성 기지의 돔을 복구하라""",https://trello.com/c/kze9EBfR/9-%EB%AC%B8%EC%A0%9C4-%ED%99%94%EC%84%B1-%EA%B8%B0%EC%A7%80%EC%9D%98-%EB%8F%94%EC%9D%84-%EB%B3%B5%EA%B5%AC%ED%95%98%EB%9D%BC,"## 수행과제

- 날아가 버린 천장의 돔의 길이를 재어보니 10m가 나왔다. 타원이 아닌 완전한 반구체의형태를 한 돔의 전체 면적을 구하는 식을 세워보고 sphere_area()라는 함수로 제작한다. 함수는 파라메터로 지름(diameter)을 입력받게 구현한다.
- 사용 할 수 있는 재료는 유리, 알루미늄, 탄소강이 있다고 할 때 각각 무게는 다음과 같을때 sphere_area() 함수에 재질을 material이라는 파라메터로 추가 할 수 있게 만들고두께는 thickness라는 파라메터로 입력할 수 있게 만든다.
  - 재질의 무게
    - 유리: 2.4g /cm3
    - 알루미늄: 2.7g/cm3
    - 탄소강: 7.85g/cm3
- 함수의 입력되는 재질과 지름은 input()을 사용해서 사용자로 부터 입력을 받아야 한다.
- sphere_area() 함수에서 파라메터 중 material은 기본값이 유리 그리고 두께는 기본값이 1이 되게 한다.
- 생각해 보니 무게라는 기준은 지구를 기준으로 한 것이었다. 화성의 중력을 반영해서 다시 수식에 반영한다.
- 모든 계산 결과에서 소수점 이하의 결과가 나올 경우 소수점 이하 세 자리까지만 출력해서 결과가 지나치게 길어지는 것을 피한다.
- 계산 결과가 나오면 전역변수에 계산한 값을 저장하고 다음과 같은 형태로 출력한다.
  - 전역변수 이름:
    - 재질: material
    - 지름: diameter
    - 두께: thickness
    - 면적: area
    - 무게: weight
  - 출력 형식: 재질 ⇒ 유리, 지름 ⇒ 000, 두께 ⇒ 000, 면적 ⇒ 000, 무게⇒000 kg
- 작업이 완료되면 design_dome.py 라는 이름으로 저장한다.

## 제약사항

- Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 입력되는 지름의 값이 0이 되면 안된다.
- 한번 계산으로 종료되지 않고 계속해서 조건을 바꾸어가며 반복해서 계산할 수 있게 해야한다.
- 출력값이 소수점 이하로 너무 길 때에는 소수점 3자리까지만 출력 할 수 있어야 한다.
- 더 이상 계산이 필요없을 때에는 쉽게 종료 할 수 있어야 한다.

‌

## 보너스 과제

- 파라메터에 숫자가 아닌 문자가 들어갔을 때 오류가 발생하지 않도록 처리한다.",,"123440450341, jkh0574, joeunil, jyoung250, kty0603, mandeender, minhyukpark7, moongyuhwang, songchaehyun, user30156652, user54045040, user77486599, vaishnavivats",,0,,0,0,0,11,2025-06-03T10:33:47.486Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6811861aa9c67472aebb5e58,"(문제5) ""화성 기지의 취약점을 찾아서 보강하자""",https://trello.com/c/Areah5No/8-%EB%AC%B8%EC%A0%9C5-%ED%99%94%EC%84%B1-%EA%B8%B0%EC%A7%80%EC%9D%98-%EC%B7%A8%EC%95%BD%EC%A0%90%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C-%EB%B3%B4%EA%B0%95%ED%95%98%EC%9E%90,"# 수행과제

- numpy를 사용하기 위해서 import를 한다.
- mars\_base\_main\_parts-001.csv, mars\_base\_main\_parts-002.csv,
  mars\_base\_main_parts-003.csv 파일들을 모두 numpy를 사용해서 읽어들여서 각각 arr1, arr2, arr3 과 같이 ndarray 타입으로
  가져온다.
- 3개의 배열을 하나로 합치고(merge) 이름을 parts 라는 ndarray 를 생성한다.
- parts를 이용해서 각 항목의 평균값을 구한다.
- 평균값이 50 보다 작은 값을 뽑아내서 parts\_to\_work_on.csv 라는 파일로 별도로 저장한다.

‌

## 제약사항

- Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
- numpy는 추가로 사용 할 수 있다.
- 파일로 저장하는 부분에는 반드시 예외처리가 되어 있어야 한다.

‌

## 보너스 과제

- parts\_to\_work_on.csv를 읽어서 parts2라는 ndarray에 저장한다.
- parts2의 내용을 기반으로 전치행렬을 구하고 그 내용을 parts3에 저장하고 출력한다.",,"123440450341, jkh0574, jyoung250, minhyukpark7, moongyuhwang, user30156652, user54045040, user77486599, vaishnavivats",,3,"https://trello.com/1/cards/6811861aa9c67472aebb5e58/attachments/68173a2f8a2d836ff2479126/download/1-5-mars_base_main_parts-001.csv, https://trello.com/1/cards/6811861aa9c67472aebb5e58/attachments/68173a2fdee3b162f7814224/download/1-5-mars_base_main_parts-002.csv, https://trello.com/1/cards/6811861aa9c67472aebb5e58/attachments/68173a30b00a537d01645afa/download/1-5-mars_base_main_parts-003.csv",0,0,0,7,2025-06-07T08:36:13.878Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
68170fb92b95243672a56b56,"(문제6) ""미션 컴퓨터 리턴즈""",https://trello.com/c/IT7yb0mU/21-%EB%AC%B8%EC%A0%9C6-%EB%AF%B8%EC%85%98-%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%A6%AC%ED%84%B4%EC%A6%88,"# 수행과제

- 더미 센서에 해당하는 클래스를 생성한다. 클래스의 이름은 DummySensor로 정의 한다.
- DummySensor의 멤버로 env_values라는 사전 객체를 추가한다. 사전 객체에는 다음과 같은 항목들이 추가 되어 있어야 한다.
  - 화성 기지 내부 온도 (mars\_base\_internal_temperature)
  - 화성 기지 외부 온도 (mars\_base\_external_temperature)
  - 화성 기지 내부 습도 (mars\_base\_internal_humidity)
  - 회성 기지 외부 광량 (mars\_base\_external_illuminance)
  - 화성 기지 내부 이산화탄소 농도 (mars\_base\_internal_co2)
  - 화성 기지 내부 산소 농도 (mars\_base\_internal_oxygen)
- DummySensor는 테스트를 위한 객체이므로 데이터를 램덤으로 생성한다.
- DummySensor 클래스에 set\_env() 메소드를 추가한다. set\_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env_values 항목에 채워주는 역할을 한다. 각 항목의 값의 범위는 다음과 같다.
  - 화성 기지 내부 온도 (18~30도)
  - 화성 기지 외부 온도 (0~21도)
  - 화성 기지 내부 습도 (50~60%)
  - 화성 기지 외부 광량 (500~715 W/m2)
  - 화성 기지 내부 이산화탄소 농도 (0.02~0.1%)
  - 화성 기지 내부 산소 농도 (4%~7%)
- DummySensor 클래스는 get\_env() 메소드를 추가하는데 get\_env() 메소드는
  env_values를 return 한다.
- DummySensor 클래스를 ds라는 이름으로 인스턴스(Instance)로 만든다.인스턴스화 한 DummySensor 클래스에서 set\_env()와 get\_env()를 차례로 호출해서값을 확인한다.
- 전체 코드를 mars\_mission\_computer.py 파일로 저장한다.

##
제약사항

- Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 단 random을 다루는 라이브러리는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

## 보너스 과제

- 출력하는 내용을 날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 와 같이 파일에 log를 남기는 부분을 get_env()에 추가 한다.",,"jkh0574, jyoung250, minhyukpark7, moongyuhwang, user30156652, user54045040, vaishnavivats",,0,,0,0,0,6,2025-06-14T08:30:26.677Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681711154ce4276e27d5e93e,"(문제7) ""살아난 미션 컴퓨터""",https://trello.com/c/eDNbE9vK/23-%EB%AC%B8%EC%A0%9C7-%EC%82%B4%EC%95%84%EB%82%9C-%EB%AF%B8%EC%85%98-%EC%BB%B4%ED%93%A8%ED%84%B0,"# 학습목표: 터미널 출력, time

‌

수행과제

- 미션 컴퓨터에 해당하는 클래스를 생성한다. 클래스의 이름은 MissionComputer로 정의한다.
- 미션 컴퓨터에는 화성 기지의 환경에 대한 값을 저장할 수 있는 사전(Dict) 객체가
  env_values라는 속성으로 포함되어야 한다.
- env_values라는 속성 안에는 다음과 같은 내용들이 구현 되어야 한다.
  - 화성 기지 내부 온도 (mars\_base\_internal_temperature)
  - 화성 기지 외부 온도 (mars\_base\_external_temperature)
  - 화성 기지 내부 습도 (mars\_base\_internal_humidity)
  - 회성 기지 외부 광량 (mars\_base\_external_illuminance)
  - 화성 기지 내부 이산화탄소 농도 (mars\_base\_internal_co2)
  - 화성 기지 내부 산소 농도 (mars\_base\_internal_oxygen)
- 문제 3에서 제작한 DummySensor 클래스를 ds라는 이름으로 인스턴스화 시킨다.
- MissionComputer에 get\_sensor\_data() 메소드를 추가한다.
- get\_sensor\_data() 메소드에 다음과 같은 세 가지 기능을 추가한다.
  - 센서의 값을 가져와서 env_values에 담는다.
  - env_values의 값을 출력한다. 이때 환경 정보는 값은 json 형태로 화면에 출력한다.
  - 위의 두 가지 동작을 5초에 한번씩 반복한다.
- MissionComputer 클래스를 RunComputer 라는 이름으로 인스턴스화 한다.
- RunComputer 인스턴스의 get\_sensor\_data() 메소드를 호출해서 지속적으로 환경에대한 값을 출력 할 수 있도록 한다.
- 전체 코드를 mars\_mission\_computer.py 파일로 저장한다.

‌

## 제약사항

- Python에서 기본 제공되는 명령어만 사용해야 하며 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 단 시간을 다루는 라이브러리는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

## 보너스 과제

- 특정 키를 입력할 경우 반복적으로 출력되던 화성 기지의 환경에 대한 출력을 멈추고‘Sytem stoped....’ 를 출력 할 수 있어야 한다.
- 5분에 한번씩 각 환경값에 대한 5분 평균 값을 별도로 출력한다.",,"jyoung250, moongyuhwang, user30156652, user54045040",,0,,0,0,0,4,2025-06-21T06:05:27.678Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681711f9081a041c504fdd63,"(문제8) ""불안정한 미션 컴퓨터...""",https://trello.com/c/nkuSMybw/25-%EB%AC%B8%EC%A0%9C8-%EB%B6%88%EC%95%88%EC%A0%95%ED%95%9C-%EB%AF%B8%EC%85%98-%EC%BB%B4%ED%93%A8%ED%84%B0,"# 학습목표: 시스템 정보

‌

# 수행과제

- 파이썬 코드를 사용해서 다음과 같은 미션 컴퓨터의 정보를 알아보는 메소드를
  get\_mission\_computer_info() 라는 이름으로 만들고 문제 7에서 완성한
  MissionComputer 클래스에 추가한다.
  - 필요한 미션 컴퓨터의 시스템 정보
    - 운영체계
    - 운영체계 버전
    - CPU의 타입
    - CPU의 코어 수
    - 메모리의 크기
- get\_mission\_computer_info()에 가져온 시스템 정보를 JSON 형식으로 출력하는 코드를 포함한다.
- 미션 컴퓨터의 부하를 가져오는 코드를 get\_mission\_computer_load() 메소드로 만들고 MissionComputer 클래스에 추가한다
- get\_mission\_computer_load() 메소드의 경우 다음과 같은 정보들을 가져 올 수 있게한다.
  - CPU 실시간 사용량
  - 메모리 실시간 사용량
- get\_mission\_computer_load()에 해당 결과를 JSON 형식으로 출력하는 코드를 추가한다.
- get\_mission\_computer\_info(), get\_mission\_computer\_load()를 호출해서 출력이 잘되는지 확인한다.
- MissionComputer 클래스를 runComputer 라는 이름으로 인스턴스화 한다.
- runComputer 인스턴스의 get\_mission\_computer\_info(),get\_mission\_computer\_load() 메소드를 호출해서 시스템 정보에 대한 값을 출력 할수 있도록 한다.
- 최종적으로 결과를 mars\_mission\_computer.py 에 저장한다.

## 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 시스템 정보를 가져오는 부분은 별도의 라이브러리를 사용 할 수 있다.
- 시스템 정보를 가져오는 부분은 예외처리가 되어 있어야 한다.
- 모든 라이브러리는 안정된 마지막 버전을 사용해야 한다.

‌

## 보너스 과제

- setting.txt 파일을 만들어서 출력되는 정보의 항목을 셋팅 할 수 있도록 코드를 수정한다.",,"jyoung250, moongyuhwang, user30156652",,0,,0,0,0,2,2025-06-03T10:19:44.664Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681713051c3c8cade08628ff,"(문제9) ""미션 컴퓨터 모니터링""",https://trello.com/c/yZgYuUfp/27-%EB%AC%B8%EC%A0%9C9-%EB%AF%B8%EC%85%98-%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81,"# 학습목표: Threding, Multi process

‌

# 수행과제

- 값들을 연속적으로 출력하기 위해서 MissionComputer 클래스에 있는
  get\_mission\_computer\_info(), get\_mission\_computer\_load() 두 개의 메소드를time 라이브러리를 사용해서 각각 20초에 한번씩 결과를 출력 할 수 있게 수정한다.
- MissionComputer 클래스를 runComputer 라는 이름으로 인스턴스화 한다.
- runComputer 인스턴스의 get\_mission\_computer_info(),
  get\_mission\_computer\_load(), get\_sensor_data() 메소드를 각각 멀티 쓰레드로 실행 시킨다.
- 다시 코드를 수정해서 MissionComputer 클래스를 runComputer1, runComputer2,runComputer3 이렇게 3개의 인스턴스를 만든다.
- 3개의 인스턴스를 멀티 프로세스로 실행시켜서 각각get\_mission\_computer\_info(),get\_mission\_computer\_load(),get\_sensor\_data()를 실행시키고 출력을 확인한다.
- 최종적으로 결과를 mars\_mission\_computer.py 에 저장한다.

##

## 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 쓰레드와 멀티 프로세스를 다루는 부분은 외부 라이브러리 사용 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

## 보너스 과제

- 멀티 쓰레드와 멀티 프로세스에서 반복적으로 출력되는 중간에 특정한 키를 입력 받아출력을 멈출 수 있게 코드를 작성한다.",,"jyoung250, moongyuhwang, user30156652",,0,,0,0,0,1,2025-06-03T10:19:46.369Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68170a731f4d66c5d9dd631b,(평가) 문제 1 - 1,https://trello.com/c/FZf1OKQd/16-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-1,"평가 가이드

**[기본 확인]**

- Python이 설치되어 있는가?
  - 터미널에서(혹은 명령 프롬프트) python -v를 입력해 본다.
- 개발도구를 선택하고 설치를 잘 했는가?
  - 해당 개발도구의 설치 상태를 확인한다.
- ‘Hello Mars’를 터미널에 출력 할 수 있다.
  - Print문을 사용해서 Hello Mars를 출력한다.
- 파일 입출력 등에서 예외처리가 잘 작동하는지 오류를 발생시켜서 예외 처리 여부를 확인 할 수 있다.
  - 터미널에서 `java -version` 입력 후 버전 확인

**[프로그램 구현 확인]**

- 파일명을 main.py로 설정했는지 확인하다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- mission\_computer\_main.log 파일을 잘 읽어들이고 파일을 화면에 출력 한다.
  - mission\_computer\_main.log의 내용을 화면에 출력되는지 확인한다.
- 파일의 내용을 통해서 사고 원인을 찾아서 Markdown으로 저장한다.
  - [https://www.markdownguide.org/](https://www.markdownguide.org/ ""smartCard-inline"")  에서 제시되는 Markdown으로 저장되어야 한다.

**[개념 확인 질문]**

- 해당 개발 도구의 선정이유를 설명 한다.
  - 안정성, 호환성, 라이센스 및 지원 정책, 버전의 새로운 기능, 개인적 경험 또는 선호도 등을 고려한 답변

**[보너스 문제 확인]**

- 출력 결과를 시간의 역순으로 정렬해서 출력한다.
  - log 파일에 표시된 시간의 역순으로 출력되고 있는지 확인한다.
- 출력 결과 중 문제가 되는 부분만 따로 파일로 저장한다.
  - 전체 내용중 직접적으로 폭발의 위험이 있는 부분만 따로 필터 해서 출력하는지 확인한다.

# 보너스 과제

- 출력 결과를 시간의 역순으로 정렬해서 출력한다.
- 출력 결과 중 문제가 되는 부분만 따로 파일로 저장한다.",,"donggeonkim6, joeunil, jyoung250, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user30156652",,0,,0,0,0,0,2025-05-26T07:01:52.526Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68170b275bf272ba75472413,(평가) 문제 1 - 2,https://trello.com/c/3ioXVj3t/17-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-2,"# 평가 가이드

**[기본 확인]**

- 로그 파일을 리스트 객체로 변환해야 한다.
  - 파이썬에서 제공하는 List 객체로 변환되어 있는지 Type명령등을 이용해서 확인한다.

**[프로그램 구현 확인]**

- 사전 객체를 mission\_computer\_main.json 파일로 저장되어 있어야 한다.
- mssion\_computer\_main.json의 경우 JSON으로 구현되어 있어야 한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 로그 파일에서 변환된 List 객체 전체를 확인 할 수 있게 출력할 수 있다.
  - List 객체 전체를 출력한다.
- 변환된 리스트 객체를 시간의 역순으로 정렬해서 출력 해야 한다.
  - List 각체에서 Sort 등의 명령을 이용해서 시간의 역순으로 정렬한다.
  - 정렬된 객체를 화면에 출력한다.
- 리스트 객체를 사전 객체로 변환한다.
  - Dict()와 같은 명령을 사용해서 사전 객체로 변환한다.
  - 사전 객체로 변환한 상태를 다시 화면에 출력한다.

**[개념 확인 질문]**

- 사전 객체는 주로 어떤 경우에 사용하는지 질문한다.
  - 키와 값의 조합을 주로 표현 할 때 사용하며 JSON과 1대1로 대응되기 때문에 많이 사용된다.

**[보너스 문제 확인]**

- 사전 객체로 전환된 내용에서 특정 문자열 (예를 들어 Oxygen)을 입력하면 해당 내용을 출력하는 코드를 추가한다.
  - 검색 기능을 구현하는데 문자열 비교를 사용하든 혹은 List나 Dict 객체에서 제공하는 기능을 사용해서 구현해 된다.

# 보너스 과제

- 사전 객체로 전환된 내용에서 특정 문자열 (예를 들어 Oxygen)을 입력하면 해당 내용을 출력하는 코드를 추가한다.",,"moongyuhwang, user0eb36aad33715df064b819e01321c4d8, user30156652",,0,,0,0,0,0,2025-05-18T03:55:10.170Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68170c1984957cf256704676,(평가) 문제 1  - 3,https://trello.com/c/8qI8emXl/18-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-3,"# 평가 가이드

**[기본 확인]**

- Mars\_Base\_Inventory_List.csv 파일의 내용을 읽어서 출력 할 수 있다.
  - File 관련 명령을 사용해서 파일을 읽어 들인다음 화면에 출력한다.

**[프로그램 구현 확인]**

- 인화성 지수가 0.7 이상되는 목록을 Mars\_Base\_Inventory_danger.csv로 저장해야 한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- Mars\_Base\_Inventory_List.csv를 읽는데 콤마(,)로 구별된 항목들을 구별해서 읽어서 Python의 배열로 만들 수 있다
  - 콤마를 기본 명령으로 나눌 수도 있지만 Split 함수 등을 사용해서 구현하는 것을 추천한다.
- 배열의 내용 중 인화성 지수 항목을 기준으로 인화성 지수가 높은 순서대로 정렬해서 출력한다.
  - Sort 함수 등을 사용해서 정렬한다.

**[보너스 문제 확인]**

- 인화성 순서로 정렬된 배열의 내용을 이진 파일형태로 저장한다. 파일이름은 Mars\_Base\_Inventory_List.bin
  - 일반적은 텍스트 파일이 아닌 바이너리 파일 형태로 저장 되었는지 확인한다.
- 저장된 Mars\_Base\_Inventory_List.bin 의 내용을 다시 읽어 들여서 화면에 내용을 출력한다.
  - 바이너리 파일의 내용을 읽어서 출력 하는 부분이 잘 구현되었는지 확인한다.

# 보너스 과제

- 인화성 순서로 정렬된 배열의 내용을 이진 파일형태로 저장한다. 파일이름은 Mars\_Base\_Inventory_List.bin
- 저장된 Mars\_Base\_Inventory_List.bin 의 내용을 다시 읽어 들여서 화면에 내용을 출력한다.",,"user0eb36aad33715df064b819e01321c4d8, user30156652",,0,,0,0,0,0,2025-05-19T01:35:30.818Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68170d7ddb7e8bdd92076669,(평가) 문제 1 - 4,https://trello.com/c/iijJUhxO/19-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-4,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 작성된 코드는 design_dome.py 라는 이름으로 저장되어 있어야 한다.
- 면적, 무게 등을 구하는 함수는 sphere_area()라는 이름으로 정의 되어 있어야 한다.
- 면적 , 무게 등을 구하는 함수인 sphere_area()가 수학적으로 오류없이 결과를 출력할 수 있다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 만약 계산 결과가 소수점 이하일 경우 소수점 이하 세 자리까지만 출력할 수 있게 제약이 되어 있다.
  - 출력 결과가 너무 길제 않게 3자로 format() 등을 사용해서 제약한다.
- 날아가 버린 천장의 돔의 길이를 재어보니 10m가 나왔다. 타원이 아닌 완전한 반구체의 형태를 한 돔의 전체 면적을 구하는 식을 세워보고 sphere_area()라는 함수로 제작한다. 함수는 파라메터로 지름(diameter)을 입력받게 구현한다.
  - 전체 면적을 구하는데 지름 10m 짜리 반구체의 전체 면적을 구하는 기능을 구현한다. 단 지름은 파라메터로 구현 하는데 입력하지 않으면 10m가 기본으로 입력되게 구성이 되어있는지 확인한다.
- 사용 할 수 있는 재료는 유리, 알루미늄, 탄소강이 있다고 할 때 각각 무게는 다음과 같을 때 sphere_area() 함수에 재질을 material이라는 파라메터로 추가 할 수 있게 만들고 두께는 thickness라는 파라메터로 입력할 수 있게 만든다.
  - 각각의 재질을 material이라는 이름으로 파라메터를 구현했는지 확인한다.
- 함수의 입력되는 재질과 지름은 input()을 사용해서 사용자로 부터 입력을 받아야 한다.
  - 코드를 실행 했을 때 사용자로 부터 재질과 지름을 입력 받을 수 있게 구현한다.
- sphere_area() 함수에서 파라메터 중 material은 기본값이 유리 그리고 두께는 기본값이 1cm가 되게 한다.
  - material이 만약 입력되지 않으면 유리가 기본 값이 되도록 한다. 두께는 기본값이 1cm가 되게 한다.
- 생각해 보니 무게라는 기준은 지구를 기준으로 한 것이었다. 화성의 중력을 반영해서 다시 수식에 반영한다.
  - 무게 기준을 화성을 기준으로 설정한다.
- 계산 결과가 나오면 전역변수에 계산한 값을 저장하고 다음과 같은 형태로 출력한다.
  - format 함수 등을 사용해서 아래와 같이 출력되게 한다. 출력 형식: 재질 =⇒ 유리, 지름 =⇒ 000, 두께 =⇒ 000, 면적 =⇒ 000, 무게 =⇒ 000 kg

**[개념 확인 질문]**

- 면적, 무게 등을 구하는 수식이 수학적으로 입증이 가능하다.
  - 각각의 수식과 풀이 과정이 모두 설명이 가능해야 한다.

**[보너스 문제 확인]**

- 파라메터에 숫자가 아닌 문자가 들어갔을 때 오류가 발생하지 않도록 처리한다.
  - isnumeric() 등의 함수를 통해서 숫자가 아닌 값이 들어오면 오류를 출력할 수 있게 처리한다.

# 보너스 과제

- 파라메터에 숫자가 아닌 문자가 들어갔을 때 오류가 발생하지 않도록 처리한다.",,"jyoung250, user0eb36aad33715df064b819e01321c4d8",,0,,0,0,0,0,2025-05-18T03:41:25.343Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68170f785c81f5ce924c547e,(평가) 문제 1 - 5,https://trello.com/c/iWkoXMM1/20-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-5,"# 평가 가이드

**[기본 확인]**

- numpy를 사용하기 위해서 import를 한다.
  - 기본적으로 설치되어 있지 않으면 추가로 설치를 하고 설치가 되어 있다면 정상적으로 import가 되는지 확인한다.

**[프로그램 구현 확인]**

- 작성된 코드는 design_dome.py 라는 이름으로 저장되어 있어야 한다.
- 면적, 무게 등을 구하는 함수는 sphere_area()라는 이름으로 정의 되어 있어야 한다.
- 면적 , 무게 등을 구하는 함수인 sphere_area()가 수학적으로 오류없이 결과를 출력할 수 있다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- mars\_base\_main\_parts-001.csv, mars\_base\_main\_parts-002.csv, mars\_base\_main_parts-003.csv 파일들을 읽어 들인다.
  - 파일을 Python의 File 관련 객체를 사용해도 되지만 Numpy의 기능을 사용해도 된다.
- 모두 numpy를 사용해서 읽어들여서 각각 arr1, arr2, arr3 과 같이 ndarray 타입으로 가져온다
  - 각각의 파일을 3개의 ndarray 배열로 가져온다.
- 3개의 배열을 하나로 합치고(merge) 이름을 parts 라는 ndarray 를 생성한다.
  - 3개의 배열을 하나로 잘 병합 되었는지 확인한다. 병합된 결과는 parts라는 이름으로 만든다.
- parts를 이용해서 각 항목의 평균값을 구한다.
  - 병합된 결과인 parts를 사용해서 평균값을 구하는데 Numpy의 기능을 사용하는 것을 권장한다.
- 평균값이 50 보다 작은 값을 뽑아내서 parts\_to\_work_on.csv 라는 파일로 별도로 저장한다.
  - 50보자 작은 값을 추출하고 파일을 별도로 저장하는데 있어서 Numpy의 기능을 사용한 것인지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- parts\_to\_work_on.csv를 읽어서 parts2라는 ndarray에 저장한다.
  - Numpyt의 CSV 관련 기능을 사용해서 파일을 읽어서 parts 객체를 만든다.
- parts2의 내용을 기반으로 전치행렬을 구하고 그 내용을 parts3에 저장하고 출력한다.
  - 전치행렬을 구하는 기능도 Numpy에서 제공하는 기능을 사용했는지 확인한다.

# 보너스 과제

- parts\_to\_work_on.csv를 읽어서 parts2라는 ndarray에 저장한다.
- parts2의 내용을 기반으로 전치행렬을 구하고 그 내용을 parts3에 저장하고 출력한다.",,user0eb36aad33715df064b819e01321c4d8,,0,,0,0,0,0,2025-05-18T03:41:28.384Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681710e5836f6e129e2fecb1,(평가) 문제 1 - 6,https://trello.com/c/bUr91KLY/22-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-6,"# 평가 가이드

- DummySensor 클래스에 env\_values 라는 변수와 set\_env(), get_env() 메소드가 구현되어 있다.
- set_env() 메소드의 경우 매번 다른 값을 램덤으로 생성하고 있다.
- set_env() 메소드가 생성한 값들은 제시된 제약 범위 안에 있어야 한다.
- DummySensor를 인스턴스화 시킨다음 set\_env(), get\_env()를 차례대로 호출해서 더미 센서 값을 출력할 수 있다.
- 모든 기능은 오류나 경고 메시지 없지 잘 실행되어야 한다.

**[기본 확인]**

**[프로그램 구현 확인]**

- 더미 센서에 해당하는 클래스를 생성한다. 클래스의 이름은 DummySensor로 정의 되었는지 확인한다.
- 전체 코드를 mars\_mission\_computer.py 파일로 저장되어 있는지 확인한다.
- DummySensor의 멤버로 env_values라는 사전 객체를 추가 되어있는지 확인한다. 사전 객체에는 다음과 같은 항목들이 추가 되어 있어야 한다.
  - 화성 기지 내부 온도 (**mars\_base\_internal_temperature)**
  - 화성 기지 외부 온도 (**mars\_base\_external_temperature)**
  - 화성 기지 내부 습도 (**mars\_base\_internal_humidity)**
  - 회성 기지 외부 광량 (**mars\_base\_external_illuminance)**
  - 화성 기지 내부 이산화탄소 농도 (**mars\_base\_internal_co2**)
  - 화성 기지 내부 산소 농도 (**mars\_base\_internal_oxygen**)

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- DummySensor 클래스에 set\_env() 메소드를 추가한다. set\_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env_values 항목에 채워주는 역할을 한다.
  - 주어진 범위 안에서 램덤으로 값을 잘 생성하는지 확인한다.
- DummySensor 클래스에 set_env() 메소드를 추가한다.
  - set\_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env\_values 항목에 채워주는 역할을 한다.
  - DummySensor는 테스트를 위한 객체이므로 데이터를 램덤으로 생성한다.
  - DummySensor 클래스에 set\_env() 메소드를 추가한다. set\_env() 메소드는 random으로 주어진 범위 안의 값을 생성해서 env_values 항목에 채워주는 역할을 한다. 각 항목의 값의 범위는 다음과 같다.
    - 화성 기지 내부 온도 (18~30도)
    - 화성 기지 외부 온도 (0~21도)
    - 화성 기지 내부 습도 (50~60%)
    - 화성 기지 외부 광량 (500~715 W/m2)
    - 화성 기지 내부 이산화탄소 농도 (0.02~0.1%)
    - 화성 기지 내부 산소 농도 (4%~7%)

- DummySensor 클래스는 get_env() 메소드를 추가했는지 확인한다.
  - get\_env() 메소드는 env\_values를 return 한다.
- DummySensor 클래스를 ds라는 이름으로 인스턴스(Instance)로 만든다.
  - 인스턴스화 한 DummySensor 클래스에서 set\_env()와 get\_env()를 차례로 호출해서 값을 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 출력하는 내용을 날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 와 같이 파일에 log를 남기는 부분을 get_env()에 추가 한다.
  - 지정된 값들을 파일에 잘 기록하고 있는지 확인한다.

# 보너스 과제

- 출력하는 내용을 날짜와시간, 화성 기지 내부 온도, 화성 기지 외부 온도, 화성 기지 내부 습도 ,화성 기지 외부 광량, 화성 기지 내부 이산화탄소 농도, 화성 기지 내부 산소 농도 와 같이 파일에 log를 남기는 부분을 get_env()에 추가 한다.",,"jyoung250, user0eb36aad33715df064b819e01321c4d8",,0,,0,0,0,0,2025-05-18T03:41:32.052Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681711c02e8e8957df2d6382,(평가) 문제 1 - 7,https://trello.com/c/BXbAGIZM/24-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-7,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 미션 컴퓨터에 해당하는 클래스가 MissionComputer로 정의 되어 있는지 확인한다.
- 미션 컴퓨터에는 화성 기지의 환경에 대한 값을 저장할 수 있는 사전(Dict) 객체가 env_values라는 속성으로 포함되어 있는지 확인한다.
- env_values라는 속성 안에는 다음과 같은 내용들이 구현 되어 있는지 확인 한다.
  - 화성 기지 내부 온도 (**mars\_base\_internal_temperature)**
  - 화성 기지 외부 온도 (**mars\_base\_external_temperature)**
  - 화성 기지 내부 습도 (**mars\_base\_internal_humidity)**
  - 회성 기지 외부 광량 (**mars\_base\_external_illuminance)**
  - 화성 기지 내부 이산화탄소 농도 (**mars\_base\_internal_co2**)
  - 화성 기지 내부 산소 농도 (**mars\_base\_internal_oxygen**)
- 전체 코드를 mars\_mission\_computer.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- get\_sensor\_data() 메소드에 다음과 같은 세 가지 기능을 추가되었는지 확인한다.
  - 센서의 값을 가져와서 env_values에 담는다.
  - env_values의 값을 출력한다. 이때 환경 정보의 값은 json 형태로 화면에 출력한다.
  - 위의 두 가지 동작을 5초에 한번씩 반복한다.
- 문제 3에서 제작한 DummySensor 클래스를 ds라는 이름으로 인스턴스화 시킨다.
  - 인스턴스화를 잘 했는지 확인한다.
- MissionComputer에 get\_sensor\_data() 메소드를 추가한다.
  - get\_sensor\_data() 메소드에 다음과 같은 세 가지 기능을 추가했는지 확인한다.
    - 센서의 값을 가져와서 env_values에 담는다.
    - env_values의 값을 출력한다. 이때 환경 정보의 값은 json 형태로 화면에 출력한다.
    - 위의 두 가지 동작을 5초에 한번씩 반복한다.

- MissionComputer 클래스의 인스턴스화를 확인한다.
  - RunComputer 라는 이름으로 인스턴스화 한다.
- RunComputer 인스턴스의 get\_sensor\_data() 메소드를 호출
  - 지속적으로 환경에 대한 값을 출력 할 수 있도록 한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 특정 키를 입력할 경우 반복적으로 출력되던 화성 기지의 환경에 대한 출력을 멈추고 ‘Sytem stoped….’ 를 출력 할 수 있어야 한다.
  - 특정 키로 반복을 멈출 수 있게 작성한다.
- 5분에 한번씩 각 환경값에 대한 5분 평균 값을 별도로 출력한다.
  - 평균값을 출력 할 수 있게 설정한다.

# 보너스 과제

- 특정 키를 입력할 경우 반복적으로 출력되던 화성 기지의 환경에 대한 출력을 멈추고 ‘Sytem stoped….’ 를 출력 할 수 있어야 한다.
- 5분에 한번씩 각 환경값에 대한 5분 평균 값을 별도로 출력한다.",,user0eb36aad33715df064b819e01321c4d8,,0,,0,0,0,0,2025-05-18T03:41:34.969Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681712d66b3c5150d10eee2d,(평가) 문제 1 - 8,https://trello.com/c/3s5tnIL8/26-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-8,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 최종적으로 결과를 mars\_mission\_computer.py 에 저장했는지 확인한다.
- 파이썬 코드를 사용해서 다음과 같은 미션 컴퓨터의 정보를 알아보는 메소드를 get\_mission\_computer_info() 라는 이름으로 만들고 문제 7에서 완성한 MissionComputer 클래스에 추가했는지 확인한다.
- 미션 컴퓨터의 부하를 가져오는 코드를 get\_mission\_computer_load() 메소드로 만들고 MissionComputer 클래스에 추가한다

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- get\_mission\_computer_info()에 가져온 시스템 정보를 출력한다.
  - 이때 출력되는 형식은 JSON 형식으로 출력하는지 확인한다.
- get\_mission\_computer_load() 메소드의 경우 다음과 같은 정보들을 가져 올 수 있게한다.
  - CPU 실시간 사용량
  - 메모리 실시간 사용량
  - 해당 결과를 JSON 형식으로 출력하는 코드를 추가한다.
- get\_mission\_computer\_info(), get\_mission\_computer\_load()를 호출해서 출력이 잘되는지 확인한다.
  - 각각의 시스템 정보들이 잘 출력되는지 확인한다.
- MissionComputer 클래스를 확인한다.
  - 확인되면 runComputer 라는 이름으로 인스턴스화 한다.
- runComputer 인스턴스의 get\_mission\_computer\_info(), get\_mission\_computer\_load() 메소드를 호출해서 시스템 정보에 대한 값을 출력 되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- setting.txt 파일을 만들어서 출력되는 정보의 항목을 셋팅 할 수 있도록 코드를 수정한다.
  - setting.txt의 파일에 항목들을 셋팅해서 출력 항목을 조정할 수 있는지 확인한다.

# 보너스 과제

- setting.txt 파일을 만들어서 출력되는 정보의 항목을 셋팅 할 수 있도록 코드를 수정한다.",,user0eb36aad33715df064b819e01321c4d8,,0,,0,0,0,0,2025-05-18T03:41:38.134Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681713b7bcf824ab5d7c1615,(평가) 문제 1 - 9,https://trello.com/c/MYw0TCFT/28-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-1-9,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 최종적으로 결과를 mars\_mission\_computer.py 에 저장되었는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 값들을 연속적으로 출력하기 위해서 MissionComputer 클래스에 있는 get\_mission\_computer\_info(), get\_mission\_computer\_load() 두 개의 메소드를 time 라이브러리를 사용해서 각각 20초에 한번씩 결과를 출력 할 수 있게 수정한다.
  - 20초에 한번씩 결과가 출력되는지 확인한다.
- MissionComputer 클래스를 runComputer 라는 이름으로 인스턴스화 한다.
  - 인스턴스화 시키는 코드가 있는지 확인한다.
- runComputer 인스턴스의 get\_mission\_computer\_info(), get\_mission\_computer\_load(), get\_sensor\_data() 메소드를 각각 멀티 쓰레드로 실행 시킨다.
  - 각 코드를 멀티 쓰레드로 실행되고 있는지 확인한다.
- 다시 코드를 수정해서 MissionComputer 클래스를 runComputer1, runComputer2, runComputer3 이렇게 3개의 인스턴스를 만든다.
  - 3개의 인스턴스로 각각 잘 실행되고 있는지 확인한다.
- 3개의 인스턴스를 멀티 프로세스로 실행시켜서 각각 get\_mission\_computer\_info(), get\_mission\_computer\_load(), get\_sensor\_data()를 실행시키고 출력을 확인한다.
  - 각각이 멀티 프로세스로 잘 실행되는지 확인한다.

**[개념 확인 질문]**

- 쓰레드와 프로세스의 차이점을 설명할 수 있다.

**[보너스 문제 확인]**

- 멀티 쓰레드와 멀티 프로세스에서 반복적으로 출력되는 중간에 특정한 키를 입력 받아 출력을 멈출 수 있게 코드를 작성한다.
  - 각각의 쓰레드를 중간에 특정 키를 입력해서 멈출 수 있는지 확인한다.

# 보너스 과제

- 멀티 쓰레드와 멀티 프로세스에서 반복적으로 출력되는 중간에 특정한 키를 입력 받아 출력을 멈출 수 있게 코드를 작성한다.",,user0eb36aad33715df064b819e01321c4d8,,0,,0,0,0,0,2025-05-18T03:41:41.052Z,680f20f1f33fee2c28dd17de,과정 1,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68117bdf81d0b36e1d66a932,학습일지 작성 방법,https://trello.com/c/OLshLjr7/5-%ED%95%99%EC%8A%B5%EC%9D%BC%EC%A7%80-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95,"**댓글로 작성을 합니다.**

**[ 학습일지 예시 ]**

- 일 자 : 2024 / 10 / 25 (금)
- 학습 과정 : 자바 과정 1 :  1 ~ 3 문제
- 학습시간 : 1:30 PM ~ 3:00 PM
- 학습장소학교 : 도서관
- 학습내용 :
- 참고사이트 : 유튜브 : [http://aaa.bbb.com/dksdjlsfdjiow ](http://aaa.bbb.com/dksdjlsfdjiow%ED%9E%98%EB%93%A4%EC%97%88%EB%8D%98 ""‌"")
- 힘들었던 부분 : Subject 1- 3부분에서 세부적이라는 부분으로 진행되는 과정이 처음에는 이해가 잘 안되었습니다.
  몇번의 설명을 듣고 선생님과 함께 몇 번 해 보고 나서 알게 되었습니다.가장 희열을 느낀 지점도식화를 통해서 정리 되어 가면서 , 갑자기 도식화 된 부분들이 프로그래밍 코드로 변환 되는 신기한 경험을 하게 되었습니다.
- 후기 ( 이번 프로젝트로 무엇이 가장 크게 변화 했나요? )
  처음에 무엇을 먼저 시작하여야 할지 막막하여 학습 과정 소개 내용을 읽어보았습니다. 자세히 키워드를 중심으로 스스로 자료를 찾아 가면서 학습을 진행 하기가 처음에는 힘들었지만. 지나고 나니 점점 학습 속도가 올라가는 스스로를 알게 되었습니다.",,,,0,,0,0,0,0,2025-04-30T01:24:47.407Z,6811799dbc7e2007fb6e7d9d,과정 1 - 학습일지,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681714300e6b2f3ad526b6f3,"(문제1) ""비밀번호 XXXXXX""",https://trello.com/c/W6p2fqiJ/29-%EB%AC%B8%EC%A0%9C1-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-xxxxxx,"### 학습목표: zip, 암호

# 수행과제

‌

- emergency\_storage\_key.zip 의 암호를 풀 수 있는 코드를 작성한다.
  단 암호는 특수 문자없이 숫자와 소문자 알파벳으로 구성된 6자리 문자로 되어 있다.
- 암호를 푸는 코드를 unlock_zip() 이라는 이름으로 함수로 만든다.
  암호를 푸는 과정을 출력하는데 시작 시간과 반복 회수 그리고 진행 시간등을 출력한다.
- 암호를 푸는데 성공하면 암호는 password.txt로 저장한다.
- 암호를 풀 수 있는 전체 코드는 door_hacking.py로 저장한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 zip 파일을 다루는 부분은 외부 라이브러리 사용 가능하다.
- 파일을 다루는 부분은 예외처리가 되어있어야 한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 암호를 좀 더 빠르게 풀 수 있는 알고리즘을 제시하고 코드로 구현한다.",,"davidlee49337730, donggeonkim6, foxtrot151, jkh0574, joeunil, jyoung250, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13173082, user13823470, user30156652, user44559078, user54045040, user8efb568a60c77c958eed3719fce29a5c, vaishnavivats, yongwonlee5",,1,https://trello.com/1/cards/681714300e6b2f3ad526b6f3/attachments/68173b509b25455107a782b6/download/2-1-emergency_storage_key.zip,0,0,0,17,2025-06-14T05:12:49.629Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6817164ba96b0eb82487081c,"(문제2) ""카이사르의 암호""",https://trello.com/c/02I5IIeH/30-%EB%AC%B8%EC%A0%9C2-%EC%B9%B4%EC%9D%B4%EC%82%AC%EB%A5%B4%EC%9D%98-%EC%95%94%ED%98%B8,"#### 학습목표: 문자열처리, 암호, 카이사르의 암호

‌

# 수행과제

- password.txt 파일을 읽어온다.
- 카이사르의 암호를 풀 수 있는 함수를 caesar\_cipher\_decode() 라는 이름으로 만든다.
- caesar\_cipher\_decode() 함수는 풀어야 하는 문자열을 파라메터로 추가한다. 이때 파라메터의 이름은 target_text으로 한다.
- caesar\_cipher\_decode() 에서 자리수에 따라 암호표가 바뀌게 한다. 자리수는 알파벳수만큼 반복한다.
- 자리수에 따라서 해독된 결과를 출력한다.
- 몇 번째 자리수로 암호가 해독되는지 찾아낸다. 눈으로 식별이 가능하면 해당 번호를 입력하면 그 결과를 result.text로 저장을 한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.
- 파일을 다루는 부분은 모두 예외처리가 되어 있어야 한다.

‌

### 보너스 과제

- 텍스트 사전을 만들고 사전에 있는 단어와 일치하는 키워드가 암호속에서 발견될 경우 반복을 멈출 수 있게 작성해 보시오.",,"jyoung250, moongyuhwang, vaishnavivats",,0,,0,0,0,2,2025-06-14T05:24:22.523Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681716e0f954f066835059e1,"(문제3) ""계산기의 제작""",https://trello.com/c/uiNzMKu8/31-%EB%AC%B8%EC%A0%9C3-%EA%B3%84%EC%82%B0%EA%B8%B0%EC%9D%98-%EC%A0%9C%EC%9E%91,"### 학습목표: PyQT, UI개발

‌

# 수행과제

‌

- Python으로 UI를 만들 수 있는 PyQT 라이브러리를 설치한다.
- 아이폰 계산기와 최대한 유사하게 계산기 UI를 만든다. 출력 형태 및 버튼의 배치는 동일하게 해야한다. 색상이나 버튼의 모양까지 동일할 필요는 없다.
- 각각의 버튼을 누를 때 마다 숫자가 입력 될 수 있게 이벤트를 처리한다.
- 이번 과제에서는 실제로 계산 기능까지 구현된 필요는 없다.
- 완성된 코드는 [calculator.py](http://calculator.py ""‌"") 로 저장한다.

![image.png](https://trello.com/1/cards/681716e0f954f066835059e1/attachments/6817178b94ec5d3e3ed5764a/download/image.png)

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 UI를 다루는 PyQT는 사용 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 4칙 연산이 가능하도록 코드를 추가한다.",,"joeunil, jyoung250, moongyuhwang, user13823470, user30156652",,1,https://trello.com/1/cards/681716e0f954f066835059e1/attachments/6817178b94ec5d3e3ed5764a/download/image.png,0,0,0,4,2025-06-14T05:12:38.063Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681717e723afce17f5302f93,"(문제4) ""학습목표: 클래스, UI개발""",https://trello.com/c/Iw93lF1z/32-%EB%AC%B8%EC%A0%9C4-%ED%95%99%EC%8A%B5%EB%AA%A9%ED%91%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-ui%EA%B0%9C%EB%B0%9C,"### 학습목표: 클래스, UI개발

‌

# 수행과제

- Calculator 클래스를 만든다.
- Calculator 클래스에 사칙 연산을 담당할 메소드인 add(), subtract(), multiply(),divide() 를 추가하고 동작할 수 있게 기능을 구현한다.
- Calculator 클래스에 추가로 초기화 및 음수양수, 퍼센트 등을 담당할 reset(),negative-positive(), percent() 메소드를 추가하고 기능을 구현한다.
- 숫자키를 누를 때 마다 화면에 숫자가 누적된다.
- 소수점 키를 누르면 소수점이 입력된다. 단 이미 소수점이 입력되어 있는 상태에서는 추가로 입력되지 않는다.
- Calculator 클래스에 결과를 출력할 equal() 메소드를 추가하고 기능을 구현한다.
- UI의 각 버튼과 Calculator 클래스를 연결해서 완전한 동작을 구현한다.
- 완성된 코드는 [calculator.py](http://calculator.py ""‌"") 로 저장한다.

###

![image.png](https://trello.com/1/cards/681717e723afce17f5302f93/attachments/6817188d3f8047758fa95519/download/image.png)

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 단 UI를 다루는 PyQT는 사용 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.
- 수학에서 발생할 수 있는 예외들이 다 적용되어 있어야 한다.
  - 0을 나누면 안된다.
  - 처리 할 수 있는 숫자의 범위가 넘어가면

### 보너스 과제

- 계산 결과가 출력될 때 출력되는 값의 길이에 따라서 폰트의 크기를 조정해서 전체 내용이 한번에 출력될 수 있도록 한다.
- 소수점 6자리 이하의 경우 반올림한 결과로 줄여서 출력한다.",,"joeunil, jyoung250, moongyuhwang, user13823470",,1,https://trello.com/1/cards/681717e723afce17f5302f93/attachments/6817188d3f8047758fa95519/download/image.png,0,0,0,3,2025-06-14T05:12:24.507Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681718b58e6d16b27bc336d6,"(문제5) ""공학용 계산기의 제작""",https://trello.com/c/gF5L6ocL/33-%EB%AC%B8%EC%A0%9C5-%EA%B3%B5%ED%95%99%EC%9A%A9-%EA%B3%84%EC%82%B0%EA%B8%B0%EC%9D%98-%EC%A0%9C%EC%9E%91,"### 학습목표: PyQT, UI

‌

# 수행과제

- Python으로 UI를 만들 수 있는 PyQT 라이브러리를 설치한다.
- 아이폰을 가로로 했을 때 나타나는 공학용 계산기와 최대한 유사하게 계산기 UI를 만든다. 출력 형태 및 버튼의 배치는 동일하게 해야한다. 색상이나 버튼의 모양까지 동일할필요는 없다.
- 각각의 버튼을 누를 때 마다 숫자가 입력 될 수 있게 이벤트를 처리한다.
- 이번 과제에서는 실제로 계산 기능까지 구현된 필요는 없다.
- 완성된 코드는 engineering_calculator.py 로 저장한다.

![image.png](https://trello.com/1/cards/681718b58e6d16b27bc336d6/attachments/6817196350a43b5e9df80e34/download/image.png)

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- UI를 다루는 PyQT는 사용 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 버튼들을 누를 때 마다 화면에 숫자 및 연산자가 누적되게 한다.",,"joeunil, jyoung250, moongyuhwang",,1,https://trello.com/1/cards/681718b58e6d16b27bc336d6/attachments/6817196350a43b5e9df80e34/download/image.png,0,0,0,2,2025-06-14T05:14:04.780Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681719c6d445204b3a3be06e,"(문제6) ""공학용 계산기의 핵심 코어 제작""",https://trello.com/c/4gh7bBs8/34-%EB%AC%B8%EC%A0%9C6-%EA%B3%B5%ED%95%99%EC%9A%A9-%EA%B3%84%EC%82%B0%EA%B8%B0%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%BD%94%EC%96%B4-%EC%A0%9C%EC%9E%91,"### 학습목표: 클래스, 상속, UI, 계산식

# 수행과제

- Calculator 클래스를 상속받아서 EngineeringCalculator 클래스를 만든다.
- 공학용 계산기에서 추가된 30가지 기능을 정리하고 이 중에서 삼각함수 관련 기능인sin, cos, tan, sinh, cosh, tanh와 원주율 과 x의 제곱 그리고 x의 세제곱 등을 담당할메소드의 이름을 짓고 그 내용을 구현한다.
- 계산 기능들을 완성하기 위해서 math 등 외부 라이브러리를 사용 할 수 있다.
- 완성된 클래스의 기능들과 UI의 버튼들을 매칭 시킨다.
- 완성된 코드는 engineering_calculator.py 로 저장한다.

![image.png](https://trello.com/1/cards/681719c6d445204b3a3be06e/attachments/68171a36fccd5c0a58230529/download/image.png)

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 UI를 다루는 PyQT는 사용 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.
- 수학에서 발생할 수 있는 예외들이 다 적용되어 있어야 한다.
  - 0을 나누면 안된다.
  - 처리 할 수 있는 숫자의 범위가 넘어가면

### 보너스 과제

- mc 버튼의 역할을 이해하고 이를 잘 구현한다.",,"davidlee49337730, joeunil, jyoung250, moongyuhwang",,1,https://trello.com/1/cards/681719c6d445204b3a3be06e/attachments/68171a36fccd5c0a58230529/download/image.png,0,0,0,2,2025-06-14T05:14:16.050Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171a4f2ecaa8aadf6c746f,"(문제7) ""자비스가 필요해!""",https://trello.com/c/cFK0kFfY/35-%EB%AC%B8%EC%A0%9C7-%EC%9E%90%EB%B9%84%EC%8A%A4%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%B4,"### 학습목표: 음성 녹음

‌

# 수행과제

- 시스템의 마이크를 인식하고 음성을 녹음하는 부분을 완성한다.
- 시스템의 마이크를 인식하고 음성을 녹음하는 부분은 외부 라이브러리를 사용하는 것이가능하다.
- 파일들은 파이썬 앱이 실행되고 있는 하위에 records 폴더에 모두 저장된다.
- 파일의 이름은 녹음 날짜와 시간을 참조해서 ‘년월일-시간분초’와 같은 형태로 저장한다.
- 작성한 코드는 javis.py로 저장한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 단 음성을 녹음하는 부분은 외부 라이브러리를 사용하는 것이 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 특정 범위의 날짜의 녹음 파일을 보여주는 기능을 추가한다.",,"jyoung250, moongyuhwang",,0,,0,0,0,1,2025-06-07T03:39:46.282Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171b2831df850feb52ba2b,"(문제8) ""음성에서 문자로""",https://trello.com/c/zTOL48rI/36-%EB%AC%B8%EC%A0%9C8-%EC%9D%8C%EC%84%B1%EC%97%90%EC%84%9C-%EB%AC%B8%EC%9E%90%EB%A1%9C,"### 학습목표: 음성 인식, STT

# 수행과제

- 문제 7에서 녹음된 음성파일들의 목록을 불러온다.
- 음성파일을 가져오면 음성 파일에서 텍스트를 추출하는 STT(Speech to Text)
- 기능을 구현하고 음성이 텍스트로 잘 인식되는지 확인 한다.
- STT는 별도의 외부 라이브러리를 사용하는 것이 가능하다.
- STT로 구현된 텍스트 인식 정보를 다음과 같은 CSV 파일로 저장한다.
  - 음성 파일내에서의 시간, 인식된 텍스트
- 파일의 이름은 음성 파일의 이름과 같은 이름으로 저장하되 확장자는 .CSV로 저장한다.
- 전체 내용이 구현되면 javis.py 파일에 추가한다.

‌

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 단 음성을 녹음하고 텍스트를 추출하는 부분은 외부 라이브러리를 사용하는 것이 가능하다.
- 음성을 출력하는 부분의 라이브러리를 사용하되 클라우드 기반의 서비스는 사용하지 않는다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 특정 키워드를 입력하면 저장된 CSV 파일 안에서 내용을 찾아서 출력해 준다.",,"jyoung250, moongyuhwang",,0,,0,0,0,1,2025-06-07T03:39:50.757Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171bd3c5d4eb7bc6a7019f,"(문제9) ""또 동료의 흔적을 찾아서""",https://trello.com/c/2pT8CZw9/37-%EB%AC%B8%EC%A0%9C9-%EB%98%90-%EB%8F%99%EB%A3%8C%EC%9D%98-%ED%9D%94%EC%A0%81%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C,"### 학습목표: 이미지 출력

‌

# 수행과제

- CCTV.zip으로 제공되는 파일의 압축을 풀어서 CCTV 폴더를 만드는 코드를 작성한다.
- CCTV 폴더의 사진중에 한 장을 우선 읽어들여서 화면에 출력한다.
- 오른쪽 방향 키를 누르면 다음 사진 왼쪽 방향 키를 누르면 이전 사진을 보여 준다.
- 위의 내용들이 잘 동작하면 cctv.py 파일로 저장한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 사진을 읽어 들이고 화면에 출력하는 부분은 외부 라이브러리를 사용하는 것이 가능하다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 이미지를 처리하는 기능을 다른 곳에서도 활용할 수 있게 기능을 클래스로 작성한다.클래스의 이름은 MasImageHelper 로 정한다.
- 마지막 사진에서 오른쪽 방향 키를 누르면 ‘Last picture’라는 메시지가 출력되고 처음사진에서 왼쪽 방향 키를 누르면 ‘First picture’라는 메시지가 출력된다.",,"jyoung250, moongyuhwang",,0,,0,0,0,1,2025-06-07T03:39:54.864Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171d2ca9ffbe03aa45de5b,"(문제10) ""사람을 찾아라""",https://trello.com/c/waFJKUmL/38-%EB%AC%B8%EC%A0%9C10-%EC%82%AC%EB%9E%8C%EC%9D%84-%EC%B0%BE%EC%95%84%EB%9D%BC,"# 수행과제

- CCTV 사진속에 사진 목록을 가져온다.
- 목록을 가져올 때 이미지 파일 형식이 아닌 것은 무시한다.
- 순차적으로 사진을 검색하고 그 안에서 사람을 찾으면 화면에 이미지를 출력한다.
- 엔터키를 누르면 다음 사진 부터 계속해서 검색하고 마지막 사진까지 검색이 끝나면 검색이 끝났다는 메시지와 함께 검색을 중단한다.
- 위의 내용들이 잘 동작하면 cctv.py 파일로 저장한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 사진을 읽어 들이고 화면에 출력하는 부분은 외부 라이브러리를 사용하는 것이 가능하다.
- 사람을 찾는 부분은 OpenCV를 사용해야 한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 이미지에서 사람을 찾아내면 그 부분을 빨간색 사각형으로 표시한다.",,"jyoung250, moongyuhwang",,1,https://trello.com/1/cards/68171d2ca9ffbe03aa45de5b/attachments/68173c500f978e40a2356dd8/download/2-10-cctv.zip,0,0,0,1,2025-06-07T03:39:58.739Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171db1e91fc56d8243647b,(평가) 문제 2 - 1,https://trello.com/c/iABkwcP9/39-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-1,"# 평가 가이드

**[기본 확인]**

- emergency\_storage\_key.zip 의 암호를 풀 수 있는 코드를 작성한다.
  - 단 암호는 특수 문자없이 숫자와 소문자 알파벳으로 구성된 6자리 문자로 되어 있다.
- 전체 코드는 오류나 경고 메시지 없이 잘 실행된고 예외처리가 되어 있다.

**[프로그램 구현 확인]**

- 암호를 풀 수 있는 전체 코드는 door_hacking.py로 저장되어 있는지 확인한다.
- 암호를 푸는 코드를 unlock_zip() 이라는 이름으로 함수로 정의했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 암호를 푸는 과정을 출력하는데 시작 시간과 반복 회수 그리고 진행 시간등을 출력한다.
  - 반복할 때 마다 새로운 암호를 생성해서 대입하는 과정이 포함되어 있는지 확인한다.
- 암호를 푸는데 성공하면 암호는 password.txt로 저장한다.
  - 암호가 원래 암호와 일치하는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 암호를 좀 더 빠르게 풀 수 있는 알고리즘을 제시하고 코드로 구현한다.
  - 암호 해독 알고리즘을 잘 사용했는지 확인한다.

# 보너스 과제

- 암호를 좀 더 빠르게 풀 수 있는 알고리즘을 제시하고 코드로 구현한다.",,moongyuhwang,,0,,0,0,0,0,2025-06-03T10:19:23.846Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171db8a543fd44f1309000,(평가) 문제 2 - 2,https://trello.com/c/XKr0bNbK/40-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-2,"# 평가 가이드

- password.txt 파일을 읽어 올 수 있다.
- 카이사르의 암호를 풀 수 있는 함수를 caesar\_cipher\_decode() 로 구현되어 있다.
- caesar\_cipher\_decode() 함수는 풀어야 하는 문자열을 파라메터로 추가되어 있다.
- caesar\_cipher\_decode() 에서 알파벳 수만큼 자리수가 바뀌면서 해독된 결과를 출력한다.
- 몇 번째 자리수로 암호가 해독되는지 찾아낸다. 눈으로 식별이 가능하면 해당 번호를 입력하면 그 결과를 result.text로 저장을 할 수 있다.

**[기본 확인]**

- password.txt 파일을 읽어온다.
  - 해당 파일의 내용을 잘 읽어오는 지 확인한다.

**[프로그램 구현 확인]**

- 카이사르의 암호를 풀 수 있는 함수를 caesar\_cipher\_decode() 라는 이름으로 정의했는지 확인한다.
- caesar\_cipher\_decode() 함수는 풀어야 하는 문자열을 파라메터로 추가한다. 이때 파라메터의 이름은 target_text로 정의했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- caesar\_cipher\_decode() 에서 자리수에 따라 암호표가 바뀌게 한다.
  - 자리수는 알파벳 수만큼 반복한다.
- 자리수에 따라서 해독된 결과를 출력한다.
  - 해독된 결과가 한줄로 잘 출력되는지 확인한다.
- 몇 번째 자리수로 암호가 해독되는지 찾아낸다. 눈으로 식별이 가능하면 해당 번호를 입력하면 그 결과를 result.txt로 저장을 한다.
  - 결과가 파일로 잘 저장되는지 확인한다.

**[개념 확인 질문]**

- 카이사르의 암호에 대해서 충분히 이해하고 설명할 수 있다.

**[보너스 문제 확인]**

- 텍스트 사전을 만들고 사전에 있는 단어와 일치하는 키워드가 암호속에서 발견될 경우 반복을 멈출 수 있게 작성해 보시오.
  - 텍스트 사전에 일반적으로 자주 사용되는 단어들의 목록을 만들고 이를 조합해서 암호를 풀 수 있는지 확인한다.

# 보너스 과제

- 텍스트 사전을 만들고 사전에 있는 단어와 일치하는 키워드가 암호속에서 발견될 경우 반복을 멈출 수 있게 작성해 보시오.",,,,0,,0,0,0,0,2025-05-04T10:03:58.790Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171db9036055e1b094fad6,(평가) 문제 2 - 3,https://trello.com/c/GsD0zB4y/41-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-3,"# 평가 가이드

**[기본 확인]**

- Python으로 UI를 만들 수 있는 PyQT 라이브러리가 설치 되어 있는지 확인한다.

**[프로그램 구현 확인]**

- 아이폰 계산기와 최대한 유사하게 계산기 UI를 만든다. 출력 형태 및 버튼의 배치는 동일하게 해야한다. 색상이나 버튼의 모양까지 동일할 필요는 없다.
- 완성된 코드는 [calculator.py](http://calculator.py ""‌"") 로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 각각의 버튼을 누를 때 마다 숫자가 입력 될 수 있게 이벤트를 처리한다.
  - 버튼에 대한 이벤트가 잘 구현되어 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 4칙 연산이 가능하도록 한다.
  - 4칙 연산이 가능하도록 간단한 기능을 추가한다.

# 보너스 과제

- 4칙 연산이 가능하도록 코드를 추가한다.",,,,0,,0,0,0,0,2025-05-04T10:04:51.300Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dba8bb6e9f2949fbd79,(평가) 문제 2 - 4,https://trello.com/c/DGyEnUVv/42-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-4,"# 평가 가이드

**[기본 확인]**

- Calculator 클래스를 만들었는지 확인한다.

**[프로그램 구현 확인]**

- 완성된 코드는 [calculator.py](http://calculator.py ""‌"") 로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- Calculator 클래스에 사칙 연산을 담당할 메소드인 add(), subtract(), multiply(), divide() 를 추가하고 동작할 수 있게 기능을 구현한다.
  - 각 함수의 기능들이 각 목적에 맞게 잘 구현되어 있는지 확인한다.
- Calculator 클래스에 추가로 초기화 및 음수양수, 퍼센트 등을 담당할 reset(), negative-positive(), percent() 메소드를 추가하고 기능을 구현한다.
  - 각 함수의 기능들이 각 목적에 맞게 잘 구현되어 있는지 확인한다.
- 숫자키를 누를 때 마다 화면에 숫자가 누적된다.
  - 각 함수의 기능들이 각 목적에 맞게 잘 구현되어 있는지 확인한다.
- 소수점 키를 누르면 소수점이 입력된다. 단 이미 소수점이 입력되어 있는 상태에서는 추가로 입력되지 않는다.
  - 각 함수의 기능들이 각 목적에 맞게 잘 구현되어 있는지 확인한다.
- Calculator 클래스에 결과를 출력할 equal() 메소드를 추가하고 기능을 구현한다.
  - 각 함수의 기능들이 각 목적에 맞게 잘 구현되어 있는지 확인한다.
- UI의 각 버튼과 Calculator 클래스를 연결해서 완전한 동작을 구현한다.
  - UI의 각 버튼과 Calculator 클래스의 각 기능과 잘 연결 되어있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

# 보너스 과제

- 계산 결과가 출력될 때 출력되는 값의 길이에 따라서 폰트의 크기를 조정해서 전체 내용이 한번에 출력될 수 있도록 한다.
- 소수점 6자리 이하의 경우 반올림한 결과로 줄여서 출력한다.",,,,0,,0,0,0,0,2025-05-04T10:05:09.075Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dbbe4c78f0a27ee67d1,(평가) 문제 2 - 5,https://trello.com/c/5uiXMdFL/43-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-5,"# 평가 가이드

**[기본 확인]**

- Python으로 UI를 만들 수 있는 PyQT 라이브러리를 설치되어 있는지 확인한다.

**[프로그램 구현 확인]**

- 완성된 코드는 **engineering_calculator.py** 로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 아이폰을 가로로 했을 때 나타나는 공학용 계산기와 최대한 유사하게 계산기 UI를 만든다. 출력 형태 및 버튼의 배치는 동일하게 해야한다. 색상이나 버튼의 모양까지 동일할 필요는 없다.
  - 최대한 비슷하게 구현이 되었는지 확인한다.
- 각각의 버튼을 누를 때 마다 숫자가 입력 될 수 있게 이벤트를 처리한다.
  - 버튼을 누를 때 마다 잘 동작되는지 확인한다.
- 이번 과제에서는 실제로 계산 기능까지 구현된 필요는 없다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 버튼들을 누를 때 마다 화면에 숫자 및 연산자가 누적되게 한다.
  - 수식이 길게 표시 되게 구현되어 있는지 확인한다.

# 보너스 과제

- 버튼들을 누를 때 마다 화면에 숫자 및 연산자가 누적되게 한다.",,,,0,,0,0,0,0,2025-05-04T10:05:26.517Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dbc3b212306ba5edf08,(평가) 문제 2 - 6,https://trello.com/c/1nWD0zg5/44-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-6,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- Calculator 클래스를 상속받아서 EngineeringCalculator 클래스를 구현했는지 확인한다.
- 완성된 코드는 **engineering_calculator.py** 로 저장했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 공학용 계산기에서 추가된 30가지 기능을 정리하고 이 중에서 삼각함수 관련 기능인 sin, cos, tan, sinh, cosh, tanh와 원주율 과 x의 제곱 그리고 x의 세제곱 등을 담당할 메소드의 이름을 짓고 그 내용을 구현한다.
  - 각각의 함수의 이름을 적절하게 지었는지 그리고 기능을 잘 구현 했는지 확인한다.
- 완성된 클래스의 기능들과 UI의 버튼들을 매칭 시킨다.
  - UI의 버튼들과 구현된 EngineeringCalculator 클래스의 기능들이 잘 연결 되었는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- mc 버튼의 역할을 이해하고 이를 잘 구현한다.
  - mc 버튼의 기능이 잘 구현되었는지 확인한다.

# 보너스 과제

- mc 버튼의 역할을 이해하고 이를 잘 구현한다.",,,,0,,0,0,0,0,2025-05-04T10:05:42.992Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dbde4862e0d8401b675,(평가) 문제 2 - 7,https://trello.com/c/AdpOc9zL/45-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-7,"# 평가 가이드

**[기본 확인]**

- 시스템의 마이크를 인식하고 음성을 녹음하는 부분을 완성한다.

**[프로그램 구현 확인]**

- 작성한 코드는 javis.py로 저장했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 녹음 파일들은 파이썬 앱이 실행되고 있는 하위에 records 폴더에 모두 저장된다.
  - 녹음 파일이 정상적으로 잘 저장되었는지 확인하고 열어본다.
- 파일의 이름은 녹음 날짜와 시간을 참조해서 ‘년월일-시간분초’와 같은 형태로 저장한다.
  - 지정된 형태데로 잘 저장되었는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 특정 범위의 날짜의 녹음 파일을 보여주는 기능을 추가한다.
  - 파일명의 이름을 참조하든지 생성일을 기준으로 하든지 둘 가지 방법다 허용된다.

# 보너스 과제

- 특정 범위의 날짜의 녹음 파일을 보여주는 기능을 추가한다.",,,,0,,0,0,0,0,2025-05-04T10:06:01.529Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dd79a1b87d8cef0a0ab,(평가) 문제 2 - 8,https://trello.com/c/yCtSKing/46-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-8,"# 평가 가이드

- 문제 7에서 녹음된 음성파일들의 목록을 불러 올 수 있다.
- 음성파일을 가져오면 음성 파일에서 텍스트를 추출하는 STT(Speech to Text) 기능을 구현하고 음성이 텍스트로 잘 인식된다.
- 파일의 이름은 음성 파일의 이름과 같은 이름의 CSV로 저장한다.
- 전체 내용이 구현되면 [javis.py](http://javis.py ""‌"") 파일에 추가한다.

**[기본 확인]**

- 문제 7에서 녹음된 음성파일들의 목록을 불러온다.

**[프로그램 구현 확인]**

- 전체 내용이 [javis.py](http://javis.py ""‌"") 파일에 추가되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 음성파일을 가져오면 음성 파일에서 텍스트를 추출하는 STT(Speech to Text) 기능을 구현한다.
  - 음성이 텍스트로 잘 인식되는지 확인 한다.
- STT로 구현된 텍스트 인식 정보를 다음과 같은 CSV 파일로 저장한다.
  - 음성 파일내에서의 시간, 인식된 텍스트 등이 잘 기록 되어 있는지 확인한다.
- 파일의 이름은 음성 파일의 이름과 같은 이름으로 저장하되 확장자는 .CSV로 저장한다.
  - 파일이 정상적으로 잘 저장되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 특정 키워드를 입력하면 저장된 CSV 파일 안에서 내용을 찾아서 출력해 준다.
  - 전체 파일 목록에서 원하는 키워드가 잘 검색되는지 확인한다.

# 보너스 과제

- 특정 키워드를 입력하면 저장된 CSV 파일 안에서 내용을 찾아서 출력해 준다.",,,,0,,0,0,0,0,2025-05-04T10:06:21.734Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171ddf9081b94495141626,(평가) 문제 2 - 9,https://trello.com/c/nCIg3mBV/47-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-9,"# 평가 가이드

**[기본 확인]**

- CCTV.zip으로 제공되는 파일의 압축을 풀어서 CCTV 폴더를 만드는 코드를 작성한다.

**[프로그램 구현 확인]**

- 작성된 코드가 cctv.py로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- CCTV 폴더의 사진중에 한 장을 우선 읽어들여서 화면에 출력한다.
  - 이미지 파일을 읽어서 출력 할 수 있는 코드가 잘 작성 되었는지 확인한다.
- 오른쪽 방향 키를 누르면 다음 사진 왼쪽 방향 키를 누르면 이전 사진을 보여 준다.
  - 방향 키에 따라서 사진이 순서데로 잘 출력되는 기능이 잘 구현되었는지 확인한다.
- 처음 사진에서 왼쪽 방향 키를 누르면 ‘First picture’ 마지막 사진에서 오른쪽 방향 키를 누르면 ‘Last picture’ 메시지가 출력 된다.
  - 첫 사진과 마지막 사진에서 경고 메시지가 잘 출력되는지 확인하고 오류 처리가 잘 되어 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 이미지를 처리하는 기능을 다른 곳에서도 활용할 수 있게 기능을 클래스로 작성한다. 클래스의 이름은 MasImageHelper 로 정한다.
  - 클래스로 잘 구현되었는지 확인한다.

# 보너스 과제

- 이미지를 처리하는 기능을 다른 곳에서도 활용할 수 있게 기능을 클래스로 작성한다. 클래스의 이름은 MasImageHelper 로 정한다.",,,,0,,0,0,0,0,2025-05-04T10:06:45.751Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171dee575eee825a11a02c,(평가) 문제 2 - 10,https://trello.com/c/XcvKGJPJ/48-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-2-10,"'- CCTV 사진속에 사진 목록을 가져 올 수 있다.
- 단 이미지 목록을 가져올 때 이미지 파일 형식이 아닌 것은 무시하고 가져 올 수 있도록되어 있다.
- 순차적으로 사진을 검색하고 그 안에서 사람을 찾으면 화면에 이미지를 출력할 수 있다.
- 엔터키를 누르면 다음 사진 부터 계속해서 검색하고 마지막 사진까지 검색이 끝나면 검색이 끝났다는 메시지와 함께 검색을 중단된다.
- 위의 내용들이 잘 동작하면 cctv.py 파일로 저장되어 있다.",,,,0,,0,0,0,0,2025-05-04T08:02:42.355Z,681714128e4f5768febd08b1,과정 2,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68171f9255a6c4a6bb162e14,"(문제1) ""우주_해적""",https://trello.com/c/m03MxrCw/49-%EB%AC%B8%EC%A0%9C1-%EC%9A%B0%EC%A3%BC%ED%95%B4%EC%A0%81,"### 학습목표: Pandas, DataFrame

# 수행과제

- area_map.csv 파일을 읽어들이고 출력해 본다.
- area_struct.csv 파일을 읽어들이고 출력해 본다. 그리고 주요 시설이 어느 area에 집중적으로 설치 되어 있는지 확인한다.
- 시설의 종류는 struct\_category.csv 파일에 정의되어 있다. 이 내용을 area\_struct.csv의 내용과 함께 출력하는데 시설의 종류를 숫자가 아닌 이름으로 출력한다.
- area\_map.csv, area\_struct.csv, struct_category.csv 의 내용을 모두 병합한다.
- 확인된 데이터에는 여러지역의 정보가 들어 있지만 미국의 전진 기지는 area 1에 집중되어 있는 것을 알게 되었다. 따라서 전체 지역의 정보는 불필요하기 떄문에 area 1에대한 데이터만 필터링 해서 출력한다.
- 전체 코드는 mas_map.py 파일로 저장한다.

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- csv 파일을 읽고 내용을 정리하는 것에는 pandas 라이브러리를 사용한다.
- 항상 결과는 DataFrame 객체로 출력한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 지형 지물과 각종 시설물을 종류 별로 요약한 리포트를 출력한다.",,"davidlee49337730, jkh0574, jyoung250, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13173082, user13823470, user30156652, user54045040, user77486599, user8efb568a60c77c958eed3719fce29a5c, vaishnavivats",,3,"https://trello.com/1/cards/68171f9255a6c4a6bb162e14/attachments/68173cba5164cf2e51d9e89d/download/3-1-area_category.csv, https://trello.com/1/cards/68171f9255a6c4a6bb162e14/attachments/68173cbb4c9b9ffa378dcf95/download/3-1-area_map.csv, https://trello.com/1/cards/68171f9255a6c4a6bb162e14/attachments/68173cbc87601216f91a10c0/download/3-1-area_struct.csv",0,0,0,11,2025-06-14T05:54:29.376Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
68172060e268971d006ab3cf,"(문제2) ""보물섬""",https://trello.com/c/qw2N20pL/50-%EB%AC%B8%EC%A0%9C2-%EB%B3%B4%EB%AC%BC%EC%84%AC,"학습목표: 데이터 시각화

# 수행과제

- 문제 1에서 정리된 데이터를 기반으로 지도를 시각화 한다.
- 지도는 죄측 상단의 좌표가 1,1 부터 시작한다. 그리고 우측 하단의 마지막 좌표가 가장큰 좌표가 되게 배치한다.
- 지도에 가로와 세로의 그리드 라인을 그린다.
- 그리드 라인에 암석이 있는 곳의 위치에 원형으로 위치를 표시한다.
- 암석을 나타내는 원형은 바로 옆 좌표와 살짝 겹칠 수 있는 크기로 그린다.
- 암석을 나타내는 원형은 갈색으로 표현한다.
- 지도상에 현재 화성 기지의 위치와 미국 전진 기지의 위치를 표시한다.
- 지도상의 화성 기지와 미국 전진 기지의 위치는 삼각형으로 표시한다.
- 각 기지의 위치는 녹색으로 표현한다.
- 기타 구조물들은 회색 사각형으로 표현한다.
- 지도가 완성되면 mars_map.png 파일로 저장한다.
- 지도를 그리는 코드는 mars\_map\_save.py 파일로 저장한다.

‌

### 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 이미지를 만들고 저장하는 부분은 외부 라이브러리를 사용할 수 있다.
- 결과는 png 이미지로 저장한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 암석, 구조물, 기지 등의 범례를 지도에 함께 표현한다.",,"jkh0574, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13823470, user30156652, user54045040, vaishnavivats",,0,,0,0,0,8,2025-07-01T05:23:04.014Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6817210b7dbe7b4a88f22e34,"(문제3) ""키트의 추억 최단 경로를 잡아라""",https://trello.com/c/N28jTCpV/51-%EB%AC%B8%EC%A0%9C3-%ED%82%A4%ED%8A%B8%EC%9D%98-%EC%B6%94%EC%96%B5-%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%9E%A1%EC%95%84%EB%9D%BC,"학습목표: 최단경로 알고리즘, 데이터 시각화

# 수행과제

- 화성 데이터를 기반으로 화성 기지에서 미국의 화성 전진기지까지 갈 수 있는 최단 경로를 계산한다.
- 최단 경로를 계산할 때에는 무작위로 추출해서는 안되고 알려져 있는 최단 경로 알고리듬 중 하나를 선택해서 수식을 만들고 수식을 파이썬 코드로 옮겨서 완성한다.
- 최단 경로를 구할 때 암석이 가로 막으면 통과 할 수 없다.
- 최단 경로가 구해지면 경로를 CSV 파일로 저장하는데 파일이름은home\_to\_us_camp.csv 로 저장한다.
- 위의 코드가 완성되면 mars\_map\_direct_save.py 파일로 저장한다.

### 제약사항

- Python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- 이미지를 만들고 저장하는 부분은 외부 라이브러리를 사용할 수 있다.
- 결과는 png 이미지로 저장한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.",,"jkh0574, moongyuhwang, songchaehyun, user13823470, user30156652, vaishnavivats",,0,,0,0,0,3,2025-06-25T05:16:04.278Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681721a628bdc325e5a4be9b,"(문제4) ""한장의 지도에 새겨진 길""",https://trello.com/c/QZ6NOK2F/52-%EB%AC%B8%EC%A0%9C4-%ED%95%9C%EC%9E%A5%EC%9D%98-%EC%A7%80%EB%8F%84%EC%97%90-%EC%83%88%EA%B2%A8%EC%A7%84-%EA%B8%B8,"학습목표: 데이터 시각화

# 수행과제

- 문제 3에서 저장한 home\_to\_us_camp.csv 파일을 다시 불러와서 메모리에 저장한다.
- 최단 경로를 지도에 빨간색 라인으로 그려준다. 데이터를 주변의 선들과 구별이 될 수 있을 정도의 굵은 선으로 표시한다.
- 방향을 바꿔야 하는 부분에는 빨간색 점으로 표시한다. 이때 빨간색 점은 최단 경로 라인과 구별 될 수 있도록 좀 더 큰 사이즈로 찍어야 한다.
- 빨간점은 테두리가 검은색으로 표시되어 시인성을 높인다.
- 최단 경로가 표기된 지도가 완성되면 mars\_map\_final.png 파일로 저장한다.
- 위의 코드가 완성되면 mars\_map\_direct_save.py 파일로 저장한다.

### 제약사항

- Python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 이미지를 만들고 저장하는 부분은 외부 라이브러리를 사용할 수 있다.
- 결과는 png 이미지로 저장한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.
- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 지도상에 노란색으로 표시한다.
- 최종 결과물을 mars\_map\_all_around.png로 저장한다.",,"moongyuhwang, user13823470, vaishnavivats",,0,,0,0,0,2,2025-06-14T03:32:24.337Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817326db9f9f19e0b500fc8,"(문제5) ""내일 날씨는 맑음""",https://trello.com/c/qLge8kJI/53-%EB%AC%B8%EC%A0%9C5-%EB%82%B4%EC%9D%BC-%EB%82%A0%EC%94%A8%EB%8A%94-%EB%A7%91%EC%9D%8C,"학습목표: MySQL, SQL

# 수행과제

- MySQL을 설치한다.
- MySQL Workbench를 설치해서 MySQL과 연결해 본다.
- 데이터를 담을 수 있는 테이블을 생성한다. 테이블의 내용은 다음과 같다.
  - 테이블의 이름: mars_weather
  - 컬럼 정보
    - weather_id: int
    - mars_date: datetime
    - temp: int
    - storm: int
  - weather_id 컬럼은 Primary Key로 작성한다.
  - weather_id 컬럼은 자동 증가 값으로 작성한다.
  - mars_date 컬럼은 필수 입력으로 설정한다.
- 테이블 작성이 끝났으면 Python 코드를 통해서 MySQL과 연결 한다.
- 제공되는 mars\_weathers\_data.csv 파일을 읽어서 내용을 확인하는 코드를 작성한다.
- mars\_weathers\_data.csv의 내용을 방금 작성한 mars\_weathers 테이블에 입력한다. 이 때 mars\_weathers_data.csv의 내용을 INSERT 쿼리로 변환해서 반복적으로 실행한다.
- 작성된 코드를 mars\_weather\_summary.py 파일로 저장한다.

### 제약사항

- Python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- MySQL을 다루는 부분은 외부 라이브러리를 사용할 수 있다.
- 결과는 png 이미지로 저장한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- MySQLHelper 클래스는 중요한 정보(MySQL 연결 주소 및 연결 계정, 비밀번호 등등)은 환경 변수를 이용할 수 있게 수정한다.",,"moongyuhwang, user30156652, vaishnavivats",,1,https://trello.com/1/cards/6817326db9f9f19e0b500fc8/attachments/682c22b376fe4c9c3c2718e2/download/mars_weathers_data.CSV.csv,0,0,0,3,2025-06-14T04:10:16.046Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6817334f2f3cc5049fa1e567,"(문제6) ""제갈공명""",https://trello.com/c/EzGvqHI5/54-%EB%AC%B8%EC%A0%9C6-%EC%A0%9C%EA%B0%88%EA%B3%B5%EB%AA%85,"학습목표: MySQL, SQL

# 수행과제

- 전체 데이터 중에서 폭풍 확률이 70% 이상되는 데이터들의 목록을 가져오는 쿼리를 작성하고 Python에서 이 코드를 실행해 본다.
- 전체 데이터 중에서 월별로 평균을 내서 가져오는 SQL 쿼리를 작성하고 Python에서 이코드를 실행해 본다.
- 특정 날짜를 입력하면 해당 날짜 앞뒤로 5일씩의 데이터를 가져오는 SQL 쿼리를 작성하고 Python에서 실행해 본다.
- 다음과 같이 메뉴를 구성하고 번호를 선택하면 해당 데이터를 출력할 수 있게 구성한다.
  - 메뉴
    - 폭풍 확률 70% 이상의 데이터
    - 월별 평균 데이터
    - 특정 날짜의 데이터
    - 종료
- 모든 기능들을 실행한 후에는 다시 메뉴로 돌아와야 한다.
- 작성된 코드를 mars\_weather\_summary.py 파일로 저장한다.

### 제약사항

- Python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는안된다.
- MySQL을 다루는 부분은 외부 라이브러리를 사용할 수 있다.
- 결과는 png 이미지로 저장한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- SQL 쿼리만 주면 실행하고 결과를 던저주는 유틸리티성 클래스를 MySQLHelper라는이름으로 작성하고 이 클래스를 이용해서 실행 할 수 있도록 코드를 삭제한다.",,"moongyuhwang, user30156652",,0,,0,0,0,1,2025-06-14T07:24:41.123Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
6817345f42a6b0bd867d2a59,"(문제7) ""화성 정복""",https://trello.com/c/sstQz2Ga/55-%EB%AC%B8%EC%A0%9C7-%ED%99%94%EC%84%B1-%EC%A0%95%EB%B3%B5,"학습목표: MySQL, SQL

# 수행과제

- 아래와 같이 구성된 식물들의 씨앗 데이터를 저장할 수 있는 테이블 구조를 설계한다.
  - 식물 정보 (Plant Information):
    - 과학적 이름 (Scientific name)
    - 일반 이름 (Common names, 다양한 언어로)
    - 식물 분류 (Plant classification, 과, 속, 종 등)
    - 식물 특성 (Plant characteristics, 크기, 생애 주기, 생육 환경 등)
  - 2. 생육 정보 (Growing Information):
    - 생육 조건 (Growth conditions, 온도, 습도, 빛 등)
    - 생육 기간 (Growth period)
    - 최적 생육 환경 (Optimal growing environment)
    - 수경 재배 또는 토양 조건 (Hydroponic cultivation or soil conditions)
- 테이블에는 Primary Key로 사용할 컬럼이 추가 되어야 한다.
- 테이블에는 언제 입력 되었는지 알 수 있는 날짜 형태의 컬럼이 포함되어야 한다.
- 테이블에는 언제 수정 되었는지 알 수 있는 날짜 형태의 컬럼이 포함되어야 한다.
- MySQL에 설계한 테이블을 생성한다. 테이블의 이름은 mars_plant 로 명명한다.
- mars_plant에 식물 정보를 추가 할 수 있는 함수를 만든다. 함수의 파라메터로 해당 값을 입력하면 데이터베이스에 입력 될 수 있어야 한다.
- 작성된 기능은 mars_plant.py 파일로 저장한다.

### 제약사항

- 식물들의 데이터는 Unique한 ID가 개별적으로 설계에 포함되어야 한다.
- Unique한 ID는 Primary Key로 설정되어 있어야 한다.
- 각 컬럼들의 데이터 타입은 해당 컬럼의 내용을 담을 수 있는 데이터 타입 중에서 가장작은 데이터 타입으로 구성되어 있어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

### 보너스 과제

- 입력되는 데이터의 유효성을 검사할 수 있는 코드를 추가한다.",,"moongyuhwang, user30156652",,0,,0,0,0,1,2025-06-14T07:49:20.926Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681735421338b0e0e8eb13b2,"(문제8) ""나만의 식물창고 1""",https://trello.com/c/FRHWPiIB/56-%EB%AC%B8%EC%A0%9C8-%EB%82%98%EB%A7%8C%EC%9D%98-%EC%8B%9D%EB%AC%BC%EC%B0%BD%EA%B3%A0-1,"학습목표: MySQL, SQL, Paging

# 수행과제

- 다음과 같이 메뉴를 구성한다.
  - 식물 데이터 목록
  - 종료
- 식물 데이터 목록 메뉴에서는 입력된 전체 식물 데이터의 목록을 출력한다.
- 식물 데이터 목록을 보여줄 때 내용이 많아질 경우를 대비해서 10개씩 끊어서 출력하는기능을 만든다.
- 목록을 출력한 후에는 이전, 다음, 돌아가기와 같은 선택을 할 수 있게 구성한다.
- 종료 기능을 선택하면 파이썬 코드가 종료된다.
- 작성된 기능은 mars_plant.py 파일로 저장한다.

### 제약사항

- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

## 보너스 과제

- 전체 페이지와 현재 페이지 번호를 아래에 출력 할 수 있게 한다.",,"moongyuhwang, user30156652",,0,,0,0,0,2,2025-06-14T07:50:45.903Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681735dd3a32ffd582ef3e8f,"(문제9) ""나만의 식물창고 2""",https://trello.com/c/OW07Vb2w/57-%EB%AC%B8%EC%A0%9C9-%EB%82%98%EB%A7%8C%EC%9D%98-%EC%8B%9D%EB%AC%BC%EC%B0%BD%EA%B3%A0-2,"학습목표: MySQL, SQL, CRUD

# 수행과제

- 다음과 같이 메뉴를 구성한다.
  - 식물 데이터 목록
  - 식물 데이터 검색
  - 종료
- 식물 데이터 목록 메뉴에서는 입력된 전체 식물 데이터의 목록을 출력한다.
- 식물 데이터 검색 메뉴에서는 특정 검색어를 입력받아서 검색어에 해당하는 목록을 출력한다.
- 검색 기능에서는 해당 키워드와 전체가 일치하지 않더라도 해당 키워드가 들어간 모든식물을 찾아서 출력한다.
- 검색 결과에서 수정, 삭제를 선택할 수 있게 메뉴를 추가한다.
- 수정, 삭제 기능을 선택하면 해당 식물의 고유 ID를 입력해서 선택 할 수 있게 한다.
- 수정 기능을 선택하면 기존의 항목 단계적으로 보여주며 수정 할 것인지 묻고 수정 하겠다고 하는 항목만 수정한다.
- 삭제 기능을 선택하면 해당 식물의 정보를 보여주고 삭제에 대해서 yes/no로 다시 물어보고 삭제한다.
- 종료 기능을 선택하면 파이썬 코드가 종료된다.
- 작성된 기능은 mars_plant.py 파일로 저장한다.

### 제약사항

- 식물들의 데이터는 Unique한 ID가 개별적으로 설계에 포함되어야 한다.
- Unique한 ID는 Primary Key로 설정되어 있어야 한다.
- 각 컬럼들의 데이터 타입은 해당 컬럼의 내용을 담을 수 있는 데이터 타입 중에서 가장작은 데이터 타입으로 구성되어 있어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다.
  (PEP 8 – 파이썬 코드 스타일 가이드 | [http://peps.python.org](http://peps.python.org ""smartCard-inline"") )
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

‌

### 보너스 과제

- 전체 CRUD를 담당하는 기능들을 하나의 클래스로 작성한다.",,moongyuhwang,,0,,0,0,0,1,2025-05-21T08:25:54.426Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736cc7c95eec6d4eff555,(평가) 문제 3 - 1,https://trello.com/c/AfMZkPnG/58-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-1,"# 평가 가이드

- area\_map.csv, area\_struct.csv, struct_category.csv 파일을 각각 읽어 들이고 출력할 수 있다.
- area\_map.csv, area\_struct.csv, struct_category.csv 내용이 하나의 DataFrame 객체로 통합되어 area로 정렬 되어서 출력되어야 한다. 단 중복되는 컬럼들은 모두 병합되어 하나의 컬럼으로 출력 되어야 한다.
- area 1의 내용만 필터링 해서 출력되어야 한다.

**[기본 확인]**

- area_map.csv 파일을 읽어들이고 출력 할 수 있는지 확인해 본다.
- area_struct.csv 파일을 읽어들이고 출력해 본다.
  - 주요 시설이 어느 area에 집중적으로 설치 되어 있는지 확인한다.
- 시설의 종류는 struct_category.csv 파일을 읽고 출력해 본다.
  - 이 내용을 area_struct.csv 의 내용과 함께 출력하는데 시설의 종류를 숫자가 아닌 이름으로 출력한다.

**[프로그램 구현 확인]**

- 전체 코드는 mas_map.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- area\_map.csv, area\_struct.csv, struct_category.csv 의 내용을 모두 병합한다.
  - area\_map.csv, area\_struct.csv, struct_category.csv 내용이 하나의 DataFrame 객체로 통합되어 area로 정렬 되어서 출력되어야 한다. 단 중복되는 컬럼들은 모두 병합되어 하나의 컬럼으로 출력 되어야 한다.
- 병합된 전체 데이터에서 특정 구역만 출력한다.
  - area 1의 내용만 필터링 해서 출력되어야 한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 지형 지물과 각종 시설물을 종류 별로 요약한 리포트를 출력한다.
  - 데이터를 기반으로 리포트를 출력한다.

# 보너스 과제

- 지형 지물과 각종 시설물을 종류 별로 요약한 리포트를 출력한다.",,,,0,,0,0,0,0,2025-05-04T10:08:13.628Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736db938024b8d51f91c1,(평가) 문제 3 - 2,https://trello.com/c/PKMfekQ5/59-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-2,"# 평가 가이드

- ‌
- 좌표가 좌측 상단부터 0,0 부터 시작해서 순서대로 배치되어 있다.
- 지도에 그리드 라인이 그려져 있다.
- 지도상에 암석이 잘 그려져 있고 인접한 두 암석이 겹쳐져 있을 정도의 크기로 잘 그려져 있다.
- 암석은 갈색으로 표현되어 있다.
- 각 기지의 모습은 녹색 삼각형으로 그려져 있다.
- 기타 구조물들들은 회색 사각형으로 그려져 있다.
- 완성된 지도가 mars_map.png 파일로 저장되어 있다.

**[기본 확인]**

- 문제 1에서 정리된 데이터를 기반으로 지도를 시각화 한다.

**[프로그램 구현 확인]**

- 지도가 완성되면 mars_map.png 파일로 저장한다.
- 지도를 그리는 코드는 mars\_map\_save.py 파일로 저장한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 지도는 죄측 상단의 좌표가 1,1 부터 시작한다. 그리고 우측 하단의 마지막 좌표가 가장 큰 좌표가 되게 배치한다.
  - 좌표계를 바탕으로 메트릭스를 잘 이해하고 구현 했는지 확인한다.
- 지도에 가로와 세로의 그리드 라인을 그린다.
  - 바둑판 모양의 그리드가 잘 그려졌는지 확인한다.
- 그리드 라인에 암석이 있는 곳의 위치에 원형으로 위치를 표시한다.
  - 그리드 위에 해당 객체들을 원형으로 잘 표현 되었는지 확인한다.
- 암석을 나타내는 원형은 바로 옆 좌표와 살짝 겹칠 수 있는 크기로 그린다.
  - 크기에 맞게 원이 잘 표현 되었는지 확인한다.
- 암석을 나타내는 원형은 갈색으로 표현한다.
  - 암석이 갈색으로 잘 표현 되었는지 확인한다.
- 지도상에 현재 화성 기지의 위치와 미국 전진 기지의 위치를 표시한다.
  - 그리드 위에 해당 객체들을 원형으로 잘 표현 되었는지 확인한다.
- 지도상의 화성 기지와 미국 전진 기지의 위치는 삼각형으로 표시한다.
  - 그리드 위에 해당 객체들을 삼각형으로 잘 표현 되었는지 확인한다.
- 각 기지의 위치는 녹색으로 표현한다.
  - 기지는 녹색으로 잘 표현 되었는지 확인한다.
- 기타 구조물들은 회색 사각형으로 표현한다.
  - 그리드 위에 해당 객체들을 회색 사각형으로 잘 표현 되었는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 암석, 구조물, 기지 등의 범례를 지도에 함께 표현한다.
  - 범례는 색상과 도형 그리고 라벨이 잘 표현되어 있는지 확인한다.

# 보너스 과제

- 암석, 구조물, 기지 등의 범례를 지도에 함께 표현한다.",,,,0,,0,0,0,0,2025-05-04T10:09:35.672Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736defa6472afe4e31445,(평가) 문제 3 - 3,https://trello.com/c/lPxjwoEf/60-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-3,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 최단 경로가 표시된 지도를 mars\_map\_final.png 파일로 저장되어 있는지 확인한다.
- 완성된 코드는 mars\_map\_direct_save.py로 저장되어 있는지 확인한다.
- 최단 경로가 구해지면 경로를 CSV 파일로 저장하는데 파일이름은 home\_to\_us_camp.csv 로 저장 되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 최단 경로를 구한 알고리듬이 이미 알려진 알고리듬 중 하나로 구현되어 있다.
  - 유명한 알고리즘 중 하나로 구현되었는지 확인하고 알고리즘의 출처를 함께 설명할 수 있는지 확인한다.
- 최단 경로를 지도상에 빨간색 라인으로 표현했다.
  - 최단 경로를 빨간색 라인으로 표시하고 파일로 잘

**[개념 확인 질문]**

- 알고리듬의 수식을 상대방에게 설명할 수 있다.

**[보너스 문제 확인]**

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.
  - 중간에 모든 구조물을 모두 수색해서 돌아올 수 있게 경로를 설정했는지 확인한다.

# 보너스 과제

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.",,,,0,,0,0,0,0,2025-05-04T10:09:57.526Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736e045efb7a138db9073,(평가) 문제 3 - 4,https://trello.com/c/LdRrJWtX/61-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-4,"# 평가 가이드

**[기본 확인]**

- 문제 4에서 저장한 home\_to\_us_camp.csv 파일을 다시 불러와서 메모리에 저장한다.

**[프로그램 구현 확인]**

- 위의 코드가 완성되면 mars\_map\_direct_save.py 파일로 저장되어 있는지 확인한다.
- 최단 경로가 표기된 지도가 완성되면 mars\_map\_final.png 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 최단 경로를 지도에 빨간색 라인으로 그려준다. 데이터를 주변의 선들과 구별이 될 수 있을 정도의 굵은 선으로 표시한다.
  - 이미지에 해당 라인이 정확하게 그려져 있는지 확인한다.
- 방향을 바꿔야 하는 부분에는 빨간색 점으로 표시한다. 이때 빨간색 점은 최단 경로 라인과 구별 될 수 있도록 좀 더 큰 사이즈로 찍어야 한다.
  - 이미지에 해당 점이 정확하게 그려져 있는지 확인한다.
- 빨간점은 테두리가 검은색으로 표시되어 시인성을 높인다.
  - 이미지에 해당 테두리가 정확하게 그려져 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.
  - 모든 구조물을 거쳐오는 경로인지 더 빠른 경로는 없는 지 확인한다.
- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 지도상에 노란색으로 표시한다.
  - 해당 경로가 잘 표시되어 있는지 확인한다.
- 최종 결과물을 mars\_map\_all_around.png로 저장한다.
  - 최종 결과물이 잘 저장되어 있는지 이미지를 열어서 확인한다.

# 보너스 과제

- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 계산한다.
- 모든 구조물을 한번씩 거쳐서 오는 최단 경로를 지도상에 노란색으로 표시한다.
- 최종 결과물을 mars\_map\_all_around.png로 저장한다.",,,,0,,0,0,0,0,2025-05-04T10:10:20.169Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736e21a005aad59054221,(평가) 문제 3 - 5,https://trello.com/c/xNrqV48Z/62-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-5,"# 평가 가이드

**[기본 확인]**

- MySQL을 설치되어 있는지 확인 해준다.
- MySQL Workbench를 설치해서 MySQL과 연결 되는지 확인한다.

**[프로그램 구현 확인]**

- 데이터를 담을 수 있는 테이블을 생성이 아래와 같이 잘 생성되어 있는지 확인한다.
  - 테이블의 이름: mars_weather
  - 컬럼 정보
    - weather_id: int
    - mars_date: datetime
    - temp: int
    - storm: int
  - weather_id 컬럼은 Primary Key로 작성한다.
  - weather_id 컬럼은 자동 증가 값으로 작성한다.
  - mars_date 컬럼은 필수 입력으로 설정한다.
- 작성된 코드를 mars\_weather\_summary.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 테이블 작성이 끝났으면 Python 코드를 통해서 MySQL과 연결하는 코드가 작성되어 있는지 확인한다.
  - MySQL 관련 라이브러리를 사용해서 연결에 성공했는지 확인한다.
- 제공되는 mars\_weathers\_data.csv 파일을 읽어서 내용을 확인하는 코드를 작성한다.
  - mars\_weathers\_data.csv의 내용이 정상적으로 출력되는지 확인한다.
- mars\_weathers\_data.csv의 내용을 방금 작성한 mars_weathers 테이블에 입력한다.
  - mars\_weathers\_data.csv의 내용을 INSERT 쿼리로 변환해서 반복적으로 실행해서 데이터가 잘 입력되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- MySQLHelper 클래스를 만들어서 데이터베이스 연결 및 쿼리 등을 쉽게 할 수 있게 구성한다.
  - 유틸리티성 클래스로 MySQLHelper 클래스를 만들어서 데이터베이스 연결 및 쿼리 등을 쉽게 할 수 있게 구성했는지 확인한다.

# 보너스 과제

- MySQLHelper 클래스를 만들어서 데이터베이스 연결 및 쿼리 등을 쉽게 할 수 있게 구성한다.",,,,0,,0,0,0,0,2025-05-04T10:10:52.814Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736e469de50d39a20b0ca,(평가) 문제 3 - 6,https://trello.com/c/Lm7xGqkI/63-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-6,"# 평가 가이드

**[기본 확인]**

- 전체 데이터 중에서 폭풍 확률이 70% 이상되는 데이터들의 목록을 가져오는 쿼리를 작성하고 Python에서 이 코드를 실행해 본다.
- 전체 데이터 중에서 월별로 평균을 내서 가져오는 SQL 쿼리를 작성하고 Python에서 이 코드를 실행해 본다.
- 특정 날짜를 입력하면 해당 날짜 앞뒤로 5일씩의 데이터를 가져오는 SQL 쿼리를 작성하고 Python에서 실행해 본다.

**[프로그램 구현 확인]**

- 작성된 코드를 mars\_weather\_summary.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같이 메뉴를 구성하고 번호를 선택하면 해당 데이터를 출력할 수 있게 구성한다.
  - 메뉴
    1. 폭풍 확률 70% 이상의 데이터
    2. 월별 평균 데이터
    3. 특정 날짜의 데이터
    4. 종료
  - 메뉴가 출력되고 번호를 선택하면 해당 쿼리가 실행되어 결과가 나타날 수 있도록 구현 되었는지 확인한다.
- 모든 기능들을 실행한 후에는 다시 메뉴로 돌아와야 한다.
  - 매번 결과가 출력되면 다시 메뉴가 나타나게 구현 되었는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- SQL 쿼리만 주면 실행하고 결과를 던저주는 유틸리티성 클래스를 MySQLHelper라는 이름으로 작성하고 이 클래스를 이용해서 실행 할 수 있도록 코드를 삭제한다.
  - 환경변수를 이용해서 중요한 정보에 대한 관리가 가능하게 구현되었는지 확인한다.

# 보너스 과제

- MySQLHelper 클래스는 중요한 정보(MySQL 연결 주소 및 연결 계정, 비밀번호 등등)은 환경 변수를 이용할 수 있게 코드를 작성한다.",,,,0,,0,0,0,0,2025-05-04T10:11:11.770Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736e63639c7a5bf1a1776,(평가) 문제 3 - 7,https://trello.com/c/h8DSkoum/64-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-7,"# 평가 가이드

**[기본 확인]**

- 아래와 같이 구성된 식물들의 씨앗 데이터를 저장할 수 있는 테이블 구조를 설계 되어 있는지 확인한다.
  - **식물 정보 (Plant Information)**:
    - 과학적 이름 (Scientific name)
    - 일반 이름 (Common names, 다양한 언어로)
    - 식물 분류 (Plant classification, 과, 속, 종 등)
    - 식물 특성 (Plant characteristics, 크기, 생애 주기, 생육 환경 등)
  - **생육 정보 (Growing Information)**:
    - 생육 조건 (Growth conditions, 온도, 습도, 빛 등)
    - 생육 기간 (Growth period)
    - 최적 생육 환경 (Optimal growing environment)
    - 수경 재배 또는 토양 조건 (Hydroponic cultivation or soil conditions)
- 테이블에는 Primary Key로 사용할 컬럼이 추가 되어 있는지 확인한다.
- 테이블에는 언제 입력 되었는지 알 수 있는 날짜 형태의 컬럼이 포함되어 있는지 확인한다.
- 테이블에는 언제 수정 되었는지 알 수 있는 날짜 형태의 컬럼이 포함되어 있는지 확인한다.
- MySQL에 설계한 테이블을 생성한다. 테이블의 이름은 mars_plant 로 명명되어 있는지 확인한다.

**[프로그램 구현 확인]**

- 작성된 기능은 mars_plant.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- mars_plant에 식물 정보를 추가 할 수 있는 함수를 만든다. 함수의 파라메터로 해당 값을 입력하면 데이터베이스에 입력 될 수 있게 되어 있는지
  - 해당 함수를 통해서 입력 받은 값을 데이터베이스에 직접 입력 가능한지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 입력되는 데이터의 요효성을 검사할 수 있는 코드를 추가한다.
  - 각각의 항목의 데이터 유형 및 크기를 검증 할 수 있는 코드가 추가 되어 있는지 확인한다.

# 보너스 과제

- 입력되는 데이터의 요효성을 검사할 수 있는 코드를 추가한다.",,,,0,,0,0,0,0,2025-05-04T10:11:39.601Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736e834d53186907e3d0c,(평가) 문제 3 - 8,https://trello.com/c/QCFpIFex/65-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-8,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 작성된 기능은 mars_plant.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같이 메뉴를 구성한다.
  1. 식물 데이터 목록
  2. 종료
  - 메뉴가 출력되고 나서 해당 번호를 입력하면 해당 기능이 출력 될 수 있게 구현한다.
- 식물 데이터 목록 메뉴에서는 입력된 전체 식물 데이터의 목록을 출력한다.
  - 전체 목록이 잘 출력 되는지 확인한다.
- 식물 데이터 목록을 보여줄 때 내용이 많아질 경우를 대비해서 10개씩 끊어서 출력하는 기능을 만든다.
  - 출력 내용이 많으면 10개씩 입력하고 특정 키를 입력하면 계속해서 출력할 수 있는 기능이 있는지 확인한다.
- 종료 기능을 선택하면 파이썬 코드가 종료된다.
  - 파이썬 코드가 잘 종료 되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 전체 페이지와 현재 페이지 번호를 아래에 출력 할 수 있게 한다.
  - 전체 데이터의 개수를 이용해서 페이징 개념이 잘 구현되어 있는지 확인한다.

# 보너스 과제

- 전체 페이지와 현재 페이지 번호를 아래에 출력 할 수 있게 한다.",,,,0,,0,0,0,0,2025-05-04T10:11:58.875Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681736ebcbba2a7e56f0b48b,(평가) 문제 3 - 9,https://trello.com/c/4FtoCXMy/66-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-3-9,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 작성된 기능은 mars_plant.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같이 메뉴를 구성한다.
  - 식물 데이터 목록
  - 식물 데이터 검색
  - 종료
  - 메뉴를 구성하고 해당 메뉴의 번호를 입력하면 해당 기능이 실행 되는지 확인한다.
- 식물 데이터 목록 메뉴에서는 입력된 전체 식물 데이터의 목록을 출력한다.
  - 전체 식물 데이터가 잘 출력되는지 확인한다.
- 식물 데이터 검색 메뉴에서는 특정 검색어를 입력받아서 검색어에 해당하는 목록을 출력한다.
  - 검색 결과 목록이 잘 출력되는지 확인한다.
  - 검색 기능에서는 해당 키워드와 전체가 일치하지 않더라도 해당 키워드가 들어간 모든 식물을 찾아서 출력되고 있는지 확인한다.
- 검색 결과에서 수정, 삭제를 선택할 수 있게 메뉴를 추가한다.
  - 해당 메뉴가 잘 추가 되어 있는지 확인한다.
  - 수정, 삭제 기능을 선택하면 해당 식물의 고유 ID를 입력해서 선택 할 수 있게 한다.
  - 수정 기능을 선택하면 기존의 항목 단계적으로 보여주며 수정 할 것인지 묻고 수정 하겠다고 하는 항목만 수정하는지 확인한다.
  - 삭제 기능을 선택하면 해당 식물의 정보를 보여주고 삭제에 대해서 yes/no로 다시 물어보고 삭제하는지 확인한다.
- 종료 기능을 선택하면 파이썬 코드가 종료된다.
  - 파이썬 코드가 잘 종료되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 전체 CRUD를 담당하는 기능들을 하나의 클래스로 작성한다.
  - 별도의 유틸리티성 클래스로 잘 구현되었는지 확인한다.

# 보너스 과제

- 전체 CRUD를 담당하는 기능들을 하나의 클래스로 작성한다.",,,,0,,0,0,0,0,2025-05-04T10:12:28.751Z,68171f87d25d714db9ca1da4,과정 3,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681744f24f8485a912fd56ac,"(문제1) ""스페이스 타이타닉 사건""",https://trello.com/c/k6VyQ95N/125-%EB%AC%B8%EC%A0%9C1-%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%83%80%EC%9D%B4%ED%83%80%EB%8B%89-%EC%82%AC%EA%B1%B4,"학습목표: 캐글 활용

[Spaceship Titanic | Kaggle](https://www.kaggle.com/competitions/spaceship-titanic/data ""‌"")

# 수행과제

- kaggle 사이트([Spaceship Titanic | Kaggle](https://www.kaggle.com/competitions/spaceship-titanic/data ""‌""))에서 스페이스 타이타닉 데이터를 다운로드 한다.
- 다운로드 받은 파일 중에서 train.csv, test.csv 두 개의 파일을 읽는다.
- 두 개의 파일의 내용을 하나로 병합한다.
- 전체 데이터의 수량을 파악한다.
- 사람들이 다른 차원으로 전송되었는지 여부를 나타내는 Transported 항목과 가장 관련성이 높은 항목을 찾는다.
- 나이를 기준으로 10대, 20대, 30대, 40대, 50대, 60대, 70대 별로 Transported 여부를 하나의 그래프에서 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Pandas 및 데이터를 시각화 하는 부분은 외부 라이브러리를 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- Destination 별로 승객들의 연령대 분포를 파악해서 시각화 한다.",,"davidlee49337730, donggeonkim6, moongyuhwang, songchaehyun, user0eb36aad33715df064b819e01321c4d8, user13823470, user30156652, user54045040",,0,,0,0,0,6,2025-06-21T06:50:33.308Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681746b3a937e173aef2de32,"(문제2) ""그때 지구 그리고 한국에서는""",https://trello.com/c/8fwPGwxp/126-%EB%AC%B8%EC%A0%9C2-%EA%B7%B8%EB%95%8C-%EC%A7%80%EA%B5%AC-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%ED%95%9C%EA%B5%AD%EC%97%90%EC%84%9C%EB%8A%94,"학습목표: 국가통계포탈 활용

# 수행과제

- 국가통계 포탈 ([https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=DT_1IN1507&vw_cd=MT_ZTITLE&list_id=A11_2015_1_10_10&scrId=&seqNo=&lang_mode=ko&obj_var_id=&itm_id=&conn_path=MT_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do](https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=DT_1IN1507&vw_cd=MT_ZTITLE&list_id=A11_2015_1_10_10&scrId=&seqNo=&lang_mode=ko&obj_var_id=&itm_id=&conn_path=MT_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do ""smartCard-inline"") )에 접속한다.
- 2015년 이후의 최대한의 데이터를 출력시키도록 시점을 조정한다.
- 국가통계 포탈에서 제공하는 행렬 전환 기능을 사용해서 년도가 열이 아니라 행으로 보이게 내용을 조절한다.
- 조정된 데이터를 CSV 파일로 다운로드 한다.
- 다운로드 받은 CSV 파일을 DataFrame 객체로 읽어들인다.
- 컬럼들 중에서 일반가구원을 제외한 나머지 컬럼들을 모두 삭제한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 남자 및 여자의 연도별 일반가구원 데이터 통계롤 최종적으로 출력한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 연령별 일반가구원 데이터 통계롤 최종적으로 출력한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 남자 및 여자의 연령별 일반가구원 데이터 통계를 꺽은선 그래프로 표현한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Pandas 및 데이터를 시각화 하는 부분은 외부 라이브러리를 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 연령별 그래프의 변화를 보고 인구의 변화 트렌드를 데이터를 기반으로 정리한 리포터를 작성한다.",,"moongyuhwang, songchaehyun",,0,,0,0,0,3,2025-06-28T15:27:36.364Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681746bc31b605bd08239f9f,"(문제3) ""스마트 팜의 시작""",https://trello.com/c/y1GbHyqN/127-%EB%AC%B8%EC%A0%9C3-%EC%8A%A4%EB%A7%88%ED%8A%B8-%ED%8C%9C%EC%9D%98-%EC%8B%9C%EC%9E%91,"학습목표: 쓰레드, 클래스

# 수행과제

- 스마트 팜(Smart Parm)의 센서들을 구현해야 한다. 센서는 다음과 같은 항목들을 가지고 있다.
  - 온도: Temperature
  - 조도: Illuminance or Light Intensity
  - 습도: Humidity
- 각각의 센서 값은 다음 범위 안에서 랜덤으로 값을 생성해 낸다.
  - 온도: 20~30
  - 조도: 5000~10000
  - 습도: 40~70
- 센서 값을 출력하는 클래스를 ParmSensor 클래스로 생성한다. 여기에는
  - 센서의 고유이름을 속성으로 포함한다.
  - 온도, 조도, 습도 등을 속성으로 포함한다.
  - SetData()를 호출하면 랜덤으로 제한된 범위안의 값을 생성해서 온도, 조도, 습도의 속성에 채워 넣는다.
  - GetData()를 호출하면 온도, 조도, 습도의 값을 돌려준다.
- ParmSensor 클래스를 5개의 인스턴스로 만들어 각각 Parm-1~5까지 고유이름을 설정해 준다.
- 멀티 쓰레드로 Parm1~5의 SetData(), GetData()를 10초 단위로 호출해 주고 그 결과를 화면에 다음과 같이 출력해 준다.
  - 2000-08-01 14:30:30 Parm1 — temp 00, light 000, humi 00
- 모든 센서의 값이 골고루 다 출력되는지 확인한다.

# 제약사항

- 멀티 쓰레드로 동작 하기 때문에 항상 순차적으로 동작하지 않아도 된다.
- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 멀티쓰레드와 반복적인 시간 이벤트를 발생하는 부분은 외부 라이브러리를 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 출력되는 내용들을 DataFrame 객체에 담고 5분 단위로 평균을 내서 별도로 출력한다.",,"moongyuhwang, songchaehyun, user30156652",,0,,0,0,0,3,2025-06-29T08:11:41.933Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,true
681746cc70b5d0b9b1b106f5,"(문제4) ""스마트 팜 데이터의 저장과 활용""",https://trello.com/c/ly77oPa8/128-%EB%AC%B8%EC%A0%9C4-%EC%8A%A4%EB%A7%88%ED%8A%B8-%ED%8C%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%A0%80%EC%9E%A5%EA%B3%BC-%ED%99%9C%EC%9A%A9,"학습목표: 데이터베이스, 시각화

# 수행과제

- MySQL을 사용할 수 있게 설치한다.
- MySQL Workbench를 설치해서 MySQL을 제어할 수 있게 준비한다.
- 데이터를 저장할 수 있게 테이블을 생성한다. 테이블에는 다음과 같은 항목이 포함되어 있어야 한다.
  - 데이터 고유 ID (int)
  - 입력시간 (datatime)
  - 온도 (int)
  - 조도 (int)
  - 습도(int)
- 데이터 고유 ID는 자동으로 증가되는 컬럼으로 구성하고 Primary Key로 설정한다.
- 테이블의 이름은 parm_data 로 정한다.
- 입력시간, 온도, 조도, 습도 등을 입력받아서 테이블에 입력하는 함수를 insert\_sensor\_data()라는 이름으로 만든다.
- 문제 3에서 만든 쓰레드에서 센서의 데이터를 출력할 때 마다 insert\_sensor\_data()를 호출해서 테이블에 데이터를 입력한다.
- 데이터가 잘 입력되는지 확인해 본다.

# 제약사항

- 멀티 쓰레드로 동작 하기 때문에 항상 순차적으로 동작하지 않아도 된다.
- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 멀티쓰레드와 반복적인 시간 이벤트를 발생하는 부분은 외부 라이브러리를 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 각 센서별로 데이터들의 입력 된 데이터의 수와 시간대별 평균 데이터를 구하시오",,"moongyuhwang, songchaehyun",,0,,0,0,0,2,2025-06-27T09:42:13.041Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681746dc9f0d6cea315d5258,"(문제5) ""중간 지점으로 큐를 사용해 볼까?""",https://trello.com/c/AjVA3oa0/129-%EB%AC%B8%EC%A0%9C5-%EC%A4%91%EA%B0%84-%EC%A7%80%EC%A0%90%EC%9C%BC%EB%A1%9C-%ED%81%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B3%BC%EA%B9%8C,"학습목표: 데이터베이스, 시각화, 큐

# 수행과제

- Python 코드로 큐(Queue) 구조를 완성한다. 이때 FIFO(First In First Out) 구조로 만들어야 한다.
- 이때 큐의 이름은 sensorQ로 만든다.
- 쓰레드에서 센서 데이터가 출력될 때 데이터베이스로 직접 데이터를 입력하지 않고 sensorQ에 저장하도록 한다.
- 별도의 쓰레드에서 1초에 한번씩 큐의 내용을 확인하고 내용이 있으면 해당 내용을 가져와서 insert\_sensor\_data() 함수에 값을 넘겨주어서 테이블에 내용을 입력한다.
- 이때 먼저 들어온 데이터 부터 순차적으로 잘 가져올 수 있는지 확인하다.
- 테이블에 들어 있는 데이터를 가져오는 get\_sensor\_data() 함수를 만든다.
- get\_sensor\_data() 함수를 통해서 가져온 값을 바탕으로 센서별로 시간별 온도의 평균 값을 출력하는 그래프를 그린다.

# 제약사항

- 멀티 쓰레드로 동작 하기 때문에 항상 순차적으로 동작하지 않아도 된다.
- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 멀티쓰레드와 반복적인 시간 이벤트를 발생하는 부분은 외부 라이브러리를 사용할 수 있다.
- 데이터를 시각화 하는 부분과 MySQL을 담당하는 외부 라이브러리를 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 습도가 90%가 넘은 포인트 마다 빨간색으로 별도로 표시한다.",,moongyuhwang,,0,,0,0,0,1,2025-05-29T01:09:47.199Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681746f3903901fc3b253243,"(문제6) ""음악이 필요해""",https://trello.com/c/taeN9gsW/130-%EB%AC%B8%EC%A0%9C6-%EC%9D%8C%EC%95%85%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%B4,"학습목표: 단순 연결 리스트

# 수행과제

- Python 코드로 단순 연결 리스트 구조를 완성한다.
- 단순 연결 리스트의 이름은 linkedlist로 만든다.
- 단순 연결 리스트에 새로운 항목을 추가 할 수 있도록 추가 함수를 insert()로 추가한다.
- 추가 함수의 경우 첫번째 항목으로도 추가 할 수 있어야 하고 마지막 항목으로도 추가가 가능해야 한다.
- 추가 함수의 경우 리스트 중간에도 삽입이 가능해야 한다.
- 단순 연결 리스트의 특정 항목을 삭제 할 수 있도록 삭제 함수를 delete()로 추가한다.
- 준비가 되었으면 원하는 음악의 목록을 단순 연결 리스트에 입력하거나 삭제해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 처음부터 끝까지 순차적으로 가져오는 get_list() 함수를 추가해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-05-29T02:14:11.230Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681746ff83b04f36888d7258,"(문제7) ""끊기지 않는 음악""",https://trello.com/c/CmBDU1it/131-%EB%AC%B8%EC%A0%9C7-%EB%81%8A%EA%B8%B0%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%8C%EC%95%85,"학습목표: 원형 연결 리스트

# 수행과제

- Python 코드로 원형 연결 리스트(Circular Linked List)를 구현한다.
- 이때 원형 연결 리스트의 이름은 circularlist로 만든다.
- 원형 연결 리스트에 새로운 원소를 추가 할 수 있도록 추가 함수를 insert()로 추가한다.
- 추가 함수는 임의의 위치에 추가 할 수 있도록 추가 위치를 특정하지 않는다.
- 원형 연결 리스트에서 특정 원소를 삭제하는 delete() 함수를 추가한다.
- 원형 연결 리스트에서 다음 항목으로 넘어 가서 항목을 가져오는 get_next() 함수를 추가한다.
- 음악 제목들을 입력해서 검색하는 search() 함수를 추가하고 구현한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
- 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
- foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
- 들여 쓰기는 공백을 기본으로 사용합니다.
- 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
- 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
- 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 노래 제목 말고 실제 mp3 등의 파일 목록을 입력하고 순차적으로 음악이 재생하도록 음악 플레이어를 만들어 보세요.",,moongyuhwang,,0,,0,0,0,1,2025-05-29T04:50:18.210Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817470e9c4fefa5b9746c0e,"(문제8) ""식물의 계보를 추적하자""",https://trello.com/c/5k1mTRQX/132-%EB%AC%B8%EC%A0%9C8-%EC%8B%9D%EB%AC%BC%EC%9D%98-%EA%B3%84%EB%B3%B4%EB%A5%BC-%EC%B6%94%EC%A0%81%ED%95%98%EC%9E%90,"학습목표: 그래프

# 수행과제

- Python 코드로 이진 트리(Binary Search Tree) 구조를 완성한다.
- 이때 이진 트리의 이름은 binarytree로 만든다.
- 이진 트리에 새로운 원소를 추가 할 수 있도록 추가 함수를 insert()로 추가한다.
- 이진 트리에 원하는 값의 존재 유무를 확인 할 수 있도록 탐색 기능을 하는 함수를 find()로 추가한다.
- 이진 트리에서 특정 원소를 삭제하는 delete() 함수를 추가한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 전체 내용을 BinarySearchTree 라는 이름의 클래스로 구성해서 재사용할 수 있게 한다.",,moongyuhwang,,0,,0,0,0,1,2025-05-29T05:19:36.049Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681747180825b8603866a02f,"(문제9) ""비료 자동 투입기""",https://trello.com/c/GjVVEWaI/133-%EB%AC%B8%EC%A0%9C9-%EB%B9%84%EB%A3%8C-%EC%9E%90%EB%8F%99-%ED%88%AC%EC%9E%85%EA%B8%B0,"학습목표: 스택

# 수행과제

- Python 코드로 스택(Stack) 구조를 완성한다.
- 스택 구조에 내용을 입력할 수 있도록 추가하는 함수를 push() 함수를 만든다.
- push() 함수는 10개가 다 채워지면 추가되지 않고 경고 메시지만 알려준다.
- 가장 마지막에 추가된 내용을 가져올 수 있게 pop() 함수를 만든다.
- pop() 함수의 경우 가져올 내용이 없으면 가져오지 않고 경고 메시지만 알려준다.
- 전체 내용이 비였는지 확인하는 empty() 함수를 추가한다.
- 마지막 내용을 삭제하지 않고 내용만 확인하는 peek() 함수를 추가한다.
- 스택 구조가 완성되면 내용을 입력하고 가져와 본다. 단 이때 내용에는 고유한 번호등을 붙여서 스택의 구조가 정상적으로 잘 동작하는지 확인해야 한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 스택의 구조를 클래스화 하고 스택의 상태를 시각화 해서 지금 상태를 직관적으로 볼 수 있게 구성한다.",,moongyuhwang,,0,,0,0,0,1,2025-05-29T05:23:09.129Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dbc828248df9da07ee2,(평가) 문제 4 - 1,https://trello.com/c/QdfdEaKM/67-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-1,"# 평가 가이드

**[기본 확인]**

- kaggle 사이트([Spaceship Titanic | Kaggle](https://www.kaggle.com/competitions/spaceship-titanic/data ""‌""))에서 스페이스 타이타닉 데이터를 다운로드 했는지 확인한다.
- ‌

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다운로드 받은 파일 중에서 train.csv, test.csv 두 개의 파일을 읽어오는 코드를 확인한다.
  - DataFrame 객체의 기능을 이용해서 가져왔는지 확인한다.
- 두 개의 파일의 내용을 하나로 병합 했는지 확인한다.
  - 전체 데이터의 수량을 파악한다.
- 사람들이 다른 차원으로 전송되었는지 여부를 나타내는 Transported 항목과 가장 관련성이 높은 항목을 찾는다
  - 나이를 기준으로 10대, 20대, 30대, 40대, 50대, 60대, 70대 별로 Transported 여부를 하나의 그래프에서 출력해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- Destination 별로 승객들의 연령대 분포를 파악해서 시각화 한다.
  - 데이터 시각화에 사용하는 프레임웍을 이용해서 잘 시각화 했는지 확인한다.

# 보너스 과제

- Destination 별로 승객들의 연령대 분포를 파악해서 시각화 한다.",,,,0,,0,0,0,0,2025-05-04T10:13:52.576Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dbe2e347d7c862e0676,(평가) 문제 4 - 2,https://trello.com/c/PZtbTbGz/68-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-2,"# 평가 가이드

**[기본 확인]**

- 국가통계 포탈 ([https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=DT\_1IN1507&vw\_cd=MT\_ZTITLE&list\_id=A11\_2015\_1\_10\_10&scrId=&seqNo=&lang\_mode=ko&obj\_var\_id=&itm\_id=&conn\_path=MT\_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do](https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=DT_1IN1507&vw_cd=MT_ZTITLE&list_id=A11_2015_1_10_10&scrId=&seqNo=&lang_mode=ko&obj_var_id=&itm_id=&conn_path=MT_ZTITLE&path=%252FstatisticsList%252FstatisticsListIndex.do ""‌""))에 접속해 보았는지 확인한다.
- 2015년 이후의 최대한의 데이터를 출력시키도록 시점을 조정해서 데이터를 다운로드 받았는지 확인한다.
- 국가통계 포탈에서 제공하는 행렬 전환 기능을 사용해서 년도가 열이 아니라 행으로 보이게 내용을 조절했는지 확인한다.
- 조정된 데이터를 CSV 파일로 다운로드 했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다운로드 받은 CSV 파일을 DataFrame 객체로 읽어들인다.
  - DataFrame객체에서 제공하는 하는 기능을 사용해서 읽어들였는지 확인한다.
- 컬럼들 중에서 일반가구원을 제외한 나머지 컬럼들을 모두 삭제한다.
  - DEL 명령 혹은 DataFrame객체에서 제공하는 하는 기능을 사용해서 삭제 했는지 확인한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 남자 및 여자의 연도별 일반가구원 데이터 통계롤 최종적으로 출력한다.
  - 통계가 정확하게 출력되는지 확인한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 연령별 일반가구원 데이터 통계롤 최종적으로 출력한다.
  - 통계가 정확하게 출력되는지 확인한다.
- 2015년 이후로 자료가 제공되는 최대 기간의 남자 및 여자의 연령별 일반가구원 데이터 통계를 꺽은선 그래프로 표현한다.
  - 그래프가 정확하게 출력되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 연령별 그래프의 변화를 보고 인구의 변화 트렌드를 데이터를 기반으로 정리한다.
  - 최소 5가지 이상의 인사이트가 포함되어 있는지 확인한다.

# 보너스 과제

- 연령별 그래프의 변화를 보고 인구의 변화 트렌드를 데이터를 기반으로 정리한 리포터를 작성한다.",,,,0,,0,0,0,0,2025-05-04T10:14:13.726Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dc1fe421043e9d10b79,(평가) 문제 4 - 3,https://trello.com/c/1dcYQXBf/69-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-3,"# 평가 가이드

**[기본 확인]**

- 스마트 팜(Smart Parm)의 센서들을 구현해야 한다. 센서는 다음과 같은 항목들을 가지고 있는지 확인한다.
  - 온도: Temperature
  - 조도: Illuminance or Light Intensity
  - 습도: Humidity

**[프로그램 구현 확인]**

- 센서 값을 출력하는 클래스를 ParmSensor 클래스로 생성했는지 확인하고 아래 요건이 모두 잘 구현 되었는지 확인한다.
  - 센서의 고유이름을 속성으로 포함한다.
  - 온도, 조도, 습도 등을 속성으로 포함한다.
  - SetData()를 호출하면 랜덤으로 제한된 범위안의 값을 생성해서 온도, 조도, 습도의 속성에 채워 넣는다.
  - GetData()를 호출하면 온도, 조도, 습도의 값을 돌려준다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 각각의 센서 값은 다음 범위 안에서 랜덤으로 값을 생성해 낸다.
  - 주어진 범위 안에서 값이 랜덤으로 잘 생성되는지 확인한다.
- ParmSensor 클래스를 5개의 인스턴스로 만들어 각각 Parm-1~5까지 고유이름을 설정해 준다.
  - 인스턴스가 잘 생성되는지 확인한다.
- 멀티 쓰레드로 Parm1~5의 SetData(), GetData()를 10초 단위로 호출해 주고 그 결과를 화면에 다음과 같이 출력해 준다.
  - 멀티 쓰레드로 각각의 쓰레드가 잘 동작하는지 확인한다.
  - 모든 센서의 값이 골고루 다 출력되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 출력되는 내용들을 DataFrame 객체에 담고 5분 단위로 평균을 내서 별도로 출력한다.
  - DataFrame객체에 5분 단위의 데이터를 담아서 평균을 구하는 기능이 있는지 확인한다.

# 보너스 과제

- 출력되는 내용들을 DataFrame 객체에 담고 5분 단위로 평균을 내서 별도로 출력한다.",,,,0,,0,0,0,0,2025-05-04T10:14:31.501Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dc4ff52cf1f4c7006cc,(평가) 문제 4 - 4,https://trello.com/c/NLRwQ3AY/70-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-4,"# 평가 가이드

**[기본 확인]**

- MySQL을 사용할 수 있게 설치했는지 확인한다.
- MySQL Workbench를 설치해서 MySQL을 제어할 수 있는지 확인한다.

**[프로그램 구현 확인]**

- 데이터를 저장할 수 있게 테이블을 생성되어 있는지 그리고 테이블에는 다음과 같은 항목이 포함되어 있는지 확인한다.
  - 데이터 고유 ID (int)
  - 입력시간 (datatime)
  - 온도 (int)
  - 조도 (int)
  - 습도(int)
- 데이터 고유 ID는 자동으로 증가되는 컬럼으로 구성하고 Primary Key로 설정되어 있는지 확인한다.
- 테이블의 이름은 parm_data 로 정의되어 있는지 확인한다.
- 입력시간, 온도, 조도, 습도 등을 입력받아서 테이블에 입력하는 함수를 insert\_sensor\_data()라는 이름으로 구현 했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 문제 3에서 만든 쓰레드에서 센서의 데이터를 출력할 때 마다 insert\_sensor\_data()를 호출해서 테이블에 데이터를 입력한다.
  - 생성된 테이블에 데이터가 잘 입력되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 각 센서별로 데이터들의 입력 된 데이터의 수와 시간대별 평균 데이터를 구하시오
  - 데이터베이스에 COUNT, AVG 함수 등을 이용해서 쿼리를 해서 가져오는지 확인한다.

# 보너스 과제

- 각 센서별로 데이터들의 입력 된 데이터의 수와 시간대별 평균 데이터를 구하시오",,,,0,,0,0,0,0,2025-05-04T10:14:42.705Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dc76a50eb07d666859f,(평가) 문제 4 - 5,https://trello.com/c/VzUfVRI3/71-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-5,"# 평가 가이드

**[기본 확인]**

- Python 코드로 큐(Queue) 구조를 완성했는지 확인한다. 이때 FIFO(First In First Out) 구조로 만들어져 있는지 확인한다.

**[프로그램 구현 확인]**

- 이때 큐의 이름은 sensorQ로 지정되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 쓰레드에서 센서 데이터가 출력될 때 데이터베이스로 직접 데이터를 입력하지 않고 sensorQ에 저장하도록 한다.
  - sensorQ에 데이터가 잘 저장되는지 확인한다.
- 별도의 쓰레드에서 1초에 한번씩 큐의 내용을 확인하고 내용이 있으면 해당 내용을 가져와서 insert\_sensor\_data() 함수에 값을 넘겨주어서 테이블에 내용을 입력한다.
  - 1초 단위로 큐의 내용을 가져와서 내용을 데이터베이스의 테이블에 잘 입력하는지 확이한다.
- 이때 먼저 들어온 데이터 부터 순차적으로 잘 가져올 수 있는지 확인하다.
  - 순차적으로 잘 저장되어 있는지 확인한다.
- 테이블에 들어 있는 데이터를 가져오는 get\_sensor\_data() 함수를 만든다.
  - 데이터베이스의 데이터를 잘 가져오는지 확인한다.
- get\_sensor\_data() 함수를 통해서 가져온 값을 바탕으로 센서별로 시간별 온도의 평균 값을 출력하는 그래프를 그린다.
  - 그래프가 정확하게 잘 생성되는지 확인한다.

**[개념 확인 질문]**

- 큐의 개념과 언제 사용해야 하는지를 설명할 수 있다.

**[보너스 문제 확인]**

- 습도가 90%가 넘은 포인트 마다 빨간색으로 별도로 표시한다.
  - 빨간색으로 90%가 넘는 습도를 정확하게 표시하고 있는지 확인한다.

# 보너스 과제

- 습도가 90%가 넘은 포인트 마다 빨간색으로 별도로 표시한다.",,,,0,,0,0,0,0,2025-05-04T10:14:58.095Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dcaa263874a5f4d71cd,(평가) 문제 4 - 6,https://trello.com/c/3CCDTWHE/72-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-6,"# 평가 가이드

**[기본 확인]**

- Python 코드로 단순 연결 리스트 구조를 완성했는지 확인한다.

**[프로그램 구현 확인]**

- 단순 연결 리스트의 이름은 linkedlist로 했는지 확인한다.
- 단순 연결 리스트에 새로운 항목을 추가 할 수 있도록 추가 함수를 insert()로 추가했는지 확인한다.
- 단순 연결 리스트의 특정 항목을 삭제 할 수 있도록 삭제 함수를 delete()로 추가 되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 추가 함수의 경우 첫번째 항목으로도 추가 할 수 있어야 하고 마지막 항목으로도 추가가 가능해야 한다.
  - 추가 함수의 기능이 잘 동작하는지 확인한다.
- 추가 함수의 경우 리스트 중간에도 삽입이 가능해야 한다.
  - 추가 함수의 기능이 잘 동작하는지 확인한다.
- 단순 연결 리스트의 특정 항목을 삭제 할 수 있도록 삭제 함수를 delete()로 추가한다.
  - 삭제 기능이 잘 구현되어 있는지 확인한다.
- 준비가 되었으면 원하는 음악의 목록을 단순 연결 리스트에 입력하거나 삭제해 본다.
  - 음악 목록이 단순 연결 리스트에 의해서 관리가 가능한지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 처음부터 끝까지 순차적으로 가져오는 get_list() 함수를 추가해 본다.
  - get_list() 함수를 호출하고 목록을 잘 가져오는지 확인한다.

# 보너스 과제

- 처음부터 끝까지 순차적으로 가져오는 get_list() 함수를 추가해 본다.",,,,0,,0,0,0,0,2025-05-04T10:15:13.192Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dcd08d615a2a05e4ca6,(평가) 문제 4 - 7,https://trello.com/c/hlAH8lEo/73-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-7,"# 평가 가이드

**[기본 확인]**

- Python 코드로 원형 연결 리스트(Circular Linked List)를 구현 되어있는지 확인한다.

**[프로그램 구현 확인]**

- 이때 원형 연결 리스트의 이름은 circularlist로 정했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 원형 연결 리스트에 새로운 원소를 추가 할 수 있도록 추가 함수를 insert()로 추가한다.
  - Insert() 함수가 잘 추가 되어 있는지 확인한다.
  - 추가 함수는 임의의 위치에 추가 할 수 있도록 추가 위치를 특정하지 않는다.
- 원형 연결 리스트에서 특정 원소를 삭제하는 delete() 함수를 추가한다.
  - delete() 함수를 잘 구현했는지 확인한다.
- 원형 연결 리스트에서 다음 항목으로 넘어 가서 항목을 가져오는 get_next() 함수를 추가한다.
  - get_next() 함수를 잘 구현했는지 확인한다.
- 음악 제목들을 입력해서 검색하는 search() 함수를 추가하고 구현한다.
  - search() 함수를 잘 구현했는지 확인하고 동작을 확인한다.

**[개념 확인 질문]**

- 원형 연결 리스트에 대해서 설명한다.

**[보너스 문제 확인]**

- 노래 제목 말고 실제 mp3 등의 파일 목록을 입력하고 순차적으로 음악이 재생하도록 음악 플레이어를 만들어 보세요.
  - 음악을 재생하기 위한 부분들이 잘 구현 되었는지 확인한다.

# 보너스 과제

- 노래 제목 말고 실제 mp3 등의 파일 목록을 입력하고 순차적으로 음악이 재생하도록 음악 플레이어를 만들어 보세요.",,,,0,,0,0,0,0,2025-05-04T10:15:26.737Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dd0bacc1c007d59a471,(평가) 문제 4 - 8,https://trello.com/c/5xLBdkTs/74-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-8,"# 평가 가이드

**[기본 확인]**

- Python 코드로 이진 트리(Binary Search Tree) 구조를 완성했는지 확인한다.

**[프로그램 구현 확인]**

- 이때 이진 트리의 이름은 binarytree로 정의되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이진 트리에 새로운 원소를 추가 할 수 있도록 추가 함수를 insert()로 추가한다.
  - 추가 함수가 잘 구현되어 있고 실행되고 있는지 확인한다.
- 이진 트리에 원하는 값의 존재 유무를 확인 할 수 있도록 탐색 기능을 하는 함수를 find()로 추가한다.
  - 탐색 함수가 잘 구현되어 있고 실행되고 있는지 확인한다.
- 이진 트리에서 특정 원소를 삭제하는 delete() 함수를 추가한다.
  - 삭제 함수가 잘 구현되어 있고 실행되고 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 전체 내용을 BinarySearchTree 라는 이름의 클래스로 구성해서 재사용할 수 있게 한다.
  - 클래스로 잘 구현되었는지 확인한다.

# 보너스 과제

- 전체 내용을 BinarySearchTree 라는 이름의 클래스로 구성해서 재사용할 수 있게 한다.",,,,0,,0,0,0,0,2025-05-04T10:15:40.610Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173dd3b1c93dc3e4627b90,(평가) 문제 4 - 9,https://trello.com/c/9wVQAHr6/75-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-4-9,"# 평가 가이드

**[기본 확인]**

- Python 코드로 스택(Stack) 구조를 완성 했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 스택 구조에 내용을 입력할 수 있도록 추가하는 함수를 push() 함수를 만든다.
  - push() 함수가 잘 구현되었는지 확인한다.
  - push() 함수는 10개가 다 채워지면 추가되지 않고 경고 메시지만 알려주는 지 확인한다.
- 가장 마지막에 추가된 내용을 가져올 수 있게 pop() 함수를 만든다.
  - pop() 함수가 잘 구현 되었는지 확인한다.
  - pop() 함수의 경우 가져올 내용이 없으면 가져오지 않고 경고 메시지만 알려주는 지 확인한다.
- 전체 내용이 비였는지 확인하는 empty() 함수를 추가한다.
  - empty() 함수가 잘 구현 되었는지 확인한다.
- 마지막 내용을 삭제하지 않고 내용만 확인하는 peek() 함수를 추가한다.
  - peek() 함수가 잘 구현 되었는지 확인한다.
- 스택 구조가 완성되면 내용을 입력하고 가져와 본다. 단 이때 내용에는 고유한 번호등을 붙여서 스택의 구조가 정상적으로 잘 동작하는지 확인해야 한다.
  - 스택 구조가 잘 동작하는지 전체적으로 확인한다.

**[개념 확인 질문]**

- 스택 구조에 대해서 설명하고 어떤 용도로 주로 사용되는지 함께 설명한다.

**[보너스 문제 확인]**

- 스택의 구조를 클래스화 하고 스택의 상태를 시각화 해서 지금 상태를 직관적으로 볼 수 있게 구성한다.
  - 스택을 클래스로 잘 구현했는지 확인한다.

# 보너스 과제

- 스택의 구조를 클래스화 하고 스택의 상태를 시각화 해서 지금 상태를 직관적으로 볼 수 있게 구성한다.",,,,0,,0,0,0,0,2025-05-04T10:15:57.284Z,68173dafff07dffe81e96b32,과정 4,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174998598253e5eb143370,"(문제1) ""통신장비와 통신""",https://trello.com/c/hEPpPF9e/134-%EB%AC%B8%EC%A0%9C1-%ED%86%B5%EC%8B%A0%EC%9E%A5%EB%B9%84%EC%99%80-%ED%86%B5%EC%8B%A0,"학습목표: 소켓통신, TCP/IP

# 수행과제

- TCP/IP 소켓(Socket) 통신을 위한 서버쪽 코드를 작성한다.
- 소켓이 생성되면 ‘소캣 생성완료’ 라는 메시지를 출력해야 한다.
- 소켓의 호스트 이름을 가져온다.
- 소켓의 호스트 이름을 출력한다.
- 소켓의 통신 포트는 9999번으로 한다.
- 서버의 커넥션 개수는 3개로 제한 한다.
- 클라이언트가 연결되면 ‘클라이언트와 연결 되었습니다.’라는 메시지를 출력한다.
- 클라이언트에게도 연결과 동시에 ‘클라이언트와 연결 되었습니다.’라는 메시지를 출력한다.
- 클라이언트가 메시지를 입력하면 해당 메시지를 돌려보내 준다.(Echo)
- 클라이언트 앱은 별도의 파일로 작성한다.
- 클라이언트 앱에서 서버쪽에 연결할 수 있는 코드를 작성한다.
- 연결이 확인되면 메시지를 입력 받고 해당 메시지를 서버쪽에 발송한다.
- 서버쪽에서 같은 메시지를 회신 받으면 다시 메시지를 입력 할 수 있게 해준다.
- 메시지에 quit 를 입력하면 통신을 종료하고 연결을 끊는다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 소켓과 관련된 패키지는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 특정 키워드가 들어오면 대답하는 간단한 챗봇을 완성시킨다.
- 출력시 한글이 깨지는 현상이 있으면 encode를 조정해가면서 정상적으로 출력되게 고쳐봅니다.",,"davidlee49337730, moongyuhwang, user0eb36aad33715df064b819e01321c4d8",,0,,0,0,0,4,2025-07-01T04:08:02.698Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749a47c35dae73a81c5fc,"(문제2) ""통신장비에 채팅 기능 추가""",https://trello.com/c/kt7ugkFW/135-%EB%AC%B8%EC%A0%9C2-%ED%86%B5%EC%8B%A0%EC%9E%A5%EB%B9%84%EC%97%90-%EC%B1%84%ED%8C%85-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80,"학습목표: 소켓통신, TCP/IP

# 수행과제

- TCP/IP 소켓(Socket) 통신을 위한 서버쪽 코드를 작성한다.
- 여러 명과 동시에 통신을 하기 위해서 멀티 쓰레드를 이용한 소켓 통신을 작성해야 한다.
- 소켓에 접속하면 ‘~~님이 입장하셨습니다.’와 같은 메시지를 전체 접속자에게 전송해야 한다.
- 클라이언트에서 ‘/종료’라고 입력하면 연결이 끊어져야 합니다.
- 클라이언트에서 메시지가 입력하면 접속된 모든 클라이언트와 메시지가 공유 되어야 합니다.
- 출력되는 메시지에는 ‘사용자> 메시지’와 같이 누가 입력한 메시지인지 구별이 가능해야 합니다.
- 클라이언트를 3개 동시에 실행해서 채팅이 원활하게 가능한지 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 소켓과 관련된 패키지는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 특정 사람에게만 메시지를 보내기 위한 소위 말하는 귀속말 기능을 구현해 본다.",,moongyuhwang,,0,,0,0,0,2,2025-07-01T05:05:46.036Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749aedc9ba9dbf738ea46,"(문제3) ""나 혼자 보는 웹서버""",https://trello.com/c/MxNisYrc/136-%EB%AC%B8%EC%A0%9C3-%EB%82%98-%ED%98%BC%EC%9E%90-%EB%B3%B4%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B2%84,"학습목표: HTTP, Network

# 수행과제

- HTTP 통신을 담당할 서버를 만든다.
- 사용할 라이브러리는 http.server 안에 있는 객체들로 구축한다.
- 접속 할 포트번호는 8080 포트로 제공한다.
- 클라이언트 역할을 할 웹 브라우저로 접속을 했을 때 접속을 성공했다는 200번 메시지를 헤더 정보로 전달한다.
- 접속한 웹 브라우저 쪽으로 ‘<html><body><h1>It is my HTTP server</h1></body></html>’ 문자열을 돌려준다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- http 통신과 관련된 패키지는 사용할 수 있지만 Web 개발 프레임웍은 사용 할 수 없다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 메시지 이외에도 이미지 등을 출력 할 수 있도록 코드를 수정해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:07:04.909Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749bafd1dd19f56bd2dfc,"(문제4) ""조금 더 나은 웹서버""",https://trello.com/c/auYC07mT/137-%EB%AC%B8%EC%A0%9C4-%EC%A1%B0%EA%B8%88-%EB%8D%94-%EB%82%98%EC%9D%80-%EC%9B%B9%EC%84%9C%EB%B2%84,"학습목표: 웹통신, HTTP

# 수행과제

- HTTP 통신을 담당할 서버를 만든다.
- 사용할 라이브러리는 http.server 안에 있는 객체들로 구축한다.
- 접속 할 포트번호는 8080 포트로 제공한다.
- 클라이언트 역할을 할 웹 브라우저로 접속을 했을 때 접속을 성공했다는 200번 메시지를 헤더 정보로 전달한다.
- 웹 페이지인 index.html 파일을 작성하고 여기에 우주 해적에 대한 소개 내용을 담는다.
- index.html의 내용을 읽어서 접속한 사용자에게 전송한다.
- 사용자가 접속할 때 마다 다음과 같은 정보를 서버쪽에서 출력한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
- 웹 브라우저에서 정상적으로 접속되는지 확인하고 서버쪽에서 접속시간과 IP Address가 출력되는지 확인한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 소켓과 관련된 패키지는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 접속한 사용자의 ip address를 기반으로 위치 정보를 확인해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:12:38.492Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749cee91fc56d826d50b3,"(문제5) ""접속한 사용자 정보를 살펴보자""",https://trello.com/c/HwFjqgFK/138-%EB%AC%B8%EC%A0%9C5-%EC%A0%91%EC%86%8D%ED%95%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EB%B3%B4%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90,"학습목표: 웹통신, HTTP

# 수행과제

- 문제 4에서 까지 만든 웹 서버 코드에 추가적으로 기능을 완성한다.
- 사용자가 접속할 때 마다 다음과 같은 정보를 서버쪽에서 출력한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
  - 접속한 클라이언트의 User Agent 정보
- 사용자가 접속 할 때 마다 다음과 같은 정보를 webserver_user.log라는 이름의 CSV 파일로 저장한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
  - 접속한 클라이언트의 운영체계
  - 접속한 클라이언트의 웹 브라우저

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- HTTP와 관련된 패키지는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- webserver_user.log 파일을 읽어서 접속자들의 운영체계 및 웹 브라우저 별 통계를 내고 원 그래프로 시각화 한다.

#",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:16:00.063Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749dc6644a31cf82f944c,"(문제6) ""지구와 연결된 네트워크""",https://trello.com/c/y4kteqgm/139-%EB%AC%B8%EC%A0%9C6-%EC%A7%80%EA%B5%AC%EC%99%80-%EC%97%B0%EA%B2%B0%EB%90%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC,"학습목표: Web Crawling, requests

# 수행과제

- KBS [http://news.kbs.co.kr](http://news.kbs.co.kr ""‌"") 에 접속해 본다. 주요 헤드라인 뉴스들을 확인해 본다.
- 파이썬에서 제공되는 requests 객체를 이용해서 GET 방식의 통신으로 홈페이지의 내용을 받아와서 화면에 출력한다.
- 받아온 내용 KBS 홈페이지의 HTML 내용들을 확인해 보고 헤드라인 뉴스들이 있는 곳의 위치를 찾아본다.
- 기본적으로 HTML 페이지 안에는 HTML 테그 이외에도 CSS, JavaScript 등 많은 내용들이 함께 존재하고 있는데 이 중에서 헤드라인 뉴스의 제목들만 가져와서 List 객체에 저장한다.
- List 객체를 화면에 출력한다.
- 최종적으로 완성된 소스를 crawling_KBS.py로 저장한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- requests 는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- crawling_KBS.py를 하루에 한번 정기적으로 실행하기 위한 방법을 찾는데 코드를 사용하는 방법과 Windows의 기본 기능을 사용하는 방법 두 가지를 모두 찾아야 한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:21:41.751Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749e684812ba81c67d36f,"(문제7) ""정기적으로 배달되는 지구소식""",https://trello.com/c/gh1B411W/140-%EB%AC%B8%EC%A0%9C7-%EC%A0%95%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B0%B0%EB%8B%AC%EB%90%98%EB%8A%94-%EC%A7%80%EA%B5%AC%EC%86%8C%EC%8B%9D,"학습목표: Web Crawling, BeautifulSoup

# 수행과제

- KBS [http://news.kbs.co.kr](http://news.kbs.co.kr ""‌"") 에 접속해 본다. 주요 헤드라인 뉴스들을 확인해 본다.
- BeautifulSoup 패키지를 사용하기 위해서 먼저 설치해 준다.
- 설치가 끝나면 웹 브라우저에서 개발자 도구를 사용해서 가져와야 하는 헤드라인 뉴스의 고유한 값을 찾아낸다.
- BeautifulSoup의 주요 기능들을 사용해서 헤드라인 뉴스를 가져와서 List 객체에 저장한다.
- List 객체를 화면에 출력한다.
- 최종적으로 완성된 소스를 crawling_KBS.py로 저장한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- requests 는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- KBS 이외에 날씨 혹은 주식 가격 등 다른 사이트에서 필요한 정보를 가져오는 과정을 진행하고 코드로 작성한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:27:51.624Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681749f2c14e6191e5b37c01,"(문제8) ""로그인을 넘어""",https://trello.com/c/UDvCRiDe/141-%EB%AC%B8%EC%A0%9C8-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EB%84%98%EC%96%B4,"학습목표: Web Crawling, Selenium

# 수행과제

- 네이버 [http://naver.com](http://naver.com ""smartCard-inline"")  사이트에 접속해서 로그인 했을 때와 로그인 하지 않았을 때의 콘텐츠 차이를 확인한다. 로그인 했을 경우에만 보이는 콘텐츠를 미리 선정해 놓는다.
- 셀레니움 패키지를 시스템에 설치한다.
- 셀레니움을 사용할 수 있게 셀레니움 드라이버를 설치한다.
- 설치가 끝났으면 셀레니움을 사용해서 네이버 사이트에 로그인한다. 로그인이 가능하게 필요한 정보들을 입력하고 미리 선정된 콘텐츠를 찾아서 크롤링 관련 코드를 완성한다.
- 가져온 내용들을 리스트 객체에 담아두고 객체를 화면에 출력한다.
- 최종적으로 완성된 소스를 crawling_KBS.py로 저장한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- requests 는 사용 할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 네이버 메일에서 본인에게 온 메일의 제목들을 뽑는 코드를 작성해 보자.",,moongyuhwang,,0,,0,0,0,1,2025-06-07T03:52:54.258Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e82db69cd7094250643,(평가) 문제 5 - 1,https://trello.com/c/8tnCOxV8/76-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-1,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 소켓의 통신 포트는 999번으로 설정되었는지 확인한다.
- 서버의 커넥션 개수는 3개로 제한되어 있는지 확인한다.
- 소켓이 생성되면 ‘소캣 생성완료’ 라는 메시지를 출력되는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- TCP/IP 소켓(Socket) 통신을 위한 서버쪽 코드를 작성한다.
  - 소켓의 호스트 이름을 가져 올 수 있는지
  - 소켓의 호스트 이름을 가져올 수 있는지 확인한다.
  - 소켓의 호스트 이름을 출력 할 수 있는지 확인한다.
  - 클라이언트가 연결되면 ‘클라이언트와 연결 되었습니다.’라는 메시지를 출력하는지 확인한다.
  - 클라이언트에게도 연결과 동시에 ‘클라이언트와 연결 되었습니다.’라는 메시지를 출력하는지 확인한다.
  - 클라이언트가 메시지를 입력하면 해당 메시지를 돌려보내 주는지 확인한다.
- 클라이언트 앱은 별도의 파일로 작성한다.
  - 클라이언트 앱이 별도로 작성되었는지 확인한다.
  - 클라이언트 앱에서 서버쪽에 연결할 수 있는 코드를 작성되어 있는지 확인한다.
  - 연결이 확인되면 메시지를 입력 받고 해당 메시지를 서버쪽에 발송 할 수 있는지 확인한다.
  - 서버쪽에서 같은 메시지를 회신 받으면 다시 메시지를 입력 할 수 있게 구현되어 있는지 확인한다.
- 메시지에 quit 를 입력하면 통신을 종료하고 연결을 끊는다.
  - 통신이 잘 종료 되는지 확인한다.

**[개념 확인 질문]**

- 소켓의 개념과 HTTP 통신과의 차별점을 설명하시오

**[보너스 문제 확인]**

- 특정 키워드가 들어오면 대답하는 간단한 챗봇을 완성시킨다.
  - 정해진 규칙대로 대답이 잘 이루어지는지 확인한다.
- 출력시 한글이 깨지는 현상이 있으면 encode를 조정해가면서 정상적으로 출력되게 고쳐봅니다.
  - 한글이 깨지지 않으면 굳이 구현하지 않아도 된다.

# 보너스 과제

- 특정 키워드가 들어오면 대답하는 간단한 챗봇을 완성시킨다.
- 출력시 한글이 깨지는 현상이 있으면 encode를 조정해가면서 정상적으로 출력되게 고쳐봅니다.",,,,0,,0,0,0,0,2025-05-04T10:17:24.813Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e8b39cd4f427c569f73,(평가) 문제 5 - 2,https://trello.com/c/EhkyqyCd/77-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-2,"# 평가 가이드

- 여러 명과 동시에 통신을 하기 위해서 멀티 쓰레드를 이용한 소켓 통신 코드가 작성되어 있어야 한다.
- 소켓에 접속하면 ‘~~님이 입장하셨습니다.’와 같은 메시지를 전체 접속자에게 전송 할 수 있어야 한다.
- 클라이언트에서 ‘/종료’라고 입력하면 연결이 끊어져야 코드가 구현되어 있어야 한다. .
- 클라이언트에서 메시지가 입력하면 접속된 모든 클라이언트와 메시지가 공유 할 수 있어야 한다.
- 출력되는 메시지에는 ‘사용자> 메시지’와 같이 누가 입력한 메시지인지 구별이 가능해야 한다.
- 클라이언트를 3개 동시에 실행해서 채팅이 원활하게 가능한지 동작을 보여줄 수 있어야 한다.

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- TCP/IP 소켓(Socket) 통신을 위한 서버쪽 코드를 작성한다.
  - 여러 명과 동시에 통신을 하기 위해서 멀티 쓰레드를 이용한 소켓 통신을 작성되어 있는지 확인한다.
  - 소켓에 접속하면 ‘~~님이 입장하셨습니다.’와 같은 메시지를 전체 접속자에게 전송되는지 확인한다.
  - 클라이언트에서 ‘/종료’라고 입력하면 연결이 끊어지는지 확인한다.
  - 클라이언트에서 메시지가 입력하면 접속된 모든 클라이언트와 메시지가 공유 되는지 확인한다.
  - 출력되는 메시지에는 ‘사용자> 메시지’와 같이 누가 입력한 메시지인지 구별이 가능한지 확인한다.
- 클라이언트를 3개 동시에 실행해서 채팅이 원활하게 가능한지 확인해 본다.
  - 클라이언트 앱 3개를 동시에 접속해서 테스트 해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 특정 사람에게만 메시지를 보내기 위한 소위 말하는 귀속말 기능을 구현해 본다.
  - 클라이언트 앱 3개를 동시에 접속했을 때 특정인에게만 메시지가 전송 가능한지 확인한다.

# 보너스 과제

- 특정 사람에게만 메시지를 보내기 위한 소위 말하는 귀속말 기능을 구현해 본다.",,,,0,,0,0,0,0,2025-05-04T10:17:41.053Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e8cb9acdab377d79aab,(평가) 문제 5 - 3,https://trello.com/c/ORiuBQVQ/78-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-3,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- HTTP 통신을 담당할 서버를 만든다.
  - 사용할 라이브러리는 http.server 안에 있는 객체들로 구축되어 있는지 확인한다.
  - 접속 할 포트번호는 8080 포트로 구현 되었는지 확인한다.
  - 클라이언트 역할을 할 웹 브라우저로 접속을 했을 때 접속을 성공했다는 200번 메시지를 헤더 정보로 전달하는지 확인한다.
  - 접속한 웹 브라우저 쪽으로 ‘<html><body><h1>It is my HTTP server</h1></body></html>’ 문자열이 잘 전달되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 메시지 이외에도 이미지 등을 출력 할 수 있도록 코드를 수정해 본다.
  - 이미지가 잘 출력되는 지 확인한다.

# 보너스 과제

- 메시지 이외에도 이미지 등을 출력 할 수 있도록 코드를 수정해 본다.",,,,0,,0,0,0,0,2025-05-04T10:17:54.432Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e8e21cf24dd86678e5c,(평가) 문제 5 - 4,https://trello.com/c/DixwQKrU/79-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-4,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- HTTP 통신을 담당할 서버를 만든다.
  - 사용할 라이브러리는 http.server 안에 있는 객체들로 구성되었는지 확인한다.
  - 접속 할 포트번호는 8080 포트로 제공되고 있는지 확인한다.
  - 클라이언트 역할을 할 웹 브라우저로 접속을 했을 때 접속을 성공했다는 200번 메시지를 헤더 정보로 전달 되는지 확인한다.
- 웹 페이지인 index.html 파일을 작성하고 여기에 우주 해적에 대한 소개 내용을 담는다.
  - index.html의 내용을 열어서 확인한다.
- index.html의 내용을 읽어서 접속한 사용자에게 전송한다.
  - 웹 페이지의 내용이 잘 출력되는지 확인한다.
- 사용자가 접속할 때 마다 다음과 같은 정보를 서버쪽에서 출력한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
  - 위의 내용들이 터미널에 출력되는지 확인한다.

**[개념 확인 질문]**

- 웹 통신에서 HTTP user agent 정보에 대해서 설명할 수 있다.

**[보너스 문제 확인]**

- 접속한 사용자의 ip address를 기반으로 위치 정보를 확인해 본다.
  - ip address를 기반으로 위치를 확인 할 수 있는데 대략적인 위치만 확인해도 된다.

# 보너스 과제

- 접속한 사용자의 ip address를 기반으로 위치 정보를 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T10:18:07.311Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e91878283dc18dc3689,(평가) 문제 5 - 5,https://trello.com/c/HWezRL4L/80-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-5,"# 평가 가이드

**[기본 확인]**

- 문제 4에서 까지 만든 웹 서버 코드에 추가적으로 기능이 구현 되었는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 사용자가 접속할 때 마다 다음과 같은 정보를 서버쪽에서 출력이 되는지 확인한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
  - 접속한 클라이언트의 User Agent 정보
- 사용자가 접속 할 때 마다 다음과 같은 정보를 webserver_user.log라는 이름의 CSV 파일로 저장되어 있는지 확인한다.
  - 접속 시간
  - 접속한 클라이언트의 IP address
  - 접속한 클라이언트의 운영체계
  - 접속한 클라이언트의 웹 브라우저

**[개념 확인 질문]**

**[보너스 문제 확인]**

- webserver_user.log 파일을 읽어서 접속자들의 운영체계 및 웹 브라우저 별 통계를 내고 원 그래프로 시각화 한다.
  - 파이썬에서 제공하는 데이터처리 프레임웍과 시각화 도구들을 활용해서 잘 표현했는지 확인한다.

# 보너스 과제

- webserver_user.log 파일을 읽어서 접속자들의 운영체계 및 웹 브라우저 별 통계를 내고 원 그래프로 시각화 한다.",,,,0,,0,0,0,0,2025-05-04T10:18:21.919Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e932e976da7ee1dd5a4,(평가) 문제 5 - 6,https://trello.com/c/X4KZlSq3/81-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-6,"# 평가 가이드

**[기본 확인]**

- KBS [http://news.kbs.co.kr](http://news.kbs.co.kr ""‌"") 에 접속해 본다. 주요 헤드라인 뉴스들을 확인해 보았는지 확인한다.
- List 객체를 화면에 출력한다.

**[프로그램 구현 확인]**

- 최종적으로 완성된 소스를 crawling_KBS.py로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 파이썬에서 제공되는 requests 객체를 이용해서 GET 방식의 통신으로 홈페이지의 내용을 받아와서 화면에 출력한다.
  - 가져온 내용이 화면에 잘 출력되는지 확인한다.
- 받아온 내용 KBS 홈페이지의 HTML 내용들을 확인해 보고 헤드라인 뉴스들이 있는 곳의 위치를 찾아본다.
  - HTML을 잘 분석해 보고 웹 브라우저 등에서 제공하는 개발자 도구를 잘 활용하는 방안을 함께 확인해 준다.
- 기본적으로 HTML 페이지 안에는 HTML 테그 이외에도 CSS, JavaScript 등 많은 내용들이 함께 존재하고 있는데 이 중에서 헤드라인 뉴스의 제목들만 가져와서 List 객체에 저장한다.
  - 헤드라인 뉴스의 내용만 골라서 가져왔는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- crawling_KBS.py를 하루에 한번 정기적으로 실행하기 위한 방법을 찾는데 코드를 사용하는 방법과 Windows의 기본 기능을 사용하는 방법 두 가지를 모두 찾아야 한다.
  - 코드를 사용하는 방법으로 time 객체등을 사용하는 방법이 있을 수 있고 Windows에서 제공하는 스케줄러를 이용하는 방법도 함께 확인해 본다.

# 보너스 과제

- crawling_KBS.py를 하루에 한번 정기적으로 실행하기 위한 방법을 찾는데 코드를 사용하는 방법과 Windows의 기본 기능을 사용하는 방법 두 가지를 모두 찾아야 한다.",,,,0,,0,0,0,0,2025-05-04T10:18:39.663Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e9676d55791f2734a8f,(평가) 문제 5 - 7,https://trello.com/c/ciCudVyG/82-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-7,"# 평가 가이드

**[기본 확인]**

- KBS [http://news.kbs.co.kr](http://news.kbs.co.kr ""‌"") 에 접속해 본다. 주요 헤드라인 뉴스들을 확인해 보았는지 체크한다.
- BeautifulSoup 패키지를 사용하기 위해서 먼저 설치 되어있는지 확인한다.
- 웹 브라우저에서 개발자 도구를 사용해서 가져와야 하는 헤드라인 뉴스 부분의 고유한 값을 찾아낸다.

**[프로그램 구현 확인]**

- 최종적으로 완성된 소스를 crawling_KBS.py로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- BeautifulSoup의 주요 기능들을 사용해서 헤드라인 뉴스를 가져와서 List 객체에 저장한다.
  - 헤드라인 뉴스가 List 객체에 잘 저장되어 있는지 확인한다.
  - List 객체를 화면에 출력한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- KBS 이외에 날씨 혹은 주식 가격 등 다른 사이트에서 필요한 정보를 가져오는 과정을 진행하고 코드로 작성한다.
  - 전체 과정을 설명할 수 있는지 확인한다.

# 보너스 과제

- KBS 이외에 날씨 혹은 주식 가격 등 다른 사이트에서 필요한 정보를 가져오는 과정을 진행하고 코드로 작성한다.",,,,0,,0,0,0,0,2025-05-04T10:18:51.112Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173e9d2b95243672c7768d,(평가) 문제 5 - 8,https://trello.com/c/nKCz5dZt/83-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-5-8,"# 평가 가이드

**[기본 확인]**

- 네이버 [http://naver.com](http://naver.com ""smartCard-inline"")  사이트에 접속해서 로그인 했을 때와 로그인 하지 않았을 때의 콘텐츠 차이를 확인한다. 로그인 했을 경우에만 보이는 콘텐츠를 확인했는지 체크한다.
- 셀레니움 패키지를 시스템에 설치했는지 확인한다.
- 셀레니움을 사용할 수 있게 셀레니움 드라이버를 설치했는지 확인한다.

**[프로그램 구현 확인]**

- 최종적으로 완성된 소스를 crawling_KBS.py로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 설치가 끝났으면 셀레니움을 사용해서 네이버 사이트에 로그인한다. 로그인이 가능하게 필요한 정보들을 입력하고 미리 선정된 콘텐츠를 찾아서 크롤링 관련 코드를 완성한다.
  - 선정된 콘텐츠를 가져오는지 확인한다.
  - 가져온 내용들을 리스트 객체에 담아두고 객체를 화면에 출력한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 네이버 메일에서 본인에게 온 메일의 제목들을 뽑는 코드를 작성해 보자.
  - 메일 제목들을 잘 가져오는지 확인한다.

# 보너스 과제

- 네이버 메일에서 본인에게 온 메일의 제목들을 뽑는 코드를 작성해 보자.",,,,0,,0,0,0,0,2025-05-04T10:19:04.708Z,68173e709909c8e535e0e6c6,과정 5,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174b825d9837b4c33ebe54,(문제1) SOS,https://trello.com/c/ZCzbDCkW/142-%EB%AC%B8%EC%A0%9C1-sos,"학습목표: 메일, SMTP

# 수행과제

- 본인의 Gmail 계정을 확인한다.
- SMTP 프로토콜로 메일을 보내기 위해서 기본적으로 사용하는 포트 넘버를 확인한다.
- SMTP 를 지원하는 Python 패키지나 라이브러리를 확인해서 선택하고 설치한다.
- 보내는 사람의 지메일 계정과 받는 사람의 이메일 계정등을 설정한다.
- 보내는 사람의 지메일 계정의 비밀번호 등을 설정한다.
- SMTP 서버에 로그인한 다음 메일을 보낸다.
- 메일 보내는 과정에서 발생 할 수 있는 예외를 처리하는 코드를 작성한다.
- 완성된 코드를 sendmail.py로 저장한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 메일과 관련된 패키지는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 메일을 보낼 때 첨부 파일을 포함해서 메일을 보낼 수 있게 코드를 수정한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-09T05:29:53.856Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174b909dc751ac5283652e,(문제2) 감동의 메세지,https://trello.com/c/25VDz6KK/143-%EB%AC%B8%EC%A0%9C2-%EA%B0%90%EB%8F%99%EC%9D%98-%EB%A9%94%EC%84%B8%EC%A7%80,"학습목표: 메일, SMTP

# 수행과제

- 문제1에서 만들어진 코드 HTML 형식으로 메일을 보낼 수 있게 코드를 수정한다.
- 메일을 보낼 대상을 CSV 형식의 파일로 파일의 이름은 mail\_target\_list.csv 이다.
- CSV 파일의 형식은 다음과 같다. 이름, 이메일
- CSV 파일을 읽어서 명단에 있는 사람들에게 전체 메일을 보낸다.
- 받는 사람에 여러명을 열거하는 방법과 한번에 한 명씩 메일을 반복적으로 보내는 방법 둘 다 시도해 보고 좋은 방법을 선택한다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 메일, CSV를 다루기 위한 패키지는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 국내 포탈인 네이버를 통해서 메일을 보낼 수 있는 방법도 시도해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-09T08:21:35.046Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174ba3e024b7360c70b04c,(문제3) 중요한 메일만 골라내기,https://trello.com/c/AGiurJsj/144-%EB%AC%B8%EC%A0%9C3-%EC%A4%91%EC%9A%94%ED%95%9C-%EB%A9%94%EC%9D%BC%EB%A7%8C-%EA%B3%A8%EB%9D%BC%EB%82%B4%EA%B8%B0,"학습목표: 메일, IMAP

# 수행과제

- 지메일에서 메일을 가져오는 코드를 작성한다.
- 가져온 메일 중에서 제목에 [Goheung]이 포함된 메일의 목록을 뽑는다.
- [Goheung]이 포함된 메일 제목들을 high\_priority\_mail_titles.csv 로 저장한다.
- CSV 파일을 읽어서 화면에 출력한다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 메일, CSV를 다루기 위한 패키지는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 제목에 지메일에서 [Goheung]이 포함된 이메일에서 메일의 제목 이외에도 보낸 사람, 내용등도 함께 저장하고 볼 수 있게 코드를 수정한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-09T08:28:38.213Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174baecff67cd2016b79c3,(문제4) 이제는 실시간 아닌 실시간 메세지,https://trello.com/c/dgrv0jA2/145-%EB%AC%B8%EC%A0%9C4-%EC%9D%B4%EC%A0%9C%EB%8A%94-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%95%84%EB%8B%8C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EB%A9%94%EC%84%B8%EC%A7%80,"학습목표: 메일, Slack

# 수행과제

- 슬랙에 접속에서 사용할 새 워크 스페이스를 생성한다.
- api.slack.com에 접속해서 새로운 앱을 생성한다.
- Income Webhooks 기능을 On으로 바꾸어서 웹 통신이 가능하게 열어준다.
- Webhooks에 접근 할 수 있는 주소를 확인해 둔다.
- 위에서 선택한 새 워크 스페이스를 앱에서 사용할 수 있게 권한을 준다.
- Python 코드에서 Webhooks을 통해서 슬렉으로 메시지를 보내는 코드를 작성한다.
- 슬렉에서 메시지가 잘 도착하는지 확인해 본다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 웹을 다루는 requests 라이브러리는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 문제3에서 작성한 코드에서 제목에 지메일에서 [Goheung]이 포함된 이메일이 도착하면 보낸 사람과 메일 제목 그리고 시간 등의 정보를 슬렉을 통해서 알려 준다.",,moongyuhwang,,0,,0,0,0,1,2025-06-09T09:10:16.886Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174bbdc40998183c482e02,(문제5) 또 다른 메신저,https://trello.com/c/yDGK0Fjm/146-%EB%AC%B8%EC%A0%9C5-%EB%98%90-%EB%8B%A4%EB%A5%B8-%EB%A9%94%EC%8B%A0%EC%A0%80,"학습목표: 텔레그램

# 수행과제

- 텔레그램 앱을 설치하고 가입을 한다.
- python\_telegram\_bot 패키지를 설치한다.
- Bot Father를 통해서 새로운 봇을 생성한다.
- API 키를 확인해서 복사해 둔다.
- python\_telegram\_bot을 이용해서 메시지를 주고 받을 수 있는 코드를 작성한다.
- 사용자가 입력한 메시지를 가져오는 코드를 작성한다.
- 텔레그램에서 메시지가 주고 받은 내용을 확인한다.
- 완성되면 telegram_bot.py 파일로 저장한다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- python\_telegram\_bot 패키지를 사용하는 허용된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 사용자가 ‘안녕’ 이라고 하면 ‘응 안녕’과 같이 자동으로 응답하는 기능을 추가한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-09T09:37:09.960Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174bc4c40998183c483b4f,(문제6) 여론조사,https://trello.com/c/T7NgjI2K/147-%EB%AC%B8%EC%A0%9C6-%EC%97%AC%EB%A1%A0%EC%A1%B0%EC%82%AC,"학습목표: Youtube

# 수행과제

- Google API Project를 시작한다.
- Youtube Data API를 활성화 시킨다.
- API를 사용할 수 있게 API 키를 발급받는다.
- 유튜브 서치와 관련된 API를 호출해서 우주라는 키워드로 검색하는 코드를 작성한다.
- 우주라는 키워드로 검색된 목록을 가져와서 제목을 정리해서 보여준다.
- 여기까지 작성된 파일을 youtube_search.py 파일로 저장한다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 웹을 다루는 requests 라이브러리는 사용 가능하다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 검색된 동영상 리스트의 개별 동영상에 있는 댓글을 뽑아와서 모두 출력해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-10T05:35:35.731Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174bca5d9837b4c33f9cac,(문제7) 나의 소소한 이야기,https://trello.com/c/cQMW6VbH/148-%EB%AC%B8%EC%A0%9C7-%EB%82%98%EC%9D%98-%EC%86%8C%EC%86%8C%ED%95%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0,"학습목표: 웹, 플라스크

# 수행과제

- Flask를 이용해서 웹 페이지를 만들기 위해서 Flask를 먼저 설치한다.
- app.py라는 이름으로 Flask 코딩을 시작한다.
- 홈 화면으로 접속하면 ‘Hello Mars’ 라는 메시지가 나온다.
- /about 으로 접속하는 페이지에서는 이 홈페이지에 대한 소개글 ’이 홈페이지는 한송희 박사의 화성 생활을 소개하는 페이지 입니다.’ 이 출력된다.
- /now 로 접속하면 지금 어떤 것들을 하고 있는지 메시지로 보여 준다. ’식물연구, 식물 경장, 코딩 등등…’
- /parm 으로 접속하면 키우고 있는 작물들에 대한 소개가 나타난다. ’질경이, 쌀, 보리, 민들레 등등’

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- 웹을 다루는 Flask는 사용해야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 단순한 메시지가 아니라 이미 작성되어 있는 아래 html을 읽어서 화면에 보여준다. 이때 단순히 파일을 읽어서 출력하는 방식이 아닌 Flask의 view 를 이용해서 보여 주어야 한다.
  - home.html
  - about.html
  - now.html
  - parm.html",,moongyuhwang,,0,,0,0,0,1,2025-06-10T05:53:24.666Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174bd295d8da50ac78d907,(문제8) 응원메세지 담아보기,https://trello.com/c/No2rrI0x/149-%EB%AC%B8%EC%A0%9C8-%EC%9D%91%EC%9B%90%EB%A9%94%EC%84%B8%EC%A7%80-%EB%8B%B4%EC%95%84%EB%B3%B4%EA%B8%B0,"학습목표: Flask

# 수행과제

- Flask를 사용해서 새로운 페이지인 /guestboard 로 라우팅 할 수 있게 문제 7에서 만든 [app.py](http://app.py ""‌"") 파일을 수정한다.
- 새로운 페이지에서 ‘방명록’이라는 제목을 달아준다.
- 이름과 내용을 입력할 수 있는 폼(Form)을 추가한다.
- 사용자가 이름과 내용을 입력하면 guestboard.csv 파일에 내용을 추가한다. 추가하는 내용은 다음과 같다.
  - 시간
  - 이름
  - 내용
- 전체 내용중 상위 10개를 뽑아서 이름과 내용을 입력할 폼 아래에 보여준다.

# 제약 사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Flask를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 입력하는 폼에서 ‘<’, ‘>’와 같이 HTML을 직접 사용하려고 하는 경우 이를 막는 기능을 추가하세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-10T07:33:48.514Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f38e148264d1b533598,(평가) 문제 6 - 1,https://trello.com/c/3LqMxYit/84-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-1,"# 평가 가이드

**[기본 확인]**

- 본인의 Gmail 계정을 확인되어 있는지 체크한다.
- SMTP 프로토콜로 메일을 보내기 위해서 기본적으로 사용하는 포트 넘버가 확인 되어 있는지 체크한다.
- SMTP 를 지원하는 Python 패키지나 라이브러리를 확인해서 선택하고 설치 되어 있는지 확인한다.

**[프로그램 구현 확인]**

- 완성된 코드를 sendmail.py로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 아래와 같은 부분이 코드로 구현되어 있는지 확인한다.
  - 보내는 사람의 지메일 계정과 받는 사람의 이메일 계정등을 설정
  - 보내는 사람의 지메일 계정의 비밀번호 등을 설정
  - SMTP 서버에 로그인한 다음 메일 송신 가능 여부
- 메일 보내는 과정에서 발생 할 수 있는 예외를 처리하는 코드를 작성한다.
  - 예외를 잘 처리 할 수 있는 충분한 코드가 작성되어 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 메일을 보낼 때 첨부 파일을 포함해서 메일을 보낼 수 있게 코드를 수정한다.
  - 첨부 파일을 보낼 수 있는 코드를 확인하고 첨부 파일이 송신 되는지 확인한다.

# 보너스 과제

- 메일을 보낼 때 첨부 파일을 포함해서 메일을 보낼 수 있게 코드를 수정한다.",,,,0,,0,0,0,0,2025-05-04T10:20:17.364Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f3b699e40e58463a106,(평가) 문제 6 - 2,https://trello.com/c/2p77ziDj/85-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-2,"# 평가 가이드

**[기본 확인]**

- 문제1에서 만들어진 코드를 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 문제 1에서 만들어진 코드를 HTML 형식으로 메일을 보낼 수 있게 코드를 수정한다.
  - 메일을 보낼 대상을 CSV 형식의 파일로 작성했는지 확인한다.
  - 메일을 보낼 대상의 목록이 들어 있는 파일의 이름이 mail\_target\_list.csv 로 작성되었는지 확인한다.
  - CSV 파일의 형식은 다음과 같이 작성되었는지 확인한다. 이름, 이메일
  - CSV 파일을 읽어서 명단에 있는 사람들에게 전체 메일을 보낼 수 있는 방법이 있는지 확인한다.
- 받는 사람에 여러명을 열거하는 방법과 한번에 한 명씩 메일을 반복적으로 보내는 방법 둘 다 시도해 보고 좋은 방법을 선택한다.
  - 두 방법 사이의 장단점을 비교 설명할 수 있다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 국내 포탈인 네이버를 통해서 메일을 보낼 수 있는 방법도 시도해 본다.
  - 네이버를 통해서도 메일을 주고 받을 수 있는지 확인한다.

# 보너스 과제

- 국내 포탈인 네이버를 통해서 메일을 보낼 수 있는 방법도 시도해 본다.",,,,0,,0,0,0,0,2025-05-04T10:20:29.733Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f404df4fcf192548e97,(평가) 문제 6 - 3,https://trello.com/c/EOGpOE3j/86-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-3,"# 평가 가이드

**[기본 확인]**

- 지메일에서 메일을 가져오는 코드가 작성되어 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 가져온 메일 중에서 제목에 [Goheung]이 포함된 메일의 목록을 뽑는다.
  - [Goheung]이 있는 메일만 잘 가져와지는 지 확인한다.
  - 테스트를 위해서 [Goheung]을 제목에 넣어서 사전에 메일을 5건 이상 발송해 둔다.
- [Goheung]이 포함된 메일 제목들을 high\_priority\_mail_titles.csv 로 저장한다.
  - 메일 제목들이 잘 저장되어 있는지 CSV 파일을 열어서 확인한다.
- CSV 파일을 읽어서 화면에 출력한다.
  - CSV 파일의 내용이 화면에 잘 출력되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 제목에 지메일에서 [Goheung]이 포함된 이메일에서 메일의 제목 이외에도 보낸 사람, 내용등도 함께 저장하고 볼 수 있게 코드를 수정한다.
  - 추가 정보들이 잘 저장되고 출력될 수 있는지 확인한다.

# 보너스 과제

- 제목에 지메일에서 [Goheung]이 포함된 이메일에서 메일의 제목 이외에도 보낸 사람, 내용등도 함께 저장하고 볼 수 있게 코드를 수정한다.",,,,0,,0,0,0,0,2025-05-04T10:20:41.470Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f43076d9bfc66bbcc8e,(평가) 문제 6 - 4,https://trello.com/c/t5KrB7Ox/87-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-4,"# 평가 가이드

**[기본 확인]**

- 슬랙에 접속에서 사용할 새 워크 스페이스를 생성되어 있는지 확인한다.
- api.slack.com에 접속해서 새로운 앱이 생성되어 있는지 확인한다.
- Income Webhooks 기능을 On으로 바꾸어서 웹 통신이 가능하게 열어져 있는지 확인한다.
- Webhooks에 접근 할 수 있는 주소를 확인 되어있는지 체크한다.
- 위에서 선택한 새 워크 스페이스를 앱에서 사용할 수 있게 권한이 부여 되어 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- Python 코드에서 Webhooks을 통해서 슬렉으로 메시지를 보내는 코드를 작성한다.
  - 보낼 메시지를 슬렉을 통해서 발송하는 코드가 잘 작성되어 있는지 확인한다.
- 슬렉에서 메시지가 잘 도착하는지 확인해 본다.
  - 슬렉을 실행 시키고 방금 보낸 메시지가 잘 발송되는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 문제3에서 작성한 코드에서 제목에 지메일에서 [Goheung]이 포함된 이메일이 도착하면 보낸 사람과 메일 제목 그리고 시간 등의 정보를 슬렉을 통해서 알려 준다.
  - 슬렉에서 주요 메일이 확인 가능한지 체크한다.

# 보너스 과제

- 문제3에서 작성한 코드에서 제목에 지메일에서 [Goheung]이 포함된 이메일이 도착하면 보낸 사람과 메일 제목 그리고 시간 등의 정보를 슬렉을 통해서 알려 준다.",,,,0,,0,0,0,0,2025-05-04T10:20:53.281Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f48709ef73aa9f4c2e1,(평가) 문제 6 - 5,https://trello.com/c/L5Rpn6bN/88-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-5,"# 평가 가이드

**[기본 확인]**

- 텔레그램 앱을 설치하고 가입이 되어 있는지 확인한다.
- python\_telegram\_bot 패키지가 설치 되어 있는지 확인한다.
- Bot Father를 통해서 새로운 봇이 생성되어 있는지 확이한다.
- API 키를 확인해서 복사 되어 있는지 확인한다.

**[프로그램 구현 확인]**

- 완성되면 telegram_bot.py 파일로 저장 되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- python\_telegram\_bot을 이용해서 메시지를 주고 받을 수 있는 코드를 작성한다.
  - 사용자가 입력한 메시지를 가져오는 코드를 작성되어 있는지 확인한다.
  - 사용자에게 메세지를 전달하는 코드가 작성되어 있는지 확인한다.
  - 텔레그램에서 메시지를 잘 주고 받을 수 있는지 확인 해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 사용자가 ‘안녕’ 이라고 하면 ‘응 안녕’과 같이 자동으로 응답하는 기능을 추가한다.
  - 챗봇과 비슷하게 동작하는지 확인해 본다.

# 보너스 과제

- 사용자가 ‘안녕’ 이라고 하면 ‘응 안녕’과 같이 자동으로 응답하는 기능을 추가한다.",,,,0,,0,0,0,0,2025-05-04T10:21:06.551Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f4ae1af44d8ddf0338f,(평가) 문제 6 - 6,https://trello.com/c/DEGor2P2/89-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-6,"# 평가 가이드

**[기본 확인]**

- Google API Project를 시작했는지 확인한다.
- Youtube Data API를 활성화 시켰는지 확인한다.
- API를 사용할 수 있게 API 키를 발급 받았는지 확인한다.

**[프로그램 구현 확인]**

- 여기까지 작성된 파일을 youtube_search.py 파일로 저장되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 유튜브 서치와 관련된 API를 호출해서 우주라는 키워드로 검색하는 코드를 작성한다.
  - API를 정확하게 잘 호출하고 있는지 검색은 잘 되는지 확인한다.
- 우주라는 키워드로 검색된 목록을 가져와서 제목을 정리해서 보여준다.
  - 제목을 리스트업 해서 정리해서 출력할 수 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 검색된 동영상 리스트의 개별 동영상에 있는 댓글을 뽑아와서 모두 출력해 본다.
  - 댓글을 가져올 수 있는 방법들이 적절한지 그리고 관련 코드와 동작을 확인한다.

# 보너스 과제

- 검색된 동영상 리스트의 개별 동영상에 있는 댓글을 뽑아와서 모두 출력해 본다.",,,,0,,0,0,0,0,2025-05-04T10:21:16.657Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f4de93c2b2b15d4efb5,(평가) 문제 6 - 7,https://trello.com/c/MD0HxDrG/90-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-7,"# 평가 가이드

**[기본 확인]**

- Flask를 이용해서 웹 페이지를 만들기 위해서 Flask를 먼저 설치했는지 확인한다.

**[프로그램 구현 확인]**

- app.py라는 이름으로 Flask 코드가 작성되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같이 웹 페이지가 동작해야 한다.
  - 홈 화면으로 접속하면 ‘Hello Mars’ 라는 메시지가 출력되는지 확인한다.
  - /about 으로 접속하는 페이지에서는 이 홈페이지에 대한 소개글 ’이 홈페이지는 한송희 박사의 화성 생활을 소개하는 페이지 입니다.’ 이 출력된다.
  - /now 로 접속하면 지금 어떤 것들을 하고 있는지 메시지로 보여 준다. ’식물연구, 식물 경장, 코딩 등등…’
  - /parm 으로 접속하면 키우고 있는 작물들에 대한 소개가 나타난다. ’질경이, 쌀, 보리, 민들레 등등’

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 단순한 메시지가 아니라 이미 작성되어 있는 아래 html을 읽어서 화면에 보여준다. 이때 단순히 파일을 읽어서 출력하는 방식이 아닌 Flask의 view 를 이용해서 보여 주어야 한다.
  - 각각의 페이지가 잘 로드되어서 화면에 출력되는지 확인한다.

# 보너스 과제

- 단순한 메시지가 아니라 이미 작성되어 있는 아래 html을 읽어서 화면에 보여준다. 이때 단순히 파일을 읽어서 출력하는 방식이 아닌 Flask의 view 를 이용해서 보여 주어야 한다.
  - home.html
  - about.html
  - now.html
  - parm.html",,,,0,,0,0,0,0,2025-05-04T10:21:31.100Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173f52f928c32c0e98b480,(평가) 문제 6 - 8,https://trello.com/c/ZzrEQfxD/91-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-6-8,"# 평가 가이드

**[기본 확인]**

- Flask를 사용해서 새로운 페이지인 /guestboard 로 라우팅 할 수 있게 문제 7에서 만든 [app.py](http://app.py ""‌"") 파일을 수정되었는지 확인한다.
- 새로운 페이지인 /guestboard에서 ‘방명록’이라는 제목이 설정되어 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이름과 내용을 입력할 수 있는 폼(Form)을 추가한다.
  - 폼을 통해서 필요한 내용들을 입력할 수 있게 준비되어 있는지 확인한다.
- 사용자가 이름과 내용을 입력하면 guestboard.csv 파일에 내용을 추가한다. 추가하는 내용은 다음과 같다.
  - 시간
  - 이름
  - 내용
  - 사용자가 이름과 내용을 입력하면 시간, 이름 , 내용을 지정된 CSV 파일에 기록 되는지 확인한다.
- 전체 내용중 상위 10개를 뽑아서 이름과 내용을 입력할 폼 아래에 보여준다.
  - 저장되어 있는 CSV의 내용 중에서 상위 10개를 뽑아서 출력 할 수 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 입력하는 폼에서 ‘<’, ‘>’와 같이 HTML을 직접 사용하려고 하는 경우 이를 막는 기능을 추가하세요.
  - HTML 태그들을 사용 할 수 없게 잘 막았는지 확인한다.

# 보너스 과제

- 입력하는 폼에서 ‘<’, ‘>’와 같이 HTML을 직접 사용하려고 하는 경우 이를 막는 기능을 추가하세요.",,,,0,,0,0,0,0,2025-05-04T10:21:42.642Z,68173f26203dccff0f6288cd,과정 6,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174da23eaaff7b1a4f9fc9,(문제1) 또 새로운 프로젝트,https://trello.com/c/sIHXT3ex/150-%EB%AC%B8%EC%A0%9C1-%EB%98%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8,"# 수행과제

- Fast API를 설치한다.
- Fast API를 실행 할 수 있게 venv를 이용해서 가상 환경을 만들고 개발한다.
- 웹 환경으로는 uvicorn 을 사용해서 웹 환경을 제공한다.
- 작업을 시작할 파일을 todo.py로 만든다.
- 리스트 객체를 todo_list라는 이름으로 추가한다.
- APIRouter 클래스를 이용해서 두 개의 라우트를 추가한다.
  - add_todo ()
    - todo_list에 새로운 항목을 추가한다.
    - POST 방식이다.
  - retrieve_todo()
    - todo_list를 가져온다.
    - GET 방식이다.
  - 둘 다 입출력은 Dict 타입으로 한다.
- 두 개의 Fast API 메소드가 잘 실행되는지 curl을 이용해서 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 입력되는 Dict 타입이 빈값이면 경고를 돌려준다.",,moongyuhwang,,0,,0,0,0,1,2025-06-21T02:41:31.499Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174dae9f862b485696614c,(문제2) 정확한 To-DO,https://trello.com/c/dljSGGF1/151-%EB%AC%B8%EC%A0%9C2-%EC%A0%95%ED%99%95%ED%95%9C-to-do,"# 수행과제

- 문제 1에서 코딩했던 todo.py에 유효성 검사를 하기 위한 pydantic 라이브러리를 추가한다.
- pydantic을 사용해서 Todo 클래스를 생성한다.
  - 클래스의 이름은 Todo로 정한다.
  - BaseModel에서 상속을 받는다.
  - 맴버는 다음과 같이 두 개이다.
    - id: int,
    - item: str
- 라우트의 입출력 형식을 Dict 타입에서 방금 추가한 Todo 클래스로 변경한다.
- 다시 curl 을 이용해서 내용이 없는 Dict 타입을 add_todo() 메소드에게 파라메터로 호출해 보고 오류 메시지가 반환 되는지 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- curl 이외에 postman을 사용해서 호출이 잘 되는지 테스트하고 결과를 첨부한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-21T02:56:40.948Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174dca9cfa72c9a109b1af,(문제3) 완전히 작동하는 To-Do,https://trello.com/c/L6cV4dEU/152-%EB%AC%B8%EC%A0%9C3-%EC%99%84%EC%A0%84%ED%9E%88-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-to-do,"# 수행과제

- 개별 조회 기능을 get\_single\_todo()라는 이름으로 추가한다.
- 개별 조회를 위해서는 경로 매개변수로 아이디를 넘길 수 있게 해준다.
- 개별 조회는 GET을 이용해서 구현한다.
- 수정 기능을 update_todo()라는 이름으로 추가한다.
- 수정을 위해서는 경로 매개변수로 아이디를 넘길 수 있게한다.
- 수정 기능은 PUT을 이용해서 구현한다.
- 수정 기능을 위한 모델을 따로 추가한다. 해당 내용은 model.py에 추가한다.
- 모델은 TodoItem이라는 이름으로 추가하고 BaseModel을 상속받아 구현한다.
- 삭제 기능을 delete\_single\_todo()라는 이름으로 추가한다.
- 삭제 하려는 아이디를 경로 매개변수로 넘길 수 있게 구성한다.
- 삭제 기능은 DELETE를 이용해서 구현한다.
- 추가한 개별 조회, 수정, 삭제 기능을 curl 을 이용해서 동작을 확인한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 구현한 기능들을 호출해서 동작하는 간단한 클라이언트 앱을 구현해 보세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-21T03:05:29.277Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174dd4527d5c4f3108423a,(문제4) 알수없는 오류,https://trello.com/c/Udz55TNc/153-%EB%AC%B8%EC%A0%9C4-%EC%95%8C%EC%88%98%EC%97%86%EB%8A%94-%EC%98%A4%EB%A5%98,"# 수행과제

- todo.py의 기존에 작성된 모든 기능에 오류를 처리하기 위한 코드를 모두 입력한다.
- 오류를 처리하기 위해서는 HTTPException 클래스를 사용해서 오류를 처리한다.
- 오류시에 클라이언트에 다음과 같은 내용을 전달할 수 있게 한다.
  - status_code: 예외처리시 반환할 상태코드 ex) 404, 500, 201 등등
  - detail: 클라이언트에게 전달할 메시지
  - headers: 헤더를 요구하는 응답을 위한 선택적 인수
- 모든 기능에 성공적으로 명령이 수행 되었을 경우 status_code가 201이 리턴 되게 수정한다.
- 오류 처리가 잘 동작하는지 임의의 오류를 만들어서 테스트 해본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 결과를 돌려 줄 때 사용하는 응답 모델을 작성하고 이를 사용할 수 있게 retrieve_todo() 메소드를 수정한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-21T03:07:05.017Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174de1d7edd6acb825edc8,(문제5) 데이터베이스를 또 ...,https://trello.com/c/97wYxVXw/154-%EB%AC%B8%EC%A0%9C5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EB%98%90,"# 수행과제

- 메모리에 있는 리스트 객체를 사용하다 보니 컴퓨터가 꺼지거나 앱이 종료되면 모두 사라지는 문제가 생겼다. 그래서 이번에는 데이터베이스를 사용해서 글들을 저장해 놓기로 했다.
- 게시판을 만들기 위한 프로젝트는 다음과 같이 구조를 만든다.

├── [main.py](http://main.py ""‌"")
├── [database.py](http://database.py ""‌"")
├── [models.py](http://models.py ""‌"")
├── domain
 │ └── question
└── frontend

- ORM(Object Relational Mapping)을 사용해서 데이터베이스 작업을 해야 한다.
- ORM 패키지는 SQLAlchemy를 사용한다.
- [database.py](http://database.py ""‌"") 파일에 데이터베이스와 관련한 설정을 지정한다.
  - Database는 SQLite를 사용한다.
  - autocmmit은 False 로 설정한다.
- [model.py](http://model.py ""‌"") 파일에 질문과 답변에 대한 모델 파일을 작성한다.
  - 질문
    - id: 질문 데이터의 고유번호 (primary key)
    - subject: 질문 제목
    - content: 질문 내용
    - create_date: 질문 작성일시
- alembic 을 이용해서 revision 파일을 생성한다.
- alembic 을 이용해서 revision 파일을 실행한다.
- SQLite에 테이블이 잘 생성되었는지 확인한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 하며 수행과제에서 지사한 패키지만 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- DB Browser for SQLite를 설치해서 Database 열어서 테이블을 확인해 본다.",,,,0,,0,0,0,0,2025-06-03T09:59:09.782Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174deaaf16e71e1c0a8d22,(문제6) 질문 기능을 추가해 보자,https://trello.com/c/gbz3Jq1X/155-%EB%AC%B8%EC%A0%9C6-%EC%A7%88%EB%AC%B8-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%B4-%EB%B3%B4%EC%9E%90,"# 수행과제

- 문제 5 에서 만든 폴더 중에서 question 폴더에 라우트를 담당할 파일인 question_router.py 를 생성한다.

├── [main.py](http://main.py ""‌"")
├── [database.py](http://database.py ""‌"")
├── [models.py](http://models.py ""‌"")
├── domain
 │ └── question
└── frontend

- 라우트는 APIRouter를 사용해서 만든다.
- prefix는 “/api/question”을 붙여준다.
- 목록을 가져오는 question_list() 를 만든다.
  - SQLite에 있는 데이터를 가져오는 기능을 ORM을 이용해서 구현해야 한다.
  - GET 메소드를 사용해야 한다.
- 만들어진 라우트를 사용하기 위해서 main.py에 FastAPI의 include_router()을 사용해서 등록한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 하며 수행과제에서 지사한 패키지만 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 잘 등록이 되었는지 [http://주소/docs](http://xn--9l4b19k/docs ""‌"") 로 접속해서 질문 목록 API가 잘 동작하는지 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T11:28:02.882Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174df3cc15f0b18300afdc,(문제7) 또 다시 알 수 없는 오류,https://trello.com/c/CskMVlGC/156-%EB%AC%B8%EC%A0%9C7-%EB%98%90-%EB%8B%A4%EC%8B%9C-%EC%95%8C-%EC%88%98-%EC%97%86%EB%8A%94-%EC%98%A4%EB%A5%98,"# 수행과제

- contextlib를 사용해서 의존성 주입(Dependency Injection) 기능을 추가한다.
- [database.py](http://database.py ""‌"") 파일에서 contextlib을 이용해서 get_db()라는 함수를 추가한다.
- get_db()에서는 데이터베이스 연결을 하고 사용이 끝나면 자동으로 종료하는 기능을 추가하는데 해당 메소드는 contextlib.contextmanager를 명시하는 함수로 만든다.
- 기존에 만들어 두었던 question\_router.py에서 question\_list() 에서 Depends를 사용해서 방금 만들었던 get_db()를 사용할 수 있도록 코드를 수정한다.
- 메소드를 호출 할 때 마다 데이터베이스가 잘 연결되고 또 연결이 종료되는지 확인한다.
- 명확한 동작을 위해서 앞에서 사용해 보았단 Pydantic을 이용해서 질문 스키마를 작성한다.
- 질문 스키마가 잘 작성되고 나면 question_router.py에 질문 스키마를 사용할 수 있도록 수정한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 하며 수행과제에서 명시된 패키지만 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 질문 스키마에서 내부 클래스로 Config를 추가하고 여기에 orm_mode = False와 True 를 각각 입력해보고 결과를 확인해 본다. 그리고 왜 이런 결과가 나오는지 확인한다.",,,,0,,0,0,0,0,2025-05-04T11:28:24.005Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174e01ad9a5447f4937c2e,(문제8) 질문을 올려봐,https://trello.com/c/eMPdMlb7/157-%EB%AC%B8%EC%A0%9C8-%EC%A7%88%EB%AC%B8%EC%9D%84-%EC%98%AC%EB%A0%A4%EB%B4%90,"# 수행과제

- 질문 등록을 위한 스키마를 작성한다. 스키마의 이름은 QuestionCreate로 한다.
- 질문 등록을 위한 스키마에서는 제목과 내용은 빈 값을 허용하지 않도록 지정한다.
- question\_router.py 파일에 question\_create() 메소드를 추가한다.
  - SQLite에 있는 데이터를 가져오는 기능을 ORM을 이용해서 구현해야 한다.
  - POST 메소드를 사용해야 한다.
  - Depends를 사용해서 데이터베이스 연결을 관리한다.
- 질문이 등록 되는지 확인한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 하며 수행과제에서 지사한 패키지만 사용할 수 있다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 질문을 위한 프론트엔드를 작성해 본다.",,,,0,,0,0,0,0,2025-05-04T11:28:44.977Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fdfa356dcacda6e21d7,(평가) 문제 7 - 1,https://trello.com/c/9YLJFfhj/92-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-1,"# 평가 가이드

**[기본 확인]**

- Fast API를 설치되어 있는지 확인한다.
- Fast API를 실행 할 수 있게 venv를 이용해서 가상 환경을 만들고 개발 했는지 확인한다.
- 웹 환경으로는 uvicorn 을 사용해서 웹 환경을 제공 했는지 확인한다.

**[프로그램 구현 확인]**

- 작업을 시작할 파일을 todo.py로 만들었는지 확인한다.
- 리스트 객체를 todo_list라는 이름으로 추가 되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 아래와 같이 라우트가 추가 되어 있는지 확인한다.
  - APIRouter 클래스를 이용해서 두 개의 라우트를 추가한다.
    - add_todo ()
      - todo_list에 새로운 항목을 추가한다.
      - POST 방식이다.
    - retrieve_todo()
      - todo_list를 가져온다.
      - GET 방식이다.
    - 둘 다 입출력은 Dict 타입으로 한다.
- 두 개의 Fast API 메소드가 잘 실행되는지 curl을 이용해서 확인해 본다.
  - curl 명령을 이해하고 테스트 할 수 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 입력되는 Dict 타입이 빈값이면 경고를 돌려준다.
  - 입력되는 데이터 타입의 빈값 여부가 체크 되는지 확인한다.

# 보너스 과제

- 입력되는 Dict 타입이 빈값이면 경고를 돌려준다.",,,,0,,0,0,0,0,2025-05-04T10:23:17.054Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe0dee10bc3caaf60b8,(평가) 문제 7 - 2,https://trello.com/c/Kr9Khkxr/93-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-2,"# 평가 가이드

**[기본 확인]**

- 문제 1에서 코딩했던 todo.py에 유효성 검사를 하기 위한 pydantic 라이브러리를 추가했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- pydantic을 사용해서 아래와 같이 Todo 클래스를 생성했는지 확인한다.
  - 클래스의 이름은 Todo로 정한다.
  - BaseModel에서 상속을 받는다.
  - 맴버는 다음과 같이 두 개이다.
    - id: int,
    - item: str
- 라우트의 입출력 형식을 Dict 타입에서 방금 추가한 Todo 클래스로 변경한다.
  - 기본형인 Dict 타입에서 Todo 클래스로 자료형이 변경되었는지 확인한다.
- 다시 curl 을 이용해서 내용이 없는 Dict 타입을 add_todo() 메소드에게 파라메터로 호출해 보고 오류 메시지가 반환 되는지 확인해 본다.
  - curl을 이용해서 add_todo()를 호출하고 Dict 타입으로 호출했을 때 오류 메시지가 반환 되는지 체크한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- curl 이외에 postman을 사용해서 호출이 잘 되는지 테스트하고 결과를 첨부한다.
  - postman의 사용방법을 숙지하고 활용 할 수 있는지 확인한다.

# 보너스 과제

- curl 이외에 postman을 사용해서 호출이 잘 되는지 테스트하고 결과를 첨부한다.",,,,0,,0,0,0,0,2025-05-04T10:23:28.438Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe1a937e173aeecb98c,(평가) 문제 7 - 3,https://trello.com/c/TSm7ohbj/94-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-3,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 아래와 같이 조회 기능들이 하나씩 구현되어 있는지 확인한다.
  - 개별 조회 기능을 get\_single\_todo()라는 이름으로 추가한다.
  - 개별 조회를 위해서는 경로 매개변수로 아이디를 넘길 수 있게 해준다.
  - 개별 조회는 GET을 이용해서 구현한다.
- 아래와 같이 수정 기능들이 하나씩 구현되어 있는지 확인한다.
  - 수정 기능을 update_todo()라는 이름으로 추가한다.
  - 수정을 위해서는 경로 매개변수로 아이디를 넘길 수 있게한다.
  - 수정 기능은 PUT을 이용해서 구현한다.
  - 수정 기능을 위한 모델을 따로 추가한다. 해당 내용은 model.py에 추가한다.
  - 모델은 TodoItem이라는 이름으로 추가하고 BaseModel을 상속받아 구현한다.
- 아래와 같이 삭제 기능들이 하나씩 구현되어 있는지 확인한다.
  - 삭제 기능을 delete\_single\_todo()라는 이름으로 추가한다.
  - 삭제 하려는 아이디를 경로 매개변수로 넘길 수 있게 구성한다.
  - 삭제 기능은 DELETE를 이용해서 구현한다.
- 추가한 개별 조회, 수정, 삭제 기능을 curl 을 이용해서 동작을 확인한다.
  - curl을 이용해서 방금 추가한 동작들을 모두 테스트 한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 구현한 기능들을 호출해서 동작하는 간단한 클라이언트 앱을 구현해 보세요.
  - 앱이나 혹은 웹을 이용해서 개발한 웹 API를 사용할 수 있는 클라이언트를 개발했는지 확인한다.

# 보너스 과제

- 구현한 기능들을 호출해서 동작하는 간단한 클라이언트 앱을 구현해 보세요.",,,,0,,0,0,0,0,2025-05-04T10:23:42.052Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe3e6b8e55f3adc9e72,(평가) 문제 7 - 4,https://trello.com/c/ondCctOr/95-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-4,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- todo.py의 기존에 작성된 모든 기능에 오류를 처리하기 위한 코드를 모두 입력되어 있는지 확인한다.
  - 오류를 처리하기 위해서는 HTTPException 클래스를 사용해서 오류를 처리한다.
  - 오류시에 클라이언트에 다음과 같은 내용을 전달할 수 있게 한다.
    - status_code: 예외처리시 반환할 상태코드 ex) 404, 500, 201 등등
    - detail: 클라이언트에게 전달할 메시지
    - headers: 헤더를 요구하는 응답을 위한 선택적 인수
  - 모든 기능에 성공적으로 명령이 수행 되었을 경우 status_code가 201이 리턴 되게 수정한다.
- 오류 처리가 잘 동작하는지 임의의 오류를 만들어서 테스트 해본다.
  - 구현 되어 있는 모든 오류 핸들러들을 모두 테스트 해보고 구현되어 있지 않은 경우에는 일반적인 오류 메시지가 출력될 수 있게 구현 되었는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 결과를 돌려 줄 때 사용하는 응답 모델을 작성하고 이를 사용할 수 있게 retrieve_todo() 메소드를 수정한다.
  - 응답 모델이 작성되어 있는지 그리고 응답 모델을 이용해서 결과를 돌려주는 지 확인한다.

# 보너스 과제

- 결과를 돌려 줄 때 사용하는 응답 모델을 작성하고 이를 사용할 수 있게 retrieve_todo() 메소드를 수정한다.",,,,0,,0,0,0,0,2025-05-04T10:24:12.546Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe5bea37c118e644ad4,(평가) 문제 7 - 5,https://trello.com/c/ml9fozop/96-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-5,"# 평가 가이드

**[기본 확인]**

- ORM(Object Relational Mapping)을 사용해서 데이터베이스 작업이 되어 있는지 확인한다.
- ORM 패키지는 SQLAlchemy를 사용했는지 확인한다.

**[프로그램 구현 확인]**

- 게시판을 만들기 위한 프로젝트는 다음과 같이 구조가 완성되어 있는지 확인한다.

├── [main.py](http://main.py ""‌"")

├── [database.py](http://database.py ""‌"")

├── [models.py](http://models.py ""‌"")

├── domain

 │ └── question

└── frontend

- alembic 을 이용해서 revision 파일을 생성했는지 확인한다.
- alembic 을 이용해서 revision 파일을 실행했는지 확인한다.
- SQLite에 테이블이 잘 생성되었는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- [database.py](http://database.py ""‌"") 파일에 데이터베이스와 관련한 아래와 같은 내용이 설정되어 있는지 확인한다.
  - Database는 SQLite를 사용한다.
  - autocmmit은 False 로 설정한다.
- [model.py](http://model.py ""‌"") 파일에 질문과 답변에 대한 모델 파일을 작성되어 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- DB Browser for SQLite를 설치해서 Database 열어서 테이블을 확인해 본다.
  - DB Browser를 충분히 이해하고 잘 활용하고 있는지 확인한다.

# 보너스 과제

- DB Browser for SQLite를 설치해서 Database 열어서 테이블을 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T10:24:50.306Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe6340c3ab23cc0cbb5,(평가) 문제 7 - 6,https://trello.com/c/DMCOhV2j/97-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-6,"# 평가 가이드

**[기본 확인]**

- 문제 5 에서 만든 폴더 중에서 question 폴더에 라우트를 담당할 파일인 question_router.py 를 생성 했는지 확인한다.

├── [main.py](http://main.py ""‌"")

├── [database.py](http://database.py ""‌"")

├── [models.py](http://models.py ""‌"")

├── domain │

└── question

└── frontend

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 라우트는 APIRouter를 사용해서 만든다.
  - APIRouter를 사용했는지 확인한다.
- prefix는 “/api/question”을 붙여준다.
  - prefix를 정확하게 붙였는지 확인한다.
- 목록을 가져오는 question_list() 를 만든다.
  - SQLite에 있는 데이터를 가져오는 기능을 ORM을 이용해서 구현했는지 확인한다.
  - GET 메소드를 사용했는지 확인한다.
- 만들어진 라우트를 사용하기 위해서 main.py에 FastAPI의 include_router()을 사용해서 등록한다.
  - 정확하게 include_router()를 사용했는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 잘 등록이 되었는지 [http://주소/docs](http://xn--9l4b19k/docs ""‌"") 로 접속해서 질문 목록 API가 잘 동작하는지 확인해 본다.
  - FastAPI에서 제공하는 docs가 잘 작성되어 있는지 확인한다.

# 보너스 과제

- 잘 등록이 되었는지 [http://주소/docs](http://xn--9l4b19k/docs ""‌"") 로 접속해서 질문 목록 API가 잘 동작하는지 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T10:25:21.893Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173fe82d58ace3b6fa5d14,(평가) 문제 7 - 7,https://trello.com/c/wzUSWMwl/98-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-7,"# 평가 가이드

**[기본 확인]**

- contextlib를 사용해서 의존성 주입(Dependency Injection) 기능을 추가했는지 확인한다.
- [database.py](http://database.py ""‌"") 파일에서 contextlib을 이용해서 get_db()라는 함수를 추가했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- get_db()에서는 데이터베이스 연결을 하고 사용이 끝나면 자동으로 종료하는 기능을 추가하는데 해당 메소드는 contextlib.contextmanager를 명시하는 함수로 만든다.
  - contextlib.contextmanager가 잘 명시된 함수로 만들어졌는지 확인한다.
- 기존에 만들어 두었던 question\_router.py에서 question\_list() 에서 Depends를 사용해서 방금 만들었던 get_db()를 사용할 수 있도록 코드를 수정한다.
  - get_db()를 잘 사용하는지 확인한다.
  - 메소드를 호출 할 때 마다 데이터베이스가 잘 연결되고 또 연결이 종료되는지 확인한다.
- 명확한 동작을 위해서 앞에서 사용해 보았단 Pydantic을 이용해서 질문 스키마를 작성한다.
  - Pydantic을 잘 이해하고 있는지 또 어떻게 사용하서 코드를 작성했는지 확인한다.
- 질문 스키마가 잘 작성되고 나면 question_router.py에 질문 스키마를 사용할 수 있도록 수정한다.
  - question_router.py에서 질문 스키마를 잘 사용해서 코드를 작성했는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 질문 스키마에서 내부 클래스로 Config를 추가하고 여기에 orm_mode = False와 True 를 각각 입력해보고 결과를 확인해 본다. 그리고 왜 이런 결과가 나오는지 확인한다.
  - 결과의 차이를 잘 설명하고 어떤 경우에 해당 옵션들을 사용해야 하는지 확인한다.

# 보너스 과제

- 질문 스키마에서 내부 클래스로 Config를 추가하고 여기에 orm_mode = False와 True 를 각각 입력해보고 결과를 확인해 본다. 그리고 왜 이런 결과가 나오는지 확인한다.",,,,0,,0,0,0,0,2025-05-04T10:25:36.025Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68173feaf5a598655feccc51,(평가) 문제 7 - 8,https://trello.com/c/QFRPeUtr/99-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-7-8,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

- 질문 등록을 위한 스키마를 작성한다. 스키마의 이름은 QuestionCreate로 되어 있는지 확인한다.
- 질문 등록을 위한 스키마에서는 제목과 내용은 빈 값을 허용하지 않도록 지정되어 있는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- question\_router.py 파일에 question\_create() 메소드를 추가하고 그 과정에서 아래와 같은 부분이 충분히 고려되어서 코드가 작성 되었는지 확인한다.
  - SQLite에 있는 데이터를 가져오는 기능을 ORM을 이용해서 구현되어 있는지 확인한다.
  - POST 메소드를 사용했는지 확인한다.
  - Depends를 사용해서 데이터베이스 연결을 관리했는지 확인한다.
- 질문이 등록 되는지 확인한다.
  - 최종적으로 질문이 오류없이 잘 동작 하는지 확인한다.

**[개념 확인 질문]**

- ORM의 개념과 사용하는 이유를 설명할 수 있다.

**[보너스 문제 확인]**

- 질문을 위한 프론트엔드를 작성해 본다.
  - 프론트엔드를 위한 웹 서비스를 작성해서 지금 개발한 부분을 호출해서 동작 시킬 수 있는지 확인한다.

# 보너스 과제

- 질문을 위한 프론트엔드를 작성해 본다.",,,,0,,0,0,0,0,2025-05-04T10:25:47.316Z,68173fbff4bbeae98cf57ab8,과정 7,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174f985f60dc3d5396879f,(문제1) 여러개의 눈,https://trello.com/c/Kxqt7JdJ/158-%EB%AC%B8%EC%A0%9C1-%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EB%88%88,"# 수행과제

- 이미지와 영상 등을 처리할 수 있게 OpenCV를 설치한다.
- OpenCV를 사용해서 카메라 출력을 실시간으로 받아보기 위해서 VideoCapture를 사용해서 카메라 영상을 출력해 본다.
  - 출력 해상도는 640 x 480 으로 설정한다.
  - 카메라가 여러대 있을 경우 첫 번째 카메라를 사용한다.
- 키 입력의 대기는 33ms로 설정한다.
- 출력이 끝난 창은 닫아준다.
- 임의의 사진과 동영상(*.mp4) 파일을 다수 준비한다.
- OpenCV를 사용해서 사진 파일을 열기 위해서 imread()를 사용해서 사진을 열어서 출력해 본다.
- 사진이 출력이 되면 다시 창을 닫아준다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- OpenCV를 사용해서 *.mp4 파일을 열어서 출력해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T03:56:46.200Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fa02e8e8957df6144ad,(문제2) 클립과 사진을 모아보자,https://trello.com/c/Ju9gzs3l/159-%EB%AC%B8%EC%A0%9C2-%ED%81%B4%EB%A6%BD%EA%B3%BC-%EC%82%AC%EC%A7%84%EC%9D%84-%EB%AA%A8%EC%95%84%EB%B3%B4%EC%9E%90,"# 수행과제

- OpenCV를 사용해서 특정 *.mp4 파일을 열어서 재생한다.
- 동영상이 재생되는 중 다음과 같은 단축키를 누르면 해당 동작이 된다.
  - ESC: 프로그램이 종료된다.
  - Ctrl+Z: 화면을 이미지로 캡쳐한다.
  - Ctrl+X: 동영상 녹화를 시작한다.
  - Ctrl+C: 녹화를 중지한다.
  - 캡쳐되는 이미지나 동영상의 파일명은 ‘날짜_시간-분-초’ 형식으로 한다.
  - 단축키는 33ms 단위로 입력을 받는다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- OpenCV에서 지원되는 코덱을 2가지 이상 사용해서 동영상 파일을 읽고 쓰세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T05:00:45.232Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fa7963056db4ea69cbe,(문제3) 사진들의 리터칭,https://trello.com/c/KvGUyqpL/160-%EB%AC%B8%EC%A0%9C3-%EC%82%AC%EC%A7%84%EB%93%A4%EC%9D%98-%EB%A6%AC%ED%84%B0%EC%B9%AD,"# 수행과제

- OpenCV를 사용해서 특정 이미지를 읽어온다.
- 원본 이미지를 화면에 우선 출력한다.
- 이미지를 상하반전한 결과를 출력한다.
- 이미지를 좌우반전한 결과를 출력한다.
- 이미지를 시계방향으로 90도, 180도 각각 회전한 결과를 출력한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 이미지를 업 샘플링해서 2배로 키워본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T05:24:10.253Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fb7bfd153019b0ed546,(문제4) 이미지의 크기를 바꾸면 다시 보이는 것들,https://trello.com/c/m0aDdZQQ/161-%EB%AC%B8%EC%A0%9C4-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%9D%98-%ED%81%AC%EA%B8%B0%EB%A5%BC-%EB%B0%94%EA%BE%B8%EB%A9%B4-%EB%8B%A4%EC%8B%9C-%EB%B3%B4%EC%9D%B4%EB%8A%94-%EA%B2%83%EB%93%A4,"# 수행과제

- OpenCV를 이용해서 특정 이미지를 먼저 읽어온다.
- 이미지의 사이즈를 640 \* 480과 1024 \* 768 두 가지 사이즈로 변환해 본다.
- 이미지를 비율에 맞게 상대 크기로도 변환해 본다. fx = 0.3, fy = 0.7f로 변환해 본다.
- 이미지의 특정 부분만 잘라서 가져와 본다.
- 단 이때 이미지를 깊은 복사(deep copy)로 복사해서 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 여러 사람들이 있는 사진에서 사람들을 개별적으로 잘라서 출력하세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T06:48:26.078Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fc8f27c9fee9edba15f,(문제5) 공간을 바꾸고 뒤집으면 보이는 것들,https://trello.com/c/xdug8rbL/162-%EB%AC%B8%EC%A0%9C5-%EA%B3%B5%EA%B0%84%EC%9D%84-%EB%B0%94%EA%BE%B8%EA%B3%A0-%EB%92%A4%EC%A7%91%EC%9C%BC%EB%A9%B4-%EB%B3%B4%EC%9D%B4%EB%8A%94-%EA%B2%83%EB%93%A4,"# 수행과제

- OpenCV를 사용해서 특정 이미지를 열어본다.
- 이미지의 색상변화를 RGB에서 GRAY로 전환해 본다.
- 이미지의 역상을 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 원본 이미지와 역상 이미지의 히스토그램을 각각 출력해 보세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T07:01:33.760Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fd40e86bf8904e92577,(문제6) 마음이 아려오는 이미지들...,https://trello.com/c/LGlmUUcY/163-%EB%AC%B8%EC%A0%9C6-%EB%A7%88%EC%9D%8C%EC%9D%B4-%EC%95%84%EB%A0%A4%EC%98%A4%EB%8A%94-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%93%A4,"# 수행과제

- OpenCV를 이용해서 특정 이미지를 열어본다.
- 이미지를 이진화 하기 위해서 이미지를 그래이스케일로 먼저 변환한다.
- 이미지를 이진화해서 화면에 출력해 본다.
- 다시 원본 이미지를 이용해서 이미지의 가장자리를 검출하기 위해서 다음 세 가지 방법으로 가장 자리를 찾아본다.
  - sobel
  - laplacian
  - canny
- 또 다른 이미지를 열어서 이번에는 흐림효과를 적용해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 이미지에서 특정 부분만 흐림효과를 적용해 본다.",,moongyuhwang,,0,,0,0,0,1,2025-06-24T07:07:53.693Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fdca422707b14ab28f5,(문제7) 색에도 성분이 있다.,https://trello.com/c/9jJzhXLv/164-%EB%AC%B8%EC%A0%9C7-%EC%83%89%EC%97%90%EB%8F%84-%EC%84%B1%EB%B6%84%EC%9D%B4-%EC%9E%88%EB%8B%A4,"# 수행과제

- OpenAI를 통해서 이미지를 읽어 온다.
- 이미지의 색상공간을 HSV 공간으로 변환한다.
- 이미지의 색상공간이 HSV로 변환 되었으면 H, S, V의 값을 별도로 추출한다.
- 화면에 H 성분을 출력한다.
- 화면에 S 성분을 출력한다.
- 화면에 V 성분을 출력한다.
- 출력이 끝났으면 출력된 창을 닫는다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- HSV 를 이용한 효과와 비슷하지만 다른 결과를 얻을 수 있는게 바로 채널 분리 기법이다. 채널을 분리해 보고 HSV와 다른 점을 확인하는 코드를 작성하세요.",,moongyuhwang,,0,,0,0,0,1,2025-06-25T09:06:21.914Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68174fe52f8a3c97733c8949,(문제8) 도형 그리기,https://trello.com/c/BfIHkmNc/165-%EB%AC%B8%EC%A0%9C8-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0,"# 수행과제

- OpenCV로 여러 물체가 있는 이미지를 읽어와서 화면에 표시한다.
- 주요 물품에 사각형으로 위치를 표시한다.
- 사각형의 라인 색상은 빨간색으로 한다.
- 주요 물품에 사각형에 설명을 텍스트로 붙여 놓는다.
- 이때 텍스트와 사각형 사이에는 거리를 두고 그 사이를 빨간색 라인으로 연결한다.
- 표시가 완료되면 이미지를 화면에 출력한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Fast API를 사용해서 구성해야 한다.
- 방명록의 데이터는 Database 등을 사용하지 않고 CSV 파일을 사용해서 저장하고 가져와서 보여 주어야 한다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 물품의 종류에 따라 사각형과 삼각형 원형을 사용해서 구별해서 표시한다.",,moongyuhwang,,0,,0,0,0,1,2025-06-25T09:15:46.589Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740c56b8116a0f7e6cd35,(평가) 문제 8 - 1,https://trello.com/c/X1LQkH0z/101-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-1,"# 평가 가이드

**[기본 확인]**

- 이미지와 영상 등을 처리할 수 있게 OpenCV를 설치되어 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- OpenCV를 사용해서 카메라 출력을 실시간으로 받아보기 위해서 VideoCapture를 사용해서 카메라 영상을 출력 할 수 있는지 확인한다. 확인 할 때에는 아래와 같은 요소들을 함께 확인한다.
  - 출력 해상도는 640 x 480 으로 설정한다.
  - 카메라가 여러대 있을 경우 첫 번째 카메라를 사용한다.
  - 키 입력의 대기는 33ms로 설정한다.
  - 출력이 끝난 창은 닫아준다.
- OpenCV를 사용해서 사진 파일을 열기 위해서 imread()를 사용해서 사진을 열어서 출력해 본다.
  - 사진이 잘 보이게 정상적으로 열리는지 확인한다.
  - 사진이 출력이 되면 다시 창을 닫아준다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- OpenCV를 사용해서 *.mp4 파일을 열어서 출력해 본다.
  - mp4를 열어서 잘 보이게 실행 되는지 확인한다.

# 보너스 과제

- OpenCV를 사용해서 *.mp4 파일을 열어서 출력해 본다.",,,,0,,0,0,0,0,2025-05-04T10:26:47.991Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740cf950dbbd312407cc4,(평가) 문제 8 - 2,https://trello.com/c/o3SmuUXH/102-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-2,"# 평가 가이드

- OpenCV를 사용해서 제공되는 mars.mp4 파일을 열어서 재생 할 수 있다.
- 동영상이 재생되는 중 다음과 같은 단축키를 누르면 해당 동작이 가능하다.
  - ESC: 프로그램이 종료된다.
  - Ctrl+Z: 화면을 이미지로 캡쳐한다.
  - Ctrl+X: 동영상 녹화를 시작한다.
  - Ctrl+C: 녹화를 중지한다.
  - 캡쳐되는 이미지나 동영상의 파일명은 ‘날짜_시간-분-초’ 형식으로 한다.
  - 단축키는 33ms 단위로 입력을 받는다.
- ‌

**[기본 확인]**

- OpenCV를 사용해서 제공되는 mars.mp4 파일을 열어서 재생 할 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 동영상이 재생되는 중 다음과 같은 단축키를 누르면 해당 동작이 되는지 확인한다.
  - ESC: 프로그램이 종료된다.
  - Ctrl+Z: 화면을 이미지로 캡쳐한다.
  - Ctrl+X: 동영상 녹화를 시작한다.
  - Ctrl+C: 녹화를 중지한다.
  - 캡쳐되는 이미지나 동영상의 파일명은 ‘날짜_시간-분-초’ 형식으로 한다.
  - 단축키는 33ms 단위로 입력을 받는다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- OpenCV에서 지원되는 코덱을 2가지 이상 사용해서 동영상 파일을 읽고 쓰세요.
  - 사용한 코덱이 2가지 이상 되는지 확인하고 각각의 코덱의 특징에 대해서 설명할 수 있는지 확인한다.

# 보너스 과제

- OpenCV에서 지원되는 코덱을 2가지 이상 사용해서 동영상 파일을 읽고 쓰세요.",,,,0,,0,0,0,0,2025-05-04T10:26:59.005Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740d0710f9eaabb91fae4,(평가) 문제 8 - 3,https://trello.com/c/oShd7XMf/103-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-3,"# 평가 가이드

**[기본 확인]**

- OpenCV를 사용해서 이미지를 읽어 올 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 원본 이미지를 화면에 우선 출력하고 아래와 같은 기능들을 모두 구현 했는지 확인한다.
  - 이미지를 상하반전한 결과를 출력한다.
  - 이미지를 좌우반전한 결과를 출력한다.
  - 이미지를 시계방향으로 90도, 180도 각각 회전한 결과를 출력한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 이미지를 업 샘플링해서 2배로 키워본다.
  - 이미지를 2배 키워서 보여주는게 아니라 정확하게 업 샘플링 되었는지 확인한다.

# 보너스 과제

- 이미지를 업 샘플링해서 2배로 키워본다.",,,,0,,0,0,0,0,2025-05-04T10:27:11.153Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740d22e45d5a30946b498,(평가) 문제 8 - 4,https://trello.com/c/UrdP1C9Z/104-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-4,"# 평가 가이드

**[기본 확인]**

- OpenCV를 이용해서 이미지를 먼저 읽어 올 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이미지의 사이즈를 640 \* 480과 1024 \* 768 두 가지 사이즈로 변환해 본다.
  - 이미지의 보여지는 크기가 아니라 실제 크기를 조절 할 수 있는지 확인한다.
- 이미지를 비율에 맞게 상대 크기로도 변환해 본다. fx = 0.3, fy = 0.7f로 변환해 본다.
  - 각각의 이미지를 상대 크기로도 변환이 가능한지 확인해 본다.
- 이미지의 특정 부분만 잘라서 가져와 본다.
  - 특정 부분만 잘라내서 가져올 수 있는지 확인한다.
  - 단 이때 이미지를 깊은 복사(deep copy)로 복사해서 출력이 가능한지 확인해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 여러 사람들이 있는 사진에서 사람들을 개별적으로 잘라서 출력하세요.
  - 사람을 자동으로 인식까지는 하지 않아도 되지만 사람이 있는 부분들을 잘 잘라서 가져온다.

# 보너스 과제

- 여러 사람들이 있는 사진에서 사람들을 개별적으로 잘라서 출력하세요.",,,,0,,0,0,0,0,2025-05-04T10:27:21.467Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740d36463cf513ec29b8b,(평가) 문제 8 - 5,https://trello.com/c/x7aZiiVt/105-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-5,"# 평가 가이드

**[기본 확인]**

- OpenCV를 사용해서 이미지를 열 수 있는 지 확인해 본다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이미지의 색상변화를 RGB에서 GRAY로 전환해 본다.
  - OpenCV 기능을 사용해서 GRAY로 변환하는 코드를 작성했는지 확인한다.
- 이미지의 역상을 출력해 본다.
  - 이미지의 역상을 출력할 수 있는지 확인해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 원본 이미지와 역상 이미지의 히스토그램을 각각 출력해 보세요.
  - 히스토그램을 출력하고 히스토그램의 의미와 역할을 설명할 수 있는지 확인한다.

# 보너스 과제

- 원본 이미지와 역상 이미지의 히스토그램을 각각 출력해 보세요.",,,,0,,0,0,0,0,2025-05-04T10:27:35.491Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740d5c2383abb85fa9e9f,(평가) 문제 8 - 6,https://trello.com/c/xu1V0kG5/106-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-6,"# 평가 가이드

**[기본 확인]**

- OpenCV를 이용해서 이미지를 열 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이미지를 이진화 하기 위해서 이미지를 그래이스케일로 먼저 변환 할 수 있는지 확인한다.
- 이미지를 이진화해서 화면에 출력 할 수 있는지 확인한다.
  - 이진화와 그레이스케이일의 차이점을 설명할 수 있는지 확인한다.
- 다시 원본 이미지를 이용해서 이미지의 가장자리를 검출하기 위해서 다음 세 가지 방법으로 가장 자리를 찾아본다.
  - sobel
  - laplacian
  - canny
  - 3가지 방식이 모두 코드로 작성되어 있는지 확인하고 각 방식의 차이점을 설명할 수 있는지 확인한다.
- 또 다른 이미지를 열어서 이번에는 흐림효과를 적용해 본다.
  - 흐림 효과를 적용할 수 있는 코드가 작성되어 있는지 확인한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 이미지에서 특정 부분만 흐림효과를 적용해 본다.
  - 특정 부분만 흐림 효과를 적용할 수 있는 코드가 잘 작성되고 실행 되는지 확인해 본다.

# 보너스 과제

- 이미지에서 특정 부분만 흐림효과를 적용해 본다.",,,,0,,0,0,0,0,2025-05-04T10:27:47.404Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740d76bbc8f0ac70aabec,(평가) 문제 8 - 7,https://trello.com/c/axFlv2Ko/107-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-7,"# 평가 가이드

**[기본 확인]**

- OpenAI를 통해서 이미지를 읽어 올 수 있는지 확인해 본다.
- 이미지의 색상공간을 HSV 공간으로 변환 할 수 있는지 확인해 본다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 이미지의 색상공간이 HSV로 변환 되었으면 H, S, V의 값을 별도로 추출 할 수 있는지 확인하고 아래와 같은 동작이 코드로 잘 작성되고 실행 할 수 있는지 확인한다.
  - 화면에 H 성분을 출력한다.
  - 화면에 S 성분을 출력한다.
  - 화면에 V 성분을 출력한다.
  - 출력이 끝났으면 출력된 창을 닫는다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- HSV 를 이용한 효과와 비슷하지만 다른 결과를 얻을 수 있는게 바로 채널 분리 기법이다. 채널을 분리해 보고 HSV와 다른 점을 확인하는 코드를 작성하세요.
  - 채널 분리 방법을 실행 할 수 있는 코드를 작성하고 HSV와 채널 분리의 차이점을 설명할 수 있다.

# 보너스 과제

- HSV 를 이용한 효과와 비슷하지만 다른 결과를 얻을 수 있는게 바로 채널 분리 기법이다. 채널을 분리해 보고 HSV와 다른 점을 확인하는 코드를 작성하세요.",,,,0,,0,0,0,0,2025-05-04T10:27:58.740Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681740dbbc747d6e11d26dca,(평가) 문제 8 - 8,https://trello.com/c/O4YKIAlk/108-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-8-8,"# 평가 가이드

**[기본 확인]**

- OpenCV로 제시된 이미지를 읽어와서 화면에 표시 할 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 아래와 같이 이미지에 특정 도형들을 표시 할 수 있는지 확인한다.
  - 주요 생존 물품에 사각형으로 위치룔 표시한다.
  - 사각형의 라인 색상은 빨간색으로 한다.
  - 주요 물품에 사각형에 설명을 텍스트로 붙여 놓는다.
  - 이때 텍스트와 사각형 사이에는 거리를 두고 그 사이를 빨간색 라인으로 연결한다.
  - 표시가 완료되면 이미지를 화면에 출력한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 물품의 종류에 따라 사각형과 삼각형 원형을 사용해서 구별해서 표시한다.
  - 다양한 도형을 표시할 수 있는 방법들을 이해하고 구현 할 수 있는지 확인한다.

# 보너스 과제

- 물품의 종류에 따라 사각형과 삼각형 원형을 사용해서 구별해서 표시한다.",,,,0,,0,0,0,0,2025-05-04T10:28:09.376Z,68173fc65bcd80ab1fae3902,과정 8,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681750e50b9a39b24f40a5d1,(문제1) 식물 분류 프로젝트,https://trello.com/c/wEXT7iCa/166-%EB%AC%B8%EC%A0%9C1-%EC%8B%9D%EB%AC%BC-%EB%B6%84%EB%A5%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8,"# 수행과제

- 머신 러닝(Machine Learning)을 위해서 Scikit-learn을 설치한다.
- Scikit-learn에 포함되어 있는 dataset중 하나인 iris 데이터를 불러온다.
- iris dataset에 포함되어 있는 DESCR 항목을 가져와서 출력해 본다.
- dataset에 포함되어 있는 target_name 항목을 가져와서 내용을 출력해 본다.
- dataset에 포함되어 있는 feature_names 항목을 가져와서 내용을 출력해 본다.
- dataset에 포함되어 있는 실제 데이터의 항목인 data 항목을 가져와서 다음과 같은 내용들을 살펴본다.
  - 데이터의 모양을 살펴본다.
  - 데이터의 차원을 확인한다.
  - 데이터의 타입을 확인한다.
  - 앞에서 부터 5개의 데이터를 샘플로 출력해 본다.
- dataset에 포함되어 있는 target의 내용을 가져와서 다음과 같은 내용들을 살펴 본다.
  - 데이터의 모양을 살펴본다.
  - 데이터의 차원을 확인한다.
  - 데이터의 타입을 확인한다.
  - 앞에서 부터 5개의 데이터를 샘플로 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 가져온 iris 데이터의 data와 target 데이터를 기반으로 데이터 분포 그래프를 그려본다.

![image.png](https://trello.com/1/cards/681750e50b9a39b24f40a5d1/attachments/681751afdf5a76982366704a/download/image.png)",,moongyuhwang,,1,https://trello.com/1/cards/681750e50b9a39b24f40a5d1/attachments/681751afdf5a76982366704a/download/image.png,0,0,0,2,2025-07-01T09:55:47.408Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681750f80e5387f19eb2c5a7,(문제2) 컴퓨터에게 학습을 시켜보자,https://trello.com/c/PfAMd4My/167-%EB%AC%B8%EC%A0%9C2-%EC%BB%B4%ED%93%A8%ED%84%B0%EC%97%90%EA%B2%8C-%ED%95%99%EC%8A%B5%EC%9D%84-%EC%8B%9C%EC%BC%9C%EB%B3%B4%EC%9E%90,"# 수행과제

- Sckit-Learn에서 제공하는 train\_test\_split을 사용해서 문제1에서 준비했던 iris 데이터셋의 data, target 항목을 각각 저장한다.
- 나누어진 데이터는 X\_train, X\_test, y\_train, y\_test로 나누어서 담는다.
- X\_train, X\_test, y\_train, y\_test의 데이터 모양과 크기를 각각 출력해 본다.
- Sckit-Learn에서 제공하는 KNeighborsClassifier를 사용해서 데이터를 학습하는데 n_neighbors 옵션은 1로 설정한다.
- 학습이 끝나면 [[5, 2.9, 1, 0.2]]의 값으로 예측을 해본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 학습된 모델을 y\_train, y\_test 를 사용해서 평가를 해본다.",,,,0,,0,0,0,0,2025-05-04T11:38:48.661Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68175113501e9c225ada77a5,(문제3) 데이터 전처리 Min-Max,https://trello.com/c/3pYVT1oF/168-%EB%AC%B8%EC%A0%9C3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC-min-max,"# 수행과제

- 제공되는 abalone.txt, abalone_attributes.txt 두 개의 파일을 읽어 들여서 DataFrame 객체로 만든다.
- 전복은 유아기 때는 성별이 정해지지 않다가 성장하면서 성별이 정해지는 특성이 있다. 따라서 성별 데이터를 Sex 컬럼에서 가지고 와서 따로 label이라는 항목으로 가져온다.
- 기존의 DataFrame에 있는 성별 데이터는 삭제해 준다.
- 준비된 데이터를 가져와서 살펴보면 각각의 항목의 크기의 편차가 큰 것을 알 수 있다.
- 각각의 항목의 크기의 편차가 클 경우에 추후 데이터처리에서 문제가 될 수 있기 때문에 Min-Max Scaling을 해준다.
- Min-Max Scaling은 직접 수식을 구현해서 만들어보는 것과 sklearn.preprocessing에 있는 패키지로 구현하는 것 두 가지 방법을 모두 사용해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 같은 데이터로 Standard Scaling을 해보고 결과를 비교해 본다.",,,,2,"https://trello.com/1/cards/68175113501e9c225ada77a5/attachments/681751ee8335f342dafafdb8/download/9-3-abalone_attributes.txt, https://trello.com/1/cards/68175113501e9c225ada77a5/attachments/681751efe01bdd0dea5118f4/download/9-3-abalone.txt",0,0,0,0,2025-05-04T11:39:28.220Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681751210394170094b7bdf1,(문제4) 데이터 전처리 Sampling,https://trello.com/c/gcE62CNq/169-%EB%AC%B8%EC%A0%9C4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%98%EB%A6%AC-sampling,"# 수행과제

- 문제 3에서 사용했던 전복 데이터를 그대로 다시 DataFrame 객체로 불러 온다.
- 성별이 있는 데이터는 label 그 외의 데이터는 data라는 이름의 객체로 만든다.
- 데이터의 양을 많은 쪽에 맞추기 위해서 Random Over Sampling을 수행해 보고 결과를 출력해 본다.
- 데이터의 양을 적은 쪽에 맞추기 위해서 Random Under Sampling을 수행해 보고 결과를 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 단순한 문제 Random Over Sampling, Random Under Sampling을 사용했을 때 발생하는 문제들을 살펴보고 이 기법에 대한 대안으로 SMOTE(Synthetic Minority Oversampling Technique)를 사용해 본다.
- 리스트",,,,2,"https://trello.com/1/cards/681751210394170094b7bdf1/attachments/681752125fc7ff9b8587d261/download/9-4-abalone_attributes.txt, https://trello.com/1/cards/681751210394170094b7bdf1/attachments/681752134acec66326fb5b7e/download/9-4-abalone.txt",0,0,0,0,2025-05-04T11:40:05.659Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817512fe273999b16fd9918,(문제5) 차원의 저주를 풀어라,https://trello.com/c/1em3l5EH/170-%EB%AC%B8%EC%A0%9C5-%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%A0%80%EC%A3%BC%EB%A5%BC-%ED%92%80%EC%96%B4%EB%9D%BC,"# 수행과제

- sklearn.datasets에 있는 digits 데이터를 불러온다.
- 해당 데이터셋의 DESCR 항목을 출력해서 읽어보면서 데이터의 내용을 파악한다.
- 해당 데이터셋의 data라는 항목을 data로 target으로 되어 있는 항목을 label로 각각 저장한다.
- data의 내용은 64차원 데이터로 구성되어 있으므로 이 데이터를 통해서 이미지를 확인하기 위해서 8x8 행렬로 변환한다.
- 변환된 데이터를 기반으로 이미지를 구성해서 데이터를 확인한다.
- PCA(Principal Component Analysis)를 주성분을 찾고 주성분을 기분으로 차원을 축소 시킨다.
- 최종 결과로 2차원 데이터로 차원을 축소되어야 한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 2차원으로 축소된 데이터를 2차원으로 시각화해서 데이터의 군집을 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T11:40:33.940Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681751371766570dc061eb20,(문제6) 분명하게 말해 두기,https://trello.com/c/FJkUW0Ak/171-%EB%AC%B8%EC%A0%9C6-%EB%B6%84%EB%AA%85%ED%95%98%EA%B2%8C-%EB%A7%90%ED%95%B4-%EB%91%90%EA%B8%B0,"# 수행과제

- 문제 1에서 사용했던 전복 데이터를 다시 불러온다.
- 전복데이터의 성별을 데이터를 label 이라는 이름으로 따로 저장한다.
- 먼저 Sckit-Learn에서 제공하는 LabelEncoder를 사용해서 라벨 엔코딩을 한다.
- 라벨 엔코딩된 결과를 확인한다.
- 라벨 엔코딩으로 결과가 분명하지 않아서 이번에는 원핫 엔코딩(One-Hot Encoding)을 진행한다.
- 최종적으로 원핫 엔코딩 된 결과를 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 위에서 설명된 데이터 전처리 기법 이외의 결측값(Missing Value), 노이즈(Noise), 이상값(Outlier)에 대해서 설명하고 구체적인 예와 처리 방법을 코드와 함께 작성하세요.",,,,0,,0,0,0,0,2025-05-04T11:40:53.807Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68175145e97ab4d70b623016,(문제7) 맛있는 토마토 찾기,https://trello.com/c/P5EhIm68/172-%EB%AC%B8%EC%A0%9C7-%EB%A7%9B%EC%9E%88%EB%8A%94-%ED%86%A0%EB%A7%88%ED%86%A0-%EC%B0%BE%EA%B8%B0,"# 수행과제

- 데이터를 생성하기 위해서 mglearn 패키지를 설치한다.
- 아래와 같이 코드를 입력해서 X, y 데이터를 생성한다. X, y = mglearn.datasets.make\_wave(n\_samples= 40)
- 생성된 데이터를 산점도 차트로 시각화 해본다.

![image.png](https://trello.com/1/cards/68175145e97ab4d70b623016/attachments/68175260d1c9f5d9c0ff6fc8/download/image.png)

- 데이터의 분포를 살펴보면 먹을 수 있는 토마토로 라벨링 되어 있는 0번 토마토와 쓴맛이 나는 1번 데이터의 분포를 정확하게 알 수 있다.
- 해당 데이터를 학습 시키기 위해서 먼저 train\_test\_split()을 사용해서 데이터를 학습용 데이터와 테스트용 데이터로 분리하는데 이때 random_state=0 으로 설정한다.
- 학습용 데이터로 준비한 내용을 가지고 학습시킨다.
- 학습 할 때에는 KNeighborsClassifier 알고리즘을 사용해야 하며 이때 (n_eighbors=3)으로 설정한다.
- 학습이 끝나고나면 잘 학습되어있는지 테스트 세트를 통해서 테스트 해보고 정확도를 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- n_eighbors = n의 값을 (1~9)로 바꾸어 보면서 결과를 분석 해본다.",,,,1,https://trello.com/1/cards/68175145e97ab4d70b623016/attachments/68175260d1c9f5d9c0ff6fc8/download/image.png,0,0,0,0,2025-05-04T11:41:41.512Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68175151d07120d6d0672d06,(문제8) 진짜 맛있는 토마토 찾기,https://trello.com/c/pww7j8Sl/173-%EB%AC%B8%EC%A0%9C8-%EC%A7%84%EC%A7%9C-%EB%A7%9B%EC%9E%88%EB%8A%94-%ED%86%A0%EB%A7%88%ED%86%A0-%EC%B0%BE%EA%B8%B0,"# 수행과제

- 문제 7에서 작성했던 코드에서 반복문을 추가해서 n _neighbors 값을 1~10까지 변화 시켜가면서 학습과 테스트를 반복한다.
- 반복할 때 마다 학습 정확도를 training_accuracy 라는 이름의 리스트에 누적한다.
- 반복할 때 마다 테스트 정확도를 test_accuracy 라는 이름의 리스트에 누적한다.
- 누적한 결과를 기반으로 꺽은선 그래프로 나타낸다
  - X축은 n_neighbors = n 으로 그린다.
  - Y축은 정확도(accuracy)를 기준으로 그린다.
  - 그래프에는 훈련 정확도, 테스트 정확도를 꺽은선 그래프로 출력한다.
  - 범례를 출력한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- n_neighbors 값이 1,3,9 일때 결정 경계를 시각화 해서 보여준다.

![image.png](https://trello.com/1/cards/68175151d07120d6d0672d06/attachments/681752be1b1dc528cfee949b/download/image.png)",,,,1,https://trello.com/1/cards/68175151d07120d6d0672d06/attachments/681752be1b1dc528cfee949b/download/image.png,0,0,0,0,2025-05-04T11:42:58.567Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817415c6f5d7804f1d8563b,(평가) 문제 9 - 1,https://trello.com/c/56fdh4fk/109-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-1,"# 평가 가이드

**[기본 확인]**

- 머신 러닝(Machine Learning)을 위해서 Scikit-learn이 설치 되어 있는지 확인한다.
- Scikit-learn에 포함되어 있는 dataset중 하나인 iris 데이터를 불러왔는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- iris dataset에 포함되어 있는 아래 항목들을 확인해 본다.
  - iris dataset에 포함되어 있는 DESCR 항목을 가져와서 출력해 본다.
  - dataset에 포함되어 있는 target_name 항목을 가져와서 내용을 출력해 본다.
  - dataset에 포함되어 있는 feature_names 항목을 가져와서 내용을 출력해 본다.
- dataset에 포함되어 있는 실제 데이터의 항목인 data 항목을 가져와서 다음과 같은 내용들을 살펴본다.
  - 데이터의 모양을 살펴본다.
  - 데이터의 차원을 확인한다.
  - 데이터의 타입을 확인한다.
  - 앞에서 부터 5개의 데이터를 샘플로 출력해 본다.
- dataset에 포함되어 있는 target의 내용을 가져와서 다음과 같은 내용들을 확인했는지 체크한다.
  - 데이터의 모양을 살펴본다.
  - 데이터의 차원을 확인한다.
  - 데이터의 타입을 확인한다.
  - 앞에서 부터 5개의 데이터를 샘플로 출력해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 가져온 iris 데이터의 data와 target 데이터를 기반으로 데이터 분포 그래프를 그려본다.
  - 보너스 과제에 있는 이미지를 참조해서 최대한 비슷하게 시각화를 해본다.

# 보너스 과제

- 가져온 iris 데이터의 data와 target 데이터를 기반으로 데이터 분포 그래프를 그려본다.

![image.png](https://trello.com/1/cards/6817415c6f5d7804f1d8563b/attachments/681741a1d84c2c74a364b6c0/download/image.png)",,,,1,https://trello.com/1/cards/6817415c6f5d7804f1d8563b/attachments/681741a1d84c2c74a364b6c0/download/image.png,0,0,0,0,2025-05-04T10:29:58.546Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817415c674850056ce472ee,(평가) 문제 9 - 2,https://trello.com/c/vZ6PFehV/110-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-2,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에서 제공하는 train\_test\_split을 사용해서 문제1에서 준비했던 iris 데이터셋의 data, target 항목을 각각 따로 저장했는지 확인한다.
- 나누어진 데이터는 X\_train, X\_test, y\_train, y\_test로 나누어서 담았는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- X\_train, X\_test, y\_train, y\_test의 데이터 모양과 크기를 각각 출력해 본다.
  - 출력한 결과를 통해서 데이터의 모양과 전체 크기 등을 확인한다.
- Sckit-Learn에서 제공하는 KNeighborsClassifier를 사용해서 데이터를 학습하는데 n_neighbors 옵션은 1로 설정한다.
  - KNeighborsClassifier 알고리즘을 사용해서 학습했는지 확인한다.
- 학습이 끝나면 [[5, 2.9, 1, 0.2]]의 값으로 예측을 해 보았는지 확인한다.

**[개념 확인 질문]**

- KNeighborsClassifier 알고리즘에 대해서 설명할 수 있다.

**[보너스 문제 확인]**

- 학습된 모델을 y\_train, y\_test 를 사용해서 평가를 해본다.
  - 평가에 사용한 지표들과 결과에 대해서 설명할 수 있는지 확인해 본다.

# 보너스 과제

- 학습된 모델을 y\_train, y\_test 를 사용해서 평가를 해본다.",,,,0,,0,0,0,0,2025-05-04T10:30:18.997Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681741687904937b98674f00,(평가) 문제 9 - 3,https://trello.com/c/37U6jpJL/111-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-3,"# 평가 가이드

**[기본 확인]**

- 제공되는 abalone.txt, abalone_attributes.txt 두 개의 파일을 읽어 들여서 DataFrame 객체로 만들었는지 확인한다. .

**[프로그램 구현 확인]**

- 성별 데이터를 Sex 컬럼에서 가지고 와서 따로 label이라는 항목으로 가져왔는지 확인한다.
- 기존의 DataFrame에 있는 성별 데이터는 삭제했는지 확인한다.

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 준비된 데이터를 가져와서 살펴보면 각각의 항목의 크기의 편차가 큰 것을 알 수 있다.
  - 항목 별로 숫자의 범위가 차이가 큰 것을 확인한다.
- 각각의 항목의 크기의 편차가 클 경우에 추후 데이터처리에서 문제가 될 수 있기 때문에 Min-Max Scaling을 해준다.
  - Scikit-Learn에서 제공하는 방법을 사용했는지 확인해 본다.
- Min-Max Scaling은 직접 수식을 구현해서 만들어보는 것과 sklearn.preprocessing에 있는 패키지로 구현하는 것 두 가지 방법을 모두 사용해 본다.
  - 두 가지 방식을 모두 구현했는지 확인한다.

**[개념 확인 질문]**

- Min-Max Scaling의 목적과 코드를 설명할 수 있는지 확인한다.

**[보너스 문제 확인]**

- 같은 데이터로 Standard Scaling을 해보고 결과를 비교해 본다.
  - Standard Scaling이 되었는지 결과를 확인해 본다.

# 보너스 과제

- 같은 데이터로 Standard Scaling을 해보고 결과를 비교해 본다.",,,,0,,0,0,0,0,2025-05-04T10:30:39.141Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817416a4e17ca151adb8e4b,(평가) 문제 9 - 4,https://trello.com/c/zoTzT29l/112-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-4,"# 평가 가이드

**[기본 확인]**

- 문제 3에서 사용했던 전복 데이터를 그대로 다시 DataFrame 객체로 불러 왔는지 확인해 본다.
- 성별이 있는 데이터는 label 그 외의 데이터는 data라는 이름의 객체로 만들었는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 데이터의 양을 많은 쪽에 맞추기 위해서 Random Over Sampling을 수행해 보고 결과를 출력해 본다.
  - 데이터를 Over Samling 했는지 코드와 결과를 확인한다.
- 데이터의 양을 적은 쪽에 맞추기 위해서 Random Under Sampling을 수행해 보고 결과를 출력해 본다
  - 데이터를 Under Sampling 했는지 코드와 결과를 확인한다.

**[개념 확인 질문]**

- Random Over or Under Sampling를 사용하는 이유와 장단점을 설명할 수 있는지 확인한다.

**[보너스 문제 확인]**

- 단순한 문제 Random Over Sampling, Random Under Sampling을 사용했을 때 발생하는 문제들을 살펴보고 이 기법에 대한 대안으로 SMOTE(Synthetic Minority Oversampling Technique)를 사용해 본다.
  - SMOTE 기법으로 데이터를 늘리는 코드를 작성했는지 확인하고 SMOTE 기법의 장점을 확인한다.

# 보너스 과제

- 단순한 문제 Random Over Sampling, Random Under Sampling을 사용했을 때 발생하는 문제들을 살펴보고 이 기법에 대한 대안으로 SMOTE(Synthetic Minority Oversampling Technique)를 사용해 본다.
- 리스트
  - abalone.txt
  - abalone_attributes.txt",,,,0,,0,0,0,0,2025-05-04T10:33:48.575Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817416ce25595d1e41d7330,(평가) 문제 9 - 5,https://trello.com/c/vQG3TQUi/113-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-5,"# 평가 가이드

**[기본 확인]**

- sklearn.datasets에 있는 digits 데이터를 불러 왔는지 확인한다.
- 해당 데이터셋의 DESCR 항목을 출력해서 읽어보면서 데이터의 내용을 파악 했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같은 순서로 데이터를 잘 가공했는지 확인한다.
  - 해당 데이터셋의 data라는 항목을 data로 target으로 되어 있는 항목을 label로 각각 저장한다.
  - data의 내용은 64차원 데이터로 구성되어 있으므로 이 데이터를 통해서 이미지를 확인하기 위해서 8x8 행렬로 변환한다.
  - 변환된 데이터를 기반으로 이미지를 구성해서 데이터를 확인한다.
  - PCA(Principal Component Analysis)를 주성분을 찾고 주성분을 기분으로 차원을 축소 시킨다.
  - 최종 결과로 2차원 데이터로 차원을 축소되어야 한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 2차원으로 축소된 데이터를 2차원으로 시각화해서 데이터의 군집을 확인해 본다.
  - 시각화를 통해서 군집을 확인 할 수 있는지 체크한다.

# 보너스 과제

- 2차원으로 축소된 데이터를 2차원으로 시각화해서 데이터의 군집을 확인해 본다.",,,,0,,0,0,0,0,2025-05-04T10:36:43.192Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817416e4a82a782ce9ec6b1,(평가) 문제 9 - 6,https://trello.com/c/Ex4q01Yu/114-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-6,"# 평가 가이드

**[기본 확인]**

- 문제 1에서 사용했던 전복 데이터를 다시 불러왔는지 확인한다.
- 전복데이터의 성벌을 데이터를 label 이라는 이름으로 따로 저장 되어 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 다음과 같은 과정을 통해서 라벨 엔코딩이 잘 수행 되었는지 확인한다.
  - 먼저 Sckit-Learn에서 제공하는 LabelEncoder를 사용해서 라벨 엔코딩을 한다.
  - 라벨 엔코딩된 결과를 확인한다.
- 라벨 엔코딩으로 결과가 분명하지 않아서 이번에는 원핫 엔코딩(One-Hot Encoding)을 진행해보고 결과를 볼 수 있어야 한다.
  - 최종적으로 원핫 엔코딩 된 결과를 확인해 본다.

**[개념 확인 질문]**

- 라벨 엔코딩과 원핫 엔코딩의 원리와 차이점을 설명할 수 있는지 확인한다.

**[보너스 문제 확인]**

- 위에서 설명된 데이터 전처리 기법 이외의 결측값(Missing Value), 노이즈(Noise), 이상값(Outlier)에 대해서 설명하고 구체적인 예와 처리 방법을 코드와 함께 작성하세요.
  - 결측값, 노이즈, 이상값의 처리 방법에 대한 코드를 작성해 보고 왜 사용하는지 설명할 수 있는지 확인한다.

# 보너스 과제

- 위에서 설명된 데이터 전처리 기법 이외의 결측값(Missing Value), 노이즈(Noise), 이상값(Outlier)에 대해서 설명하고 구체적인 예와 처리 방법을 코드와 함께 작성하세요.",,,,0,,0,0,0,0,2025-05-04T10:36:55.278Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817417023e77e9a0aeff851,(평가) 문제 9 - 7,https://trello.com/c/OlmVsYHR/115-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-7,"# 평가 가이드

**[기본 확인]**

- 데이터를 생성하기 위해서 mglearn 패키지를 설치 했는지 확인해 본다.
- 아래와 같이 코드를 입력해서 X, y 데이터를 생성했는지 확인한다. X, y = mglearn.datasets.make\_wave(n\_samples= 40)
- 생성된 데이터를 산점도 차트로 시각화 했는지 확인한다.

![image.png](https://trello.com/1/cards/6817417023e77e9a0aeff851/attachments/681743633a9777265e1fb803/download/image.png)

- 데이터의 분포를 살펴보면 먹을 수 있는 토마토로 라벨링 되어 있는 0번 토마토와 쓴맛이 나는 1번 데이터의 분포를 정확하게 알 수 있는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 해당 데이터를 학습 시키기 위해서 먼저 train\_test\_split()을 사용해서 데이터를 학습용 데이터와 테스트용 데이터로 분리하는데 이때 random_state=0 으로 설정한다.
  - 데이터가 정확하게 학습용 데이터와 훈련용 데이터로 잘 분리가 되었는지 확인한다.
- 학습용 데이터로 준비한 내용을 가지고 학습시켰는지 확인한다.
  - 학습 할 때에는 KNeighborsClassifier 알고리즘을 사용해야 하며 이때 (n_eighbors=3)으로 설정한다.
  - 학습이 끝나고나면 잘 학습되어있는지 테스트 세트를 통해서 테스트 해보고 정확도를 출력해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- n_eighbors = n의 값을 (1~9)로 바꾸어 보면서 결과를 분석 해본다.
  - 1~9 중에서 가장 적합한 값을 찾아 내에서 제시 할 수 있는지 확인해 본다.

# 보너스 과제

- n_eighbors = n의 값을 (1~9)로 바꾸어 보면서 결과를 분석 해본다.",,,,1,https://trello.com/1/cards/6817417023e77e9a0aeff851/attachments/681743633a9777265e1fb803/download/image.png,0,0,0,0,2025-05-04T10:37:37.418Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817417438d31cb5dc9b237c,(평가) 문제 9 - 8,https://trello.com/c/UCMxvJb5/116-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-9-8,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 문제 7에서 작성했던 코드에서 반복문을 추가해서 n _neighbors 값을 1~10까지 변화 시켜가면서 학습과 테스트를 반복 했는지 확인한다.
  - 반복할 때 마다 학습 정확도를 training_accuracy 라는 이름의 리스트에 누적한다.
  - 반복할 때 마다 테스트 정확도를 test_accuracy 라는 이름의 리스트에 누적한다.
- 누적한 결과를 기반으로 꺽은선 그래프로 잘 표현 했는지 확인한다.
  - X축은 n_neighbors = n 으로 그린다.
  - Y축은 정확도(accuracy)를 기준으로 그린다.
  - 그래프에는 훈련 정확도, 테스트 정확도를 꺽은선 그래프로 출력한다.
  - 범례를 출력한다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- n_neighbors 값이 1,3,9 일때 결정 경계를 시각화 해서 보여준다.
  - 각각의 값과 영역을 분명하게 구별해서 표현하고 있는지 확인한다.

# 보너스 과제

- n_neighbors 값이 1,3,9 일때 결정 경계를 시각화 해서 보여준다.

![image.png](https://trello.com/1/cards/6817417438d31cb5dc9b237c/attachments/6817439b7c35dae73a7a1adb/download/image.png)",,,,1,https://trello.com/1/cards/6817417438d31cb5dc9b237c/attachments/6817439b7c35dae73a7a1adb/download/image.png,0,0,0,0,2025-05-04T10:38:23.550Z,68173fca14ce89a5b4743e8f,과정 9,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681752e39b60e3763e061e27,(문제1) 토마토의 작황을 알아보자,https://trello.com/c/fS2gYKg6/174-%EB%AC%B8%EC%A0%9C1-%ED%86%A0%EB%A7%88%ED%86%A0%EC%9D%98-%EC%9E%91%ED%99%A9%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90,"# 수행과제

- 토마토 작황을 예측하기 위해서 먼저 관련 데이터를 생성해야 한다.
- 먼저 데이터를 생성하기 위해서 mglearn 패키지를 설치한다.
- mglearn 패키지가 잘 설치되고 나면 다음과 같은 코드를 입력해서 데이터를 생성한다.
  - X, y = mglearn.datasets.make\_wave(n\_samples=40)
- 생성한 데이터를 학습 데이터와 테스트 데이터로 나눈다.
- 학습 데이터를 KNeighborsRegressor 알고리즘을 이용해서 학습을 시켜서 모델을 만든다.
- 학습을 시킬 때는 n_neighbors 값을 1, 3, 9로 반복하면서 각각의 파라메터에 대한 결과를 확인한다.
- 모델이 나왔으면 테스트 세트를 기반으로 예측을 한다.
- 예측치를 기반으로 테스트 세트의 R2 값을 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- R2 이외에도 MAE, RMSE 등의 값들을 함께 확인해 본다.
- n_neighbors 값이 1, 3, 9 일때 각각의 R2, MAE, RMSE 값을 각각 출력해 보고 가장 효과적인 모델을 최종적으로 만들어 내는 코드를 작성한다.",,,,0,,0,0,0,0,2025-05-04T11:48:12.785Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681752ec9a5bba2d07f62711,(문제2) 토마토의 출하량을 예측해 보자,https://trello.com/c/xv1XiOyg/175-%EB%AC%B8%EC%A0%9C2-%ED%86%A0%EB%A7%88%ED%86%A0%EC%9D%98-%EC%B6%9C%ED%95%98%EB%9F%89%EC%9D%84-%EC%98%88%EC%B8%A1%ED%95%B4-%EB%B3%B4%EC%9E%90,"# 수행과제

- 데이터를 가져오기 위해서 다음과 같이 코드를 입력한다. 만약 mglearn이 설치되어 있지 않으면 설치부터 한다. X, y = mglearn.datasets.make\_wave(n\_samples=60)
- sklearn에서 LinearRegression 객체를 가져온다.
- X, y 데이터를 train\_test\_split로 학습용 데이터와 테스트용 데이터로 나누는데 이번에는 random_state=42 로 설정한다.
- 학습용 데이터를 넣고 학습을 시킨다.
- 학습이 끝나면 가중치와 절편을 확인해 본다.
- 학습 데이터와 테스트 데이터의 점수를 각각확인해 본다.
- 결과를 확인해 보고 해당 결과가 과소접합인지 혹은 과대접합인지 확인해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 같은 과정을 Ridge 알고리즘을 사용해서 다시 한번 수행해 본다.
- Ridge 알고리즘을 사용할 때 alpha 값을 0.1~ 1 사이의 값을 0.1씩 증가시키면서 결과를 살펴보고 alpha 파라메터가 갖는 의미를 파악해서 설명할 수 있다.",,,,0,,0,0,0,0,2025-05-04T11:48:47.390Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681752ef436a2a66e0274812,(문제3) 뜻밖의 발암물질들…,https://trello.com/c/usOVvbrl/176-%EB%AC%B8%EC%A0%9C3-%EB%9C%BB%EB%B0%96%EC%9D%98-%EB%B0%9C%EC%95%94%EB%AC%BC%EC%A7%88%EB%93%A4,"# 수행과제

- Sckit-Learn에 포함된 데이터 중 breast_cancer() 데이터를 가져온다.
- 가져온 데이트를 train\_test\_split()으로 학습용 데이터와 테스트용 데이터로 나눈다. 이떄 random_state=42로 지정한다.
- 나누어진 데이터를 DecisionTreeClassifier 알고리즘으로 학습한다.
- 학습결과 훈련 정확도와 테스트 정확도를 분류해서 각각 따로 출력한다.
- DecisionTreeClassifier 알고리즘의 파라메터 중 max\_depth=4, random\_state=0으로 지정하고 다시 학습과 평가를 반복해서 앞의 결과와 비교해 본다.
- 첫 번째 실험과 두 번째 실험의 차이가 나는지 확인하고 차이가 난다면 왜 차이가 나는지 정리해서 설명할 수 있어야 한다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 결정 트리를 시각화 해본다.",,,,0,,0,0,0,0,2025-05-04T11:49:17.647Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681753198f6bfb1984bab538,(문제4) 미생물 분류,https://trello.com/c/1EVb3N1S/177-%EB%AC%B8%EC%A0%9C4-%EB%AF%B8%EC%83%9D%EB%AC%BC-%EB%B6%84%EB%A5%98,"# 수행과제

- Sckit-Learn의 sklearn.datasets.make_blobs를 사용해서 다음과 같이 데이터를 만든다.
  - X, y = make\_blobs(centers=4, random\_state=8)
  - y = y % 2
- 방금 가져온 데이터를 시각화를 하는데 다음과 같은 조건으로 시각화를 합니다.
  - X[:,0]을 X축으로 하고 X[:1]을 Y축으로 해서 그래프로 그린다.
  - X축의 라벨을 ‘특성 0’, Y축의 라벨을 ‘특성1’로 한다.
  - y의 값에 따라서 모양과 색을 다르게 표현한다.

![image.png](https://trello.com/1/cards/681753198f6bfb1984bab538/attachments/6817546a8defd9daa9b36f45/download/image.png)

- 출력된 데이터의 모양을 보면 2차원으로 어떻게 나누어도 하나의 기준으로 완벽하게 두 그룹으로 나눌 수 없다는 점을 알 수 있다.
- Sckit-Learn의 SVC를 학습을 시키고 결과를 확인한다.
- SVC 알고리즘의 파라메터 중 C를 -1, 0, 3으로 바꾸어 보고, gamma의 값을 -1에서 2 사이의 값으로 바꾸어 보면서 학습 정확도 및 테스트 정확도를 비교해 보면서 최적의 값을 찾는다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 같은 문제를 Sckit-Learn에서 제공하는 MLPClassifier를 사용해서 분류해 본다.
- MLPClassifier에서 적용 가능한 파라메터를 확인하고 각각의 의미를 파악하고 설명할 수 있다.",,,,1,https://trello.com/1/cards/681753198f6bfb1984bab538/attachments/6817546a8defd9daa9b36f45/download/image.png,0,0,0,0,2025-05-04T11:50:23.296Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68175323f3c388b66e563141,(문제5) 이전에 없었던 물질을 분석하자,https://trello.com/c/i9KfEHy3/178-%EB%AC%B8%EC%A0%9C5-%EC%9D%B4%EC%A0%84%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EB%AC%BC%EC%A7%88%EC%9D%84-%EB%B6%84%EC%84%9D%ED%95%98%EC%9E%90,"# 수행과제

- Sckit-Learn에서 제공하는 make_blobs를 사용해서 다음과 같이 데이터를 만든다.
  - X, y = make\_blobs(random\_state=1)
- 군집 분류를 위해서 K-평균(KMeans) 알고리즘을 선택한다.
- KMeans에서 클러스터의 갯수를 3개로 설정하고 학습을 한다.
- 클러스터 레이블이 할당되면 출력해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 클러스터가 할당된 내용을 시각화 한다. 이때 각 클러스터는 다른 컬러로 표시한다.
- 클러스터의 할당을 1,3,5로 파라메터의 변화를 주면서 결과를 살펴보고 각각 시각화 해본다.",,,,0,,0,0,0,0,2025-05-04T11:50:55.422Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
6817532d828248df9db0635e,(문제6) 이전에 없었던 물질을 분석하자 II,https://trello.com/c/VuO2qfEn/179-%EB%AC%B8%EC%A0%9C6-%EC%9D%B4%EC%A0%84%EC%97%90-%EC%97%86%EC%97%88%EB%8D%98-%EB%AC%BC%EC%A7%88%EC%9D%84-%EB%B6%84%EC%84%9D%ED%95%98%EC%9E%90-ii,"# 수행과제

- Sckit-Learn에서 제공하는 make_blobs를 사용해서 다음과 같이 데이터를 만든다.
  - X, y = make\_blobs(random\_state=1)
- 군집 분류를 위해서 병합군집(agglomerative clustering) 알고리즘을 선택한다.
- 병합 군집에서 클러스터의 갯수를 3개로 설정하고 학습을 한다.
- 클러스터 레이블이 할당되면 출력해 본다.
- 군집에 어떤 과정을 통해서 형성되었는지 확인해 보기 위해서 덴드로그램(dendrogram)을 그려 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 병합군집에서 linkage 옵션에서 ward, average, complete을 각각 적용해보고 그 차이를 파악해서 위의 데이터에서는 어떤 옵션이 가장 적합한지 선택하는 코드를 작성하세요.",,,,0,,0,0,0,0,2025-05-04T11:51:29.171Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681753360b2079407c87d0f0,(문제7) 교차 검증,https://trello.com/c/U7R5f1mQ/180-%EB%AC%B8%EC%A0%9C7-%EA%B5%90%EC%B0%A8-%EA%B2%80%EC%A6%9D,"# 수행과제

- Sckit-Learn에 포함된 iris 데이터를 다시 로드 한다.
- 로지스틱 회귀(LogisticRegression)을 사용해서 데이터를 분석할 예정이다. 이때 LogisticRegression의 파라메터는 max_iter=1000으로 설정한다.
- 교차 검증을 위해서 cross\_val\_score를 사용해서 iris 데이터를 로지스틱 회귀를 검증하고 검증 결과를 출력한다.
- 여러번의 검증 결과가 나오면 평균값을 구해서 최종 출력한다.
- 폴드의 개수를 5개로 늘려서 다시 검증해 본다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 교차 검증 방법과 train\_test\_split으로 데이터를 분류해서 계산한 값을 비교하는 코드를 작성하세요.",,,,0,,0,0,0,0,2025-05-04T11:51:57.360Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
68175342ae8d5bccf88daa63,(문제8) 집으로 가는 길,https://trello.com/c/09fGci3S/181-%EB%AC%B8%EC%A0%9C8-%EC%A7%91%EC%9C%BC%EB%A1%9C-%EA%B0%80%EB%8A%94-%EA%B8%B8,"# 수행과제

- Sckit-Learn에서 iris 데이터를 불러온다.
- Sckit-Learn에 있는 train\_test\_split 객체로 데이터를 학습용 데이터와 테스트용 데이다로 분할 한다.
- KNeighborsClassifier 알고리즘으로 iris 데이터를 학습시킨다. 이때 n_neighbors=3으로 설정한다.
- 테스트 데이터로 테스트를 하고 정확도를 출력한다.
- 학습된 모델을 저장하기 위해서 joblib 라이브러리를 사용해서 학습된 모델을 *.pkl 파일로 저장한다.
- 새로운 파일을 열어서 FastAPI 에서 저장된 *.pkl 파일을 올려서 질문에 대답하는 API를 만든다. 이때 POST 메소드에 응답하게 만든다.

# 제약사항

- python에서 기본 제공되는 명령어 이외의 별도의 라이브러리나 패키지를 사용해서는 안된다.
- Python의 coding style guide를 확인하고 가이드를 준수해서 코딩한다. ([PEP 8 – 파이썬 코드 스타일 가이드 | peps.python.org](https://peps.python.org/pep-0008/ ""‌""))
  - 문자열을 표현 할 때에는 ‘ ’을 기본으로 사용한다. 다만 문자열 내에서 ‘을 사용할 경우와 같이 부득이한 경우에는 “ “를 사용한다.
  - foo = (0,) 와 같이 대입문의 = 앞 뒤로는 공백을 준다.
  - 들여 쓰기는 공백을 기본으로 사용합니다.
  - 함수 이름은 소문자로 작성하되 두 단어 이상이 사용된 이름의 경우 각 단어 사이에 언더라인( _ )을 넣어서 구별한다.
  - 함수이름과 변수 이름은 Python의 기본 예약어와 충돌되지 않게 정의한다.
  - 클래스의 이름은 CapWord 방식으로 대문자로 시작하고 두 단어 이상이 합쳐진 이름이면 두 번째 이후의 단어들도 모두 대문자로 시작한다.
- 경고 메시지 없이 모든 코드는 실행 되어야 한다.

# 보너스 과제

- 위에서 만든 서비스를 도커(Docker) 이미지로 만들어서 실행해 본다.",,,,0,,0,0,0,0,2025-05-04T11:52:29.503Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743be689e8c90965fb0cc,(평가) 문제 10 - 1,https://trello.com/c/Q7y0NsHM/117-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-1,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 토마토 작황을 예측하기 위해서 먼저 관련 데이터를 생성 했는지 확인한다.
  - 먼저 데이터를 생성하기 위해서 mglearn 패키지를 설치한다.
  - mglearn 패키지가 잘 설치되고 나면 다음과 같은 코드를 입력해서 데이터를 생성한다.
    - X, y = mglearn.datasets.make\_wave(n\_samples=40)
- 생성한 데이터를 학습 데이터와 테스트 데이터로 나눈다
  - 데이터를 나눌 때 훈련데이터와 테스트 데이터의 비율을 왜 그렇게 설정했는지 확인한다.
- 학습 데이터를 KNeighborsRegressor 알고리즘을 이용해서 학습을 시켜서 모델을 만들었는지 확인한다.
  - 학습을 시킬 때는 n_neighbors 값을 1, 3, 9로 반복하면서 각각의 파라메터에 대한 결과를 확인한다.
  - 모델이 나왔으면 테스트 세트를 기반으로 예측을 한다.
  - 예측치를 기반으로 테스트 세트의 R2 값을 확인해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- R2 이외에도 MAE, RMSE 등의 값들을 함께 확인해 본다.
  - 각 지표를 잘 이해하고 있는지 확인한다.
- n_neighbors 값이 1, 3, 9 일때 각각의 R2, MAE, RMSE 값을 각각 출력해 보고 가장 효과적인 모델을 최종적으로 만들어 내는 코드를 작성한다.
  - 각 지표에 의해서 어떤 값이 가장 효과적인 모델인지 설명할 수 있는지 확인한다.

# 보너스 과제

- R2 이외에도 MAE, RMSE 등의 값들을 함께 확인해 본다.
- n_neighbors 값이 1, 3, 9 일때 각각의 R2, MAE, RMSE 값을 각각 출력해 보고 가장 효과적인 모델을 최종적으로 만들어 내는 코드를 작성한다.",,,,0,,0,0,0,0,2025-05-04T10:39:23.794Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743bf1dfc791dacc4414a,(평가) 문제 10 - 2,https://trello.com/c/xUsK3oEQ/118-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-2,"# 평가 가이드

**[기본 확인]**

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 데이터를 가져오기 위해서 다음과 같이 코드를 입력하고 잘 생성되었는지 확인한다. 만약 mglearn이 설치되어 있지 않으면 설치부터 한다. X, y = mglearn.datasets.make\_wave(n\_samples=60)
- sklearn에서 LinearRegression 객체를 활용해서 회귀 분석을 한다.
  - X, y 데이터를 train\_test\_split로 학습용 데이터와 테스트용 데이터로 나누는데 이번에는 random_state=42 로 설정한다.
  - 학습용 데이터를 넣고 학습을 시킨다.
  - 학습이 끝나면 가중치와 절편을 확인해 본다.
  - 학습 데이터와 테스트 데이터의 점수를 각각확인해 본다.
  - 결과를 확인해 보고 해당 결과가 과소접합인지 혹은 과대접합인지 확인해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 같은 과정을 Ridge 알고리즘을 사용해서 다시 한번 수행해 본다.
  - LinearRegression과 어떤 차이가 있는지 확인해 본다.
- Ridge 알고리즘을 사용할 때 alpha 값을 0.1~ 1 사이의 값을 0.1씩 증가시키면서 결과를 살펴보고 alpha 파라메터가 갖는 의미를 파악해서 설명할 수 있다.
  - alpha 값이 결과에 어떤 영향을 미치는지 이해하고 설명할 수 있는지 확인한다.

# 보너스 과제

- 같은 과정을 Ridge 알고리즘을 사용해서 다시 한번 수행해 본다.
- Ridge 알고리즘을 사용할 때 alpha 값을 0.1~ 1 사이의 값을 0.1씩 증가시키면서 결과를 살펴보고 alpha 파라메터가 갖는 의미를 파악해서 설명할 수 있다.",,,,0,,0,0,0,0,2025-05-04T10:39:37.711Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743c053554fa1fc4922a4,(평가) 문제 10 - 3,https://trello.com/c/cDSIyD4K/119-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-3,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에 포함된 데이터 중 breast_cancer() 데이터를 가져 왔는지 확인한다.
- 가져온 데이트를 train\_test\_split()으로 학습용 데이터와 테스트용 데이터로 나누었는지 확인한다. 이떄 random_state=42로 지정되어 있어야 한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 나누어진 데이터를 DecisionTreeClassifier 알고리즘으로 학습했는지 확인한다.
  - 학습결과 훈련 정확도와 테스트 정확도를 분류해서 각각 따로 출력한다.
  - DecisionTreeClassifier 알고리즘의 파라메터 중 max\_depth=4, random\_state=0으로 지정하고 다시 학습과 평가를 반복해서 앞의 결과와 비교해 본다.
  - 첫 번째 실험과 두 번째 실험의 차이가 나는지 확인하고 차이가 난다면 왜 차이가 나는지 정리해서 설명할 수 있어야 한다.

**[개념 확인 질문]**

- 결정 트리 알고리즘에 대해서 설명할 수 있는지 확인한다.

**[보너스 문제 확인]**

- 결정 트리를 시각화 해본다.
  - 결정 트리의 각 수치에 대해서 설명할 수 있는지 확인한다.

# 보너스 과제

- 결정 트리를 시각화 해본다.",,,,0,,0,0,0,0,2025-05-04T10:39:50.741Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743c2ae8d5bccf884ea38,(평가) 문제 10 - 4,https://trello.com/c/DD3bGJM1/120-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-4,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn의 sklearn.datasets.make_blobs를 사용해서 다음과 같이 데이터를 만들었는지 확인한다. .
  - X, y = make\_blobs(centers=4, random\_state=8)
  - y = y % 2

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 방금 가져온 데이터를 시각화를 하는데 다음과 같은 조건으로 시각화를 했는지 확인한다.
  - X[:,0]을 X축으로 하고 X[:1]을 Y축으로 해서 그래프로 그린다.
  - X축의 라벨을 ‘특성 0’, Y축의 라벨을 ‘특성1’로 한다.
  - y의 값에 따라서 모양과 색을 다르게 표현한다.
- 출력된 데이터의 모양을 보면 2차원으로 어떻게 나누어도 하나의 기준으로 완벽하게 두 그룹으로 나눌 수 없다는 점을 설명할 수 있는지 확인한다.
- Sckit-Learn의 SVC를 학습을 시키고 결과를 확인한다.
  - SVC 알고리즘의 파라메터 중 C를 -1, 0, 3으로 바꾸어 보고, gamma의 값을 -1에서 2 사이의 값으로 바꾸어 보면서 학습 정확도 및 테스트 정확도를 비교해 보면서 최적의 값을 찾는다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 같은 문제를 Sckit-Learn에서 제공하는 MLPClassifier를 사용해서 분류 할 수 있는지 확인해 본다.
  - MLPClassifier에서 적용 가능한 파라메터를 확인하고 각각의 의미를 파악하고 설명할 수 있는지 확인해 본다.

# 보너스 과제

- 같은 문제를 Sckit-Learn에서 제공하는 MLPClassifier를 사용해서 분류해 본다.
- MLPClassifier에서 적용 가능한 파라메터를 확인하고 각각의 의미를 파악하고 설명할 수 있다.",,,,0,,0,0,0,0,2025-05-04T10:40:02.509Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743c34f738cd5876e3afb,(평가) 문제 10 - 5,https://trello.com/c/Vj7E3NY6/121-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-5,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에서 제공하는 make_blobs를 사용해서 다음과 같이 데이터를 만들었는지 확인한다.
  - X, y = make\_blobs(random\_state=1)

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 군집 분류를 위해서 K-평균(KMeans) 알고리즘을 선택해서 학습 했는지 확인한다.
  - KMeans에서 클러스터의 갯수를 3개로 설정하고 학습을 한다.
  - 클러스터 레이블이 할당되면 출력해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 클러스터가 할당된 내용을 시각화 한다. 이때 각 클러스터는 다른 컬러로 표시한다.
  - 클러스터의 내용을 시각화 했는지 확인한다.
- 클러스터의 할당을 1,3,5로 파라메터의 변화를 주면서 결과를 살펴보고 각각 시각화 해본다.
  - 클러스터의 개수가 영향을 미치는 내용을 분석하고 설명할 수 있는지 확인한다.

# 보너스 과제

- 클러스터가 할당된 내용을 시각화 한다. 이때 각 클러스터는 다른 컬러로 표시한다.
- 클러스터의 할당을 1,3,5로 파라메터의 변화를 주면서 결과를 살펴보고 각각 시각화 해본다.",,,,0,,0,0,0,0,2025-05-04T10:40:15.707Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743c5274bff7a876cfd9a,(평가) 문제 10 - 6,https://trello.com/c/ZlxpyYgT/122-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-6,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에서 제공하는 make_blobs를 사용해서 다음과 같이 데이터를 만들었는지 확인한다.
  - X, y = make\_blobs(random\_state=1)

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 군집 분류를 위해서 병합군집(agglomerative clustering) 알고리즘을 선택해서 학습했는지 확인한다.
  - 병합 군집에서 클러스터의 갯수를 3개로 설정하고 학습을 한다.
  - 클러스터 레이블이 할당되면 출력해 본다.
  - 군집에 어떤 과정을 통해서 형성되었는지 확인해 보기 위해서 덴드로그램(dendrogram)을 그려 본다.

**[개념 확인 질문]**

- Classification과 Clustering의 차이와 장단점에 대해서 설명할 수 있는지 확인한다.

**[보너스 문제 확인]**

- 병합군집에서 linkage 옵션에서 ward, average, complete을 각각 적용해보고 그 차이를 파악해서 위의 데이터에서는 어떤 옵션이 가장 적합한지 선택하는 코드를 작성하세요.
  - 각 옵션에 따라 학습이 달라지는 원리를 이해하고 있는지 확인한다.

# 보너스 과제

- 병합군집에서 linkage 옵션에서 ward, average, complete을 각각 적용해보고 그 차이를 파악해서 위의 데이터에서는 어떤 옵션이 가장 적합한지 선택하는 코드를 작성하세요.",,,,0,,0,0,0,0,2025-05-04T10:40:26.723Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743c8594f3a4395ab6655,(평가) 문제 10 - 7,https://trello.com/c/wq88nfyy/123-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-7,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에 포함된 iris 데이터를 다시 로드 했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- 로지스틱 회귀(LogisticRegression)을 사용해서 데이터를 분석했는지 확인한다.
  - LogisticRegression의 파라메터는 max_iter=1000으로 설정한다.
  - 교차 검증을 위해서 cross\_val\_score를 사용해서 iris 데이터를 로지스틱 회귀를 검증하고 검증 결과를 출력한다.
  - 여러번의 검증 결과가 나오면 평균값을 구해서 최종 출력한다.
  - 폴드의 개수를 5개로 늘려서 다시 검증해 본다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 교차 검증 방법과 train\_test\_split으로 데이터를 분류해서 계산한 값을 비교하는 코드를 작성하세요.
  - 교차 검증과 train\_test\_split 사이에 차이를 비교해서 설명할 수 있는지 확인한다.

# 보너스 과제

- 교차 검증 방법과 train\_test\_split으로 데이터를 분류해서 계산한 값을 비교하는 코드를 작성하세요.",,,,0,,0,0,0,0,2025-05-04T10:40:37.860Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
681743d0d341a8678bfc271b,(평가) 문제 10 - 8,https://trello.com/c/E4ve4lq8/124-%ED%8F%89%EA%B0%80-%EB%AC%B8%EC%A0%9C-10-8,"# 평가 가이드

**[기본 확인]**

- Sckit-Learn에서 iris 데이터를 불러 왔는지 확인한다.
- Sckit-Learn에 있는 train\_test\_split 객체로 데이터를 학습용 데이터와 테스트용 데이다로 분할 했는지 확인한다.

**[프로그램 구현 확인]**

**[프로그램 동작 확인]** 출력 \*\*문구는 다를 수 있음

- KNeighborsClassifier 알고리즘으로 iris 데이터를 학습 했는지 확인한다.
  - n_neighbors=3으로 설정한다.
  - 테스트 데이터로 테스트를 하고 정확도를 출력한다.
- 학습된 모델을 저장하고 다시 불러 올 수 있는지 확인한다.
  - joblib 라이브러리를 사용해서 학습된 모델을 *.pkl 파일로 저장한다.
  - 새로운 파일을 열어서 FastAPI 에서 저장된 *.pkl 파일을 올려서 질문에 대답하는 API를 만든다. 이때 POST 메소드에 응답하게 만든다.

**[개념 확인 질문]**

**[보너스 문제 확인]**

- 위에서 만든 서비스를 도커(Docker) 이미지로 만들어서 실행해 본다.
  - 도커에서 서비스가 정상적으로 작동하는지 확인해 본다.

# 보너스 과제

- 위에서 만든 서비스를 도커(Docker) 이미지로 만들어서 실행해 본다.",,,,0,,0,0,0,0,2025-05-04T10:40:47.061Z,68173fcf3858d2b9a5f2c439,과정 10,680f20b0fe28de73b992ed5f,DIP-2025-SW파일럿-PYTHON,false,,false
